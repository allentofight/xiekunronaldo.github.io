<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AllenToFight Blog]]></title>
  <link href="http://xiekunRonaldo.github.io/atom.xml" rel="self"/>
  <link href="http://xiekunRonaldo.github.io/"/>
  <updated>2014-10-21T19:51:25+08:00</updated>
  <id>http://xiekunRonaldo.github.io/</id>
  <author>
    <name><![CDATA[AllenToFight]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[js]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/12/js/"/>
    <updated>2014-10-12T14:22:28+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/12/js</id>
    <content type="html"><![CDATA[<h2 id="speaking-javascript">Speaking Javascript学习笔记</h2>

<h3 id="primitive-values-versus-objects">Primitive Values Versus Objects</h3>
<p>JavaScript makes a somewhat arbitrary distinction between values:</p>

<ul>
  <li>The primitive values are booleans, numbers, strings, null, and undefined.</li>
  <li>All other values are objects.</li>
</ul>

<p>A major difference between the two is how they are compared; each object has a unique
identity and is only (strictly) equal to itself:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// an empty object</span>
</span><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// another empty object &gt; obj1 === obj2</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj1</span> <span class="o">===</span> <span class="nx">obj1</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="primitive-values">Primitive Values</h4>

<ul>
  <li>Booleans: true, false </li>
  <li>Numbers: 1736, 1.351 </li>
  <li>Strings: ‘abc’, “abc” </li>
  <li>Two “nonvalues”: undefined, null </li>
</ul>

<p>Primitives have the following characteristics:</p>

<ul>
  <li>Compared by value</li>
</ul>

<p><code>
&gt; 3 === 3
true
&gt; 'abc' === 'abc'
true
</code></p>

<ul>
  <li>
    <p>Always immutable</p>

    <p>Properties can’t be changed, added, or removed:</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span><span class="p">;</span>
</span><span class="line">     <span class="o">&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// try to change property `length`</span>
</span><span class="line">     <span class="o">&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// ⇒ no effect 3</span>
</span><span class="line">	 <span class="o">&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// try to create property `foo`</span>
</span><span class="line">	 <span class="o">&gt;</span><span class="nx">str</span><span class="p">.</span><span class="nx">foo</span> <span class="c1">// ⇒ no effect, unknown property undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Objects
All nonprimitive values are objects.The most common kinds of objects are:</p>

<ul>
  <li>Plain objects</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="p">{</span>
</span><span class="line">            <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;Jane&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;Doe&#39;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Arrays</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span> <span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;banana&#39;</span><span class="p">,</span> <span class="s1">&#39;cherry&#39;</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Regular expressions</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="sr">/^a+b+$/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Objects have the following characteristics:</p>

<ul>
  <li>Compared by reference
Identities are compared; every value has its own identity:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="p">{}</span> <span class="o">===</span> <span class="p">{}</span>  <span class="c1">// two different empty objects</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nx">obj1</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj1</span> <span class="o">===</span> <span class="nx">obj2</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Mutable by default
You can normally freely change, add, and remove properties</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span> <span class="c1">// add property `foo` &gt; obj.foo</span>
</span><span class="line"><span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### undefined and null</p>

<p>Most programming languages have values denoting missing information. JavaScript has two such “nonvalues,” undefined and null:</p>

<ul>
  <li>undefined means “no value.” Uninitialized variables are undefined:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">foo</span>
</span><span class="line"><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Missing parameters are undefined:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="p">}</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">f</span><span class="p">()</span>
</span><span class="line"><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If you read a nonexistent property, you get undefined:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// empty object </span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span>
</span><span class="line"><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>null means “no object.” It is used as a nonvalue whenever an object is expected (parameters, last in a chain of objects, etc.)</li>
</ul>

<p><code>Note</code></p>

<p>undefined and null have no properties, not even standard meth‐ ods such as toString().</p>

<h4 id="checking-for-undefined-or-null">Checking for undefined or null</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">x</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can also exploit the fact that both undefined and null are considered false:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>Note</code></p>

<p>false, 0, NaN, and ‘’ are also considered false</p>

<h4 id="categorizing-values-using-typeof-and-instanceof">Categorizing Values Using typeof and instanceof</h4>
<p>There are two operators for categorizing values: <code>typeof</code> is mainly used for primitive values, while <code>instanceof</code> is used for objects.</p>

<p>typeof looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">typeof</span> <span class="nx">value</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> <span class="k">typeof</span> <span class="kc">true</span>
</span><span class="line"><span class="s1">&#39;boolean&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">typeof</span> <span class="s1">&#39;abc&#39;</span>
</span><span class="line"><span class="s1">&#39;string&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">typeof</span> <span class="p">{}</span> <span class="c1">// empty object literal</span>
</span><span class="line"><span class="s1">&#39;object&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">typeof</span> <span class="p">[]</span> <span class="c1">// empty array literal</span>
</span><span class="line"><span class="s1">&#39;object&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The following table lists all results of typeof:</p>

<table>
  <thead>
    <tr>
      <th>Operand</th>
      <th>Result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>undefined</td>
      <td>undefined</td>
    </tr>
    <tr>
      <td>null</td>
      <td>‘object’</td>
    </tr>
    <tr>
      <td>Boolean value</td>
      <td>‘boolean’</td>
    </tr>
    <tr>
      <td>Number value</td>
      <td>‘number’</td>
    </tr>
    <tr>
      <td>String value</td>
      <td>‘string’</td>
    </tr>
    <tr>
      <td>Function</td>
      <td>‘function’</td>
    </tr>
    <tr>
      <td>All other normal values</td>
      <td>‘object’</td>
    </tr>
    <tr>
      <td>(Engine-created value)</td>
      <td>JavaScript engines are allowed to create values for whichtypeofreturns arbitrary strings (different from all results listed in this table).</td>
    </tr>
  </tbody>
</table>

<p><code>Note</code>
typeof null returning ‘object’ is a bug that can’t be fixed, because it would break existing code. It does not mean that null is an object.</p>

<p>instanceof looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">Constr</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>It returns true if value is an object that has been created by the constructor Constr</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bar</span><span class="p">();</span> <span class="c1">// object created by constructor Bar &gt; b instanceof Bar</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="p">{}</span> <span class="k">instanceof</span> <span class="nb">Object</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="p">[]</span> <span class="k">instanceof</span> <span class="nb">Array</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="p">[]</span> <span class="k">instanceof</span> <span class="nb">Object</span>  <span class="c1">// Array is a subconstructor of Object</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="kc">undefined</span> <span class="k">instanceof</span> <span class="nb">Object</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="o">&gt;</span> <span class="kc">null</span> <span class="k">instanceof</span> <span class="nb">Object</span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Truthy and Falsy
The following values are interpreted as false:</p>

<ul>
  <li>undefined,null </li>
  <li>Boolean:false </li>
  <li>Number:-0,NaN </li>
  <li>String:’’
Boolean(), called as a function, converts its parameter to a boolean. You can use it to test how a value is interpreted:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">Boolean</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Boolean</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Boolean</span><span class="p">({})</span> <span class="c1">// empty object</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Boolean</span><span class="p">([])</span> <span class="c1">// empty array</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Numbers
All numbers in JavaScript are floating-point:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="mi">1</span> <span class="o">===</span> <span class="mf">1.0</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Special numbers include the following:</p>

<ul>
  <li>NaN (“not a number”)
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span></figure></notextile></li>
</ul>
<p>&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"> <span class="nx">An</span> <span class="nx">error</span> <span class="nx">value</span><span class="o">:</span>
</span><span class="line">        <span class="o">&gt;</span> <span class="nb">Number</span><span class="p">(</span><span class="s1">&#39;xyz&#39;</span><span class="p">)</span>  <span class="c1">// &#39;xyz&#39; can’t be converted to a number</span>
</span><span class="line">		<span class="kc">NaN</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;
* Infinity
Also mostly an error value:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span><span class="mi">3</span><span class="o">/</span> <span class="mi">0</span>
</span><span class="line"><span class="kc">Infinity</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>  <span class="c1">// number too large</span>
</span><span class="line"><span class="kc">Infinity</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Strings
Single characters are accessed via square brackets:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">str</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="s1">&#39;b&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### String Methods</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;abc&#39;</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1">// copy a substring</span>
</span><span class="line"><span class="s1">&#39;bc&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;abc&#39;</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;b&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Function Declarations Are Hoisted
Function declarations are hoisted—moved in their entirety to the beginning of the cur‐ rent scope. That allows you to refer to functions that are declared later:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">bar</span><span class="p">();</span> <span class="c1">// OK, bar is hoisted </span>
</span><span class="line">	<span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="p">...</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Note that while var declarations are also hoisted (see “Variables Are Hoisted” on page 23), assignments performed by them are not:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">bar</span><span class="p">();</span> <span class="c1">// Not OK, bar is still undefined </span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// ...</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Too Many or Too Few Arguments
Let’s use the following function to explore how too many or too few parameters are handled in JavaScript</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">toArray</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Additional parameters will be ignored (except by arguments):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nx">ab</span>
</span><span class="line"><span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Missing parameters will get the value undefined:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nx">a</span> <span class="kc">undefined</span>
</span><span class="line"><span class="p">[</span> <span class="s1">&#39;a&#39;</span> <span class="p">]</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">f</span><span class="p">()</span>
</span><span class="line"><span class="kc">undefined</span> <span class="kc">undefined</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Optional Parameters
The following is a common pattern for assigning default values to parameters:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">pair</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// (1) </span>
</span><span class="line">	<span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">	<span class="k">return</span> <span class="p">[</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Enforcing an Arity
If you want to enforce an arity (a specific number of parameters), you can check arguments.length:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">pair</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Need exactly 2 arguments&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line">	<span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Converting arguments to an Array
arguments is not an array, it is only array-like (see “Array-Like Objects and Generic Methods” on page 262). It has a property length, and you can access its elements via indices in square brackets. You cannot, however, remove elements or invoke any of the array methods on it. Thus, you sometimes need to convert arguments to an array</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">toArray</span><span class="p">(</span><span class="nx">arrayLikeObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arrayLikeObject</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>`
#### Exception Handling
The most common way to handle exceptions (see Chapter 14) is as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">getPerson</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;ID must not be negative: &#39;</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">id</span><span class="o">:</span> <span class="nx">id</span>
</span><span class="line">    <span class="p">};</span> <span class="c1">// normally: retrieved from database }</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">getPersons</span><span class="p">(</span><span class="nx">ids</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">        <span class="nx">ids</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">try</span> <span class="p">{</span>
</span><span class="line">                <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="nx">getPerson</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class="line">                <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span><span class="line">            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">exception</span><span class="p">);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">});</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The try clause surrounds critical code, and the catch clause is executed if an exception is thrown inside the try clause. Using the preceding code:</p>

<p><code>
 &gt; getPersons([2, -5, 137])
    [Error: ID must not be negative: -5]
    [ { id: 2 }, { id: 137 } ]
</code></p>

<h4 id="strict-mode">Strict Mode</h4>

<p>Strict mode (see <code>Strict Mode</code> on page 62) enables more warnings and makes JavaScript a cleaner language (nonstrict mode is sometimes called <code>sloppy mode</code>). To switch it on, type the following line first in a JavaScript file or a <code>&lt;script&gt;</code> tag:
<code>
'use strict';
</code>
You can also enable strict mode per function:</p>

<p><code>
function functionInStrictMode() { 
	'use strict';
}
</code></p>

<h4 id="variables-are-function-scoped">Variables Are Function-Scoped</h4>

<p>The scope of a variable is always the complete function (as opposed to the current block). For example:</p>

<p><code>
function foo() {
    var x = -512;
    if (x &lt; 0) { // (1) var tmp = -x;
        ...
    }
    console.log(tmp); // 512 
}
</code></p>

<p>We can see that the variable tmp is not restricted to the block starting in line (1); it exists until the end of the function.</p>

<h4 id="variables-are-hoisted">Variables Are Hoisted</h4>

<p>Each variable declaration is <code>hoisted</code>: the declaration is moved to the <code>beginning</code> of the function, but assignments that it makes stay put. As an example, consider the variable declaration in line (1) in the following function:</p>

<p><code>
function foo() {
    console.log(tmp); // undefined 
    if (false) {
        var tmp = 3; // (1) 
    }
}
</code></p>

<p>Internally, the preceding function is executed like this:</p>

<p><code>
function foo() {
    var tmp; // hoisted declaration 
    console.log(tmp);
    if (false) {
        tmp = 3; // assignment stays put 
    }
}
</code>
#### Closures
Each function stays connected to the variables of the functions that surround it, even after it leaves the scope in which it was created. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">createIncrementor</span><span class="p">(</span><span class="nx">start</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// (1)</span>
</span><span class="line">        <span class="nx">start</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">start</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">inc</span> <span class="o">=</span> <span class="nx">createIncrementor</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">inc</span><span class="p">()</span>
</span><span class="line"><span class="mi">6</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">inc</span><span class="p">()</span>
</span><span class="line"><span class="mi">7</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">inc</span><span class="p">()</span>
</span><span class="line"><span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>A closure is a function plus the connection to the variables of its surrounding scopes. Thus, what createIncrementor() returns is a closure.</p>

<h4 id="the-iife-pattern-introducing-a-new-scope">The IIFE Pattern: Introducing a New Scope</h4>
<p>Sometimes you want to introduce a new variable scope—for example, to prevent a vari‐able from becoming global. In JavaScript, you can’t use a block to do so; you must use a function. But there is a pattern for using a function in a block-like manner. It is called IIFE (immediately invoked function expression, pronounced “iffy”):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">// open IIFE</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="p">...;</span> <span class="c1">// not a global variable</span>
</span><span class="line"><span class="p">}());</span> <span class="c1">// close IIFE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>An IIFE is a function expression that is called <code>immediately</code> after you define it. Inside the function, a new scope exists, preventing tmp from becoming global</p>

<h5 id="iife-use-case-inadvertent-sharing-via-closures">IIFE use case: inadvertent sharing via closures</h5>
<p>Closures keep their connections to outer variables, which is sometimes not what you want:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">i</span>
</span><span class="line">    <span class="p">});</span> <span class="c1">// (1) </span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="mi">1</span><span class="p">]());</span> <span class="c1">// 5 (not 1) </span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="mi">3</span><span class="p">]());</span> <span class="c1">// 5 (not 3)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The value returned in line (1) is always the current value of i, not the value it had when the function was created. After the loop is finished, i has the value 5, which is why all functions in the array return that value. If you want the function in line (1) to receive a snapshot of the current value of i, you can use an IIFE:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">i2</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span> <span class="c1">// copy current i</span>
</span><span class="line">        <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">i2</span>
</span><span class="line">        <span class="p">});</span>
</span><span class="line">    <span class="p">}());</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Objects and Constructors
* Single Objects</p>

<p>In JavaScript, you can directly create plain objects, via object literals:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">jane</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jane&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">describe</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s1">&#39;Person named &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
The in operator checks whether a property exists:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="s1">&#39;newProperty&#39;</span> <span class="k">in</span> <span class="nx">jane</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;foo&#39;</span> <span class="k">in</span> <span class="nx">jane</span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If you read a property that does not exist, you get the value undefined. Hence, the previous two checks could also be performed like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="nx">jane</span><span class="p">.</span><span class="nx">newProperty</span> <span class="o">!==</span> <span class="kc">undefined</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">jane</span><span class="p">.</span><span class="nx">foo</span> <span class="o">!==</span> <span class="kc">undefined</span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The delete operator removes a property:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="k">delete</span> <span class="nx">jane</span><span class="p">.</span><span class="nx">newProperty</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Arbitrary Property Keys
A property key can be any string. So far, we have seen property keys in object literals and after the dot operator. However, you can use them that way <code>only if</code> they are <code>identifiers</code> (see “Identifiers and Variable Names” on page 6). If you want to use other strings as keys, you have to quote them in an object literal and use square brackets to get and set the property:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;not an identifier&#39;</span><span class="o">:</span> <span class="mi">123</span> <span class="p">};</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;not an identifier&#39;</span><span class="p">]</span>
</span><span class="line"><span class="mi">123</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;not an identifier&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Square brackets also allow you to compute the key of a property:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">hello</span><span class="o">:</span> <span class="s1">&#39;world&#39;</span> <span class="p">};</span>
</span><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span>
</span><span class="line"><span class="s1">&#39;world&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;hel&#39;</span><span class="o">+</span><span class="s1">&#39;lo&#39;</span><span class="p">]</span>
</span><span class="line"><span class="s1">&#39;world&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Extracting Methods
If you extract a method, it loses its connection with the object. On its own, the function is not a method anymore, and this has the value undefined (in strict mode).
As an example, let’s go back to the earlier object jane:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">jane</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jane&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">describe</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s1">&#39;Person named &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>We want to extract the method describe from jane, put it into a variable func, and call it. However, that doesn’t work:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="nx">jane</span><span class="p">.</span><span class="nx">describe</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">func</span><span class="p">()</span>
</span><span class="line"><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">property</span> <span class="s1">&#39;name&#39;</span> <span class="nx">of</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The solution is to use the method bind() that all functions have. It creates a new function whose this always has the given value:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">func2</span> <span class="o">=</span> <span class="nx">jane</span><span class="p">.</span><span class="nx">describe</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">jane</span><span class="p">);</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">func2</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;Person named Jane&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Functions Inside a Method
Every function has its own special variable this. This is inconvenient if you nest a function inside a method, because you can’t access the method’s this from the function. The following is an example where we call forEach with a function to iterate over an array:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">jane</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jane&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">friends</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Tarzan&#39;</span><span class="p">,</span> <span class="s1">&#39;Cheeta&#39;</span><span class="p">],</span>
</span><span class="line">    <span class="nx">logHiToFriends</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class="line">        <span class="k">this</span><span class="p">.</span><span class="nx">friends</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">friend</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="c1">// `this` is undefined here</span>
</span><span class="line">            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; says hi to &#39;</span> <span class="o">+</span> <span class="nx">friend</span><span class="p">);</span>
</span><span class="line">        <span class="p">});</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Calling logHiToFriends produces an error:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nx">jane</span><span class="p">.</span><span class="nx">logHiToFriends</span><span class="p">()</span>
</span><span class="line"><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">property</span> <span class="s1">&#39;name&#39;</span> <span class="nx">of</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Let’s look at two ways of fixing this.</p>

<ul>
  <li>First, we could store this in a different variable:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">logHiToFriends</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">friends</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">friend</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; says hi to &#39;</span> <span class="o">+</span> <span class="nx">friend</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>forEach has a second parameter that allows you to provide a value for this:</li>
</ul>

<p><code>
logHiToFriends: function() {
    'use strict';
    this.friends.forEach(function(friend, this) {
        console.log(this.name + ' says hi to ' + friend);
    }, this);
}
</code>
#### Constructors: Factories for Objects
 JavaScript objects also support a feature that is truly object-oriented: inheritance</p>

<p>In addition to being “real” functions and methods, functions play another role in Java‐ Script: they become constructors—factories for objects—if invoked via the <code>new</code> operator.</p>

<p>Constructors are thus a rough analog to classes in other languages. By convention, the names of constructors start with <code>capital letters</code>. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Set up instance data</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">Point</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// Methods</span>
</span><span class="line"><span class="nx">Point</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">dist</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>We can see that a constructor has two parts. First, the function Point sets up the instance data. Second, the property Point.prototype contains an object with the methods. The former data is specific to each instance, while the latter data is shared among all instances.</p>

<p>&#8220;&#8220;
&gt; var p = new Point(3, 5); 
&gt; p.x
3
&gt; p.dist() 
5.830951894845301
&gt; p instanceof Point
true
&#8220;`
#### Arrays
The length property indicates how many elements an array has. You can use it to append elements and to remove elements:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">];</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span>
</span><span class="line"><span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">]</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span>
</span><span class="line"><span class="p">[</span> <span class="s1">&#39;a&#39;</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The <code>in</code> operator works for arrays, too:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">];</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">1</span> <span class="k">in</span> <span class="nx">arr</span> <span class="c1">// is there an element at index 1? </span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">5</span> <span class="k">in</span> <span class="nx">arr</span> <span class="c1">// is there an element at index 5? </span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Note that arrays are objects and can thus have object properties:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">foo</span>
</span><span class="line"><span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Array Methods</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">];</span>
</span><span class="line"><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>  <span class="c1">// append an element</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>  <span class="c1">// remove last element</span>
</span><span class="line"><span class="s1">&#39;x&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span>
</span><span class="line"><span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">]</span>
</span><span class="line">
</span><span class="line"> <span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>  <span class="c1">// remove first element</span>
</span><span class="line"><span class="s1">&#39;a&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span>
</span><span class="line"><span class="p">[</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">]</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>  <span class="c1">// prepend an element</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">arr</span>
</span><span class="line"><span class="p">[</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Iterating over Arrays</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">].</span><span class="nx">forEach</span><span class="p">(</span>
</span><span class="line"><span class="kd">function</span> <span class="p">(</span><span class="nx">elem</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// (1)</span>
</span><span class="line">            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span> <span class="o">+</span> <span class="s1">&#39;. &#39;</span> <span class="o">+</span> <span class="nx">elem</span><span class="p">);</span>
</span><span class="line">        <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>map creates a new array by applying a function to each element of an existing array:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span> <span class="p">})</span>
</span><span class="line"><span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Regular Expressions</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="sr">/^a+b+$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;aaab&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="sr">/^a+b+$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;aaa&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Method exec(): Match and Capture Groups</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="sr">/a(b+)a/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="s1">&#39;_abbba_aba_&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">[</span> <span class="s1">&#39;abbba&#39;</span><span class="p">,</span> <span class="s1">&#39;bbb&#39;</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The returned array contains the complete match at index 0, the capture of the first group at index 1, and so on.</p>

<h5 id="method-replace-search-and-replace">Method replace(): Search and Replace</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;&lt;a&gt; &lt;bbb&gt;&#39;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&lt;(.*?)&gt;/g</span><span class="p">,</span> <span class="s1">&#39;[$1]&#39;</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;[a] [bbb]&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Evaluating an object literal via eval()
eval parses its argument in statement context. You have to put parentheses around an object literal if you want eval to return an object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;{ foo: 123 }&#39;</span><span class="p">)</span>
</span><span class="line"><span class="mi">123</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;({ foo: 123 })&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="mi">123</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Immediately invoking a function expression
The following code is an <code>immediately invoked function expression</code> (IIFE), a function whose body is executed right away
If you omit the parentheses, you get a syntax error, because JavaScript sees a function declaration, which can’t be anonymous:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;abc&#39;</span> <span class="p">}()</span>
</span><span class="line"><span class="nx">SyntaxError</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">statement</span> <span class="nx">requires</span> <span class="nx">a</span> <span class="nx">name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If you add a name, you also get a syntax error, because function declarations can’t be immediately invoked:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;abc&#39;</span> <span class="p">}()</span>
</span><span class="line"><span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">Unexpected</span> <span class="nx">token</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Invoking Methods on Number Literals
With method invocations, it is important to distinguish between the floating-point dot and the method invocation dot. Thus, you cannot write 1.toString(); you must use one of the following alternatives:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="mi">1</span><span class="p">..</span><span class="nx">toString</span><span class="p">()</span>
</span><span class="line"><span class="mi">1</span> <span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="c1">// space before dot </span>
</span><span class="line"><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>
</span><span class="line"><span class="mf">1.0</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Strict Mode
* Variables Must Be Declared in Strict Mode
* Functions in Strict Mode</p>

<pre><code>Functions must be declared at the top level of a scope

In strict mode, all functions must be declared at the top level of a scope (global scope or directly inside a function

```
function strictFunc() {
'use strict'; {
    // SyntaxError:
    function nested() {}
} }
```
</code></pre>

<p>If you want to work around this limitation, you can create a function inside a block via a variable declaration and a function expression:</p>

<p><code>
function strictFunc() {
    'use strict'; 
    {
        // OK:
        var nested = function() {};
    }
}
</code>
* The arguments objects has fewer properties</p>

<p>The arguments object is simpler in strict mode: the properties arguments.callee and arguments.caller have been eliminated, you can’t assign to the variable arguments, and arguments does not track changes to parameters (if a parameter changes, the cor‐ responding array element does not change with it).</p>

<ul>
  <li>this is undefined in nonmethod functions</li>
</ul>

<p>In sloppy mode, the value of this in nonmethod functions is the global object (window in browsers;</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">sloppyFunc</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nb">window</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In strict mode, it is undefined:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">strictFunc</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class="line">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// true </span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This is useful for constructors. For example, the following constructor, Point, is in strict mode:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">Point</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Due to strict mode, you get a warning when you accidentally forget new and call it as a function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">pt</span> <span class="o">=</span> <span class="nx">Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">set</span> <span class="nx">property</span> <span class="s1">&#39;x&#39;</span> <span class="nx">of</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####  Setting and Deleting Immutable Properties Fails with an Exception in Strict Mode</p>

<p>Illegal manipulations of properties throw exceptions in strict mode. For example, at‐ tempting to set the value of a read-only property throws an exception, as does attempting to delete a nonconfigurable property</p>

<p>&#8220;`
var str = ‘abc’;</p>

<p>function sloppyFunc() {
    str.length = 7; // no effect, silent failure
    console.log(str.length); // 3 
}</p>

<p>function strictFunc() {
    ‘use strict’;
    str.length = 7; // TypeError: Cannot assign to // read-only property ‘length’
}
&#8220;&#8220;</p>

<h5 id="unqualified-identifiers-cant-be-deleted-in-strict-mode">Unqualified Identifiers Can’t Be Deleted in Strict Mode</h5>

<p>In sloppy mode, you can delete a global variable foo like this:</p>

<p><code>
delete foo
</code>
In strict mode, you get a syntax error whenever you try to delete unqualified identifiers. You can still delete global variables like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">delete</span> <span class="nb">window</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span> <span class="c1">// browsers</span>
</span><span class="line"><span class="k">delete</span> <span class="nx">global</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span> <span class="c1">// Node.js</span>
</span><span class="line"><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span> <span class="c1">// everywhere (in global scope)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### eval() Is Cleaner in Strict Mode
In strict mode, the eval() function becomes less quirky: variables declared in the eval‐ uated string are not added to the scope surrounding eval() anymore.
##### Features That Are Forbidden in Strict Mode
Two more JavaScript features are forbidden in strict mode:</p>

<ul>
  <li>The <code>with</code> statementisnotallowedanymore(see“ThewithStatement”onpage153). You get a syntax error at compile time (when loading the code).</li>
  <li>Nomoreoctalnumbers:insloppymode,anintegerwithaleadingzeroisinterpreted as octal (base 8). For example:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="mi">010</span> <span class="o">===</span> <span class="mi">8</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In strict mode, you get a syntax error if you use this kind of literal:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span> <span class="s1">&#39;use strict&#39;</span><span class="p">;</span> <span class="k">return</span> <span class="mi">010</span> <span class="p">}</span>
</span><span class="line"><span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">Octal</span> <span class="nx">literals</span> <span class="nx">are</span> <span class="nx">not</span> <span class="nx">allowed</span> <span class="k">in</span> <span class="nx">strict</span> <span class="nx">mode</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####　JavaScript’s Type System
##### Coercion
In JavaScript, the main way of dealing with a value whose type doesn’t fit is to coerce it to the correct type. Coercion means implicit type conversion. Most operands coerce:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;3&#39;</span> <span class="o">*</span> <span class="s1">&#39;4&#39;</span>
</span><span class="line"><span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Primitive Values Versus Objects
In contrast, all primitive values encoding the same value are considered the same:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">prim1</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">prim2</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">prim1</span> <span class="o">===</span> <span class="nx">prim2</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Primitives have the following characteristics:
* Compared by value</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">3</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;abc&#39;</span> <span class="o">===</span> <span class="s1">&#39;abc&#39;</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Always immutable</li>
</ul>

<p>Properties can’t be changed, added, or removed:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// try to change property `length`</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// ⇒ no effect 3</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// try to create property `foo` </span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">foo</span> <span class="c1">// ⇒ no effect, unknown property undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>A fixed set of types</li>
</ul>

<p>You can’t define your own primitive types.</p>

<h4 id="objects">Objects</h4>
<ul>
  <li>Mutable by default</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span> <span class="c1">// add property `foo` &gt; obj.foo</span>
</span><span class="line"><span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### undefined and null</p>

<ul>
  <li><code>undefined</code> means “<code>novalue</code>”(neitherprimitivenorobject).Uninitialized variables, missing parameters, and missing properties have that nonvalue. And functions <code>implicitly</code> return it if nothing has been explicitly returned.</li>
  <li><code>null</code> means “<code>no object</code>.” It is used as a nonvalue where an object is expected (as a parameter, as a member in a chain of objects, etc.).</li>
</ul>

<p>undefined and null are the only values for which any kind of property access results in an exception:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">returnFoo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">foo</span> <span class="p">}</span>
</span><span class="line"> <span class="o">&gt;</span> <span class="nx">returnFoo</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class="line"><span class="kc">undefined</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">returnFoo</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="kc">undefined</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> <span class="nx">returnFoo</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>
</span><span class="line"><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">property</span> <span class="s1">&#39;foo&#39;</span> <span class="nx">of</span> <span class="kc">null</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">returnFoo</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span>
</span><span class="line"><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">property</span> <span class="s1">&#39;foo&#39;</span> <span class="nx">of</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>undefined</code> is also sometimes used as more of a metavalue that indicates <code>nonexistence</code>. In contrast, <code>null</code> indicates <code>emptiness</code>.</p>

<p>For example, a JSON node visitor (see “Trans‐ forming Data via Node Visitors” on page 341) returns:</p>

<ul>
  <li>undefined to remove an object property or array element </li>
  <li>null to set the property or element to null</li>
</ul>

<h5 id="occurrences-of-undefined-and-null">Occurrences of undefined and null</h5>

<h6 id="occurrences-of-undefined">Occurrences of undefined</h6>
<ul>
  <li>Uninitialized variables are undefined:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">foo</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Missing parameters are undefined:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="p">}</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">f</span><span class="p">()</span>
</span><span class="line"><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>If you read a nonexistent property, you get undefined:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// empty object </span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span>
</span><span class="line"><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>And functions implicitly return undefined if nothing has been explicitly returned:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">f</span><span class="p">()</span>
</span><span class="line"><span class="kc">undefined</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">g</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">g</span><span class="p">()</span>
</span><span class="line"><span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>###### Occurrences of null</p>

<ul>
  <li>null is the last element in the prototype chain(a chain of objects;see“Layer2:The Prototype Relationship Between Objects” on page 211):</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
</span><span class="line"><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>null is returned byRegExp.prototype.exec()if there was no match for the regular expression in the string:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="sr">/x/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="s1">&#39;aaa&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####  Checking for undefined or null</p>

<h4 id="checking-for-null">Checking for null</h4>
<p>You check for null via strict equality:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Checking for undefined
Strict equality (===) is the canonical way of checking for undefined:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Checking for either undefined or null
Most functions allow you to indicate a missing value via either undefined or null. One way of checking for both of them is via an explicit comparison:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Does x have a value?</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">    <span class="c1">// Is x a non-value?</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">x</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Another way is to exploit the fact that both undefined and null are considered false</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Does x have a value (is it truthy)?</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// Is x falsy?</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>false, 0, NaN, and ‘’ are <code>also</code> considered false.</p>

<h4 id="changing-undefined">Changing undefined</h4>
<p>undefined is a property of the global object (and thus a global variable; see “The Global Object” on page 187). Under ECMAScript 3, you had to take precautions when reading undefined, because it was easy to accidentally change its value. Under ECMAScript 5, that is not necessary, because undefined is read-only.</p>

<p>To protect against a changed undefined, two techniques were popular (they are still relevant for older JavaScript engines):
* Technique 1</p>

<p>Shadow the global undefined (which may have the wrong value):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">...</span> <span class="c1">// safe now</span>
</span><span class="line"><span class="p">}());</span> <span class="c1">// don’t hand in a parameter</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>`
In the preceding code, undefined is guaranteed to have the right value, because it
is a parameter whose value has not been provided by the function call.</p>

<ul>
  <li>Technique 2</li>
</ul>

<p>Compare with void 0, which is always (the correct) undefined</p>

<p><code>
if (x === void 0) // always safe
</code></p>

<h4 id="wrapper-objects-for-primitives">Wrapper Objects for Primitives</h4>

<p>The three primitive types boolean, number, and string have corresponding constructors: Boolean, Number, String. Their instances (so-called wrapper objects) contain (wrap) primitive values. The constructors can be used in two ways:</p>

<ul>
  <li>Asconstructors,theycreateobjectsthatarelargelyincompatiblewiththeprimitive values that they wrap:</li>
</ul>

<p><code>
&gt; typeof new String('abc')
'object'
&gt; new String('abc') === 'abc'
false
</code>
* As functions,they convert values to the corresponding primitive types(see“Functions for Converting to Boolean, Number, String, and Object” on page 78). This is the recommended method of conversion:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nb">String</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;123&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>It’s considered a best practice to avoid wrapper objects. You normal‐ ly don’t need them, as there is nothing that objects can do that primitives can’t (with the exception of being mutated). </p>

<h4 id="wrapper-objects-are-different-from-primitives">Wrapper Objects Are Different from Primitives</h4>
<p>Primitive values such as ‘abc’ are fundamentally different from wrapper instances such as new String(‘abc’):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="k">typeof</span> <span class="s1">&#39;abc&#39;</span>  <span class="c1">// a primitive value</span>
</span><span class="line"><span class="s1">&#39;string&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">typeof</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>  <span class="c1">// an object</span>
</span><span class="line"><span class="s1">&#39;object&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;abc&#39;</span> <span class="k">instanceof</span> <span class="nb">String</span>  <span class="c1">// never true for primitives</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;abc&#39;</span> <span class="o">===</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Wrapper instances are objects, and there is no way of comparing objects in JavaScript, not even via lenient equals == (see “Equality Operators: === Versus ==” on page 83):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">);</span>
</span><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">);</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Wrapping and Unwrapping Primitives
There is one use case for wrapper objects: you want to add properties to a primitive value. Then you wrap the primitive and add properties to the wrapper object. You need to unwrap the value before you can work with it.</p>

<p>Wrap a primitive by invoking a wrapper constructor:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class="line"><span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class="line"><span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Unwrap a primitive by invoking the method <code>valueOf()</code>. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">valueOf</span><span class="p">()</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">123</span><span class="p">).</span><span class="nx">valueOf</span><span class="p">()</span>
</span><span class="line"><span class="mi">123</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">).</span><span class="nx">valueOf</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;abc&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Converting wrapper objects to primitives properly extracts numbers and strings, but not booleans:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nb">Boolean</span><span class="p">(</span><span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">false</span><span class="p">))</span>  <span class="c1">// does not unwrap</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Number</span><span class="p">(</span><span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">123</span><span class="p">))</span>  <span class="c1">// unwraps</span>
</span><span class="line"><span class="mi">123</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">String</span><span class="p">(</span><span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">))</span>  <span class="c1">// unwraps</span>
</span><span class="line"><span class="s1">&#39;abc&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Primitives Borrow Their Methods from Wrappers </p>

<p>Primitives don’t have their own methods and borrow them from wrappers:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;abc&#39;</span><span class="p">.</span><span class="nx">charAt</span> <span class="o">===</span> <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">charAt</span>
</span><span class="line"><span class="o">&gt;</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Sloppy mode and strict mode handle this borrowing differently. In sloppy mode, prim‐ itives are <code>converted to wrappers</code> on the fly:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sloppyMethod</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="k">this</span><span class="p">);</span> <span class="c1">// object </span>
</span><span class="line">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nb">String</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="s1">&#39;&#39;</span><span class="p">.</span><span class="nx">sloppyMethod</span><span class="p">();</span> <span class="c1">// call the above method</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In strict mode, methods from the wrapper prototype are used transparently:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">strictMethod</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class="line">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="k">this</span><span class="p">);</span> <span class="c1">// string</span>
</span><span class="line">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nb">String</span><span class="p">);</span> <span class="c1">// false };</span>
</span><span class="line">	<span class="s1">&#39;&#39;</span><span class="p">.</span><span class="nx">strictMethod</span><span class="p">();</span> <span class="c1">// call the above method</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Type Coercion</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;3&#39;</span> <span class="o">*</span> <span class="s1">&#39;4&#39;</span>
</span><span class="line"><span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>As another example, if one of the operands is a string, the plus operator (+) converts the other one to a string:</p>

<p><code>
&gt; 3 + ' times'
'3 times'
</code>
##### Type Coercion Can Hide Bugs</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">formData</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="s1">&#39;100&#39;</span> <span class="p">};</span>
</span><span class="line"><span class="c1">// You think formData.width is a number // and get unexpected results</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="nx">formData</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">outer</span> <span class="o">=</span> <span class="nx">w</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span>
</span><span class="line"><span class="c1">// You expect outer to be 120, but it’s not console.log(outer === 120); // false console.log(outer === &#39;10020&#39;); // true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In cases such as the preceding one, you should convert to the appropriate type early on:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">formData</span><span class="p">.</span><span class="nx">width</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Functions for Converting to Boolean, Number, String, and Object
The following functions are the preferred way of converting a value to a boolean, num‐ ber, string, or object:</p>

<ul>
  <li>Boolean()
Converts a value to a boolean. The following values are converted to false; they are the so-called “falsy” values:</li>
</ul>

<p>undefined,null,false ,0,NaN, ‘’</p>

<p>*　Number() </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="err">•</span> <span class="kc">undefined</span> <span class="nx">becomes</span> <span class="kc">NaN</span><span class="p">.</span>
</span><span class="line"><span class="err">•</span> <span class="kc">null</span> <span class="nx">becomes</span> <span class="mi">0</span><span class="p">.</span>
</span><span class="line"><span class="err">•</span> <span class="kc">false</span> <span class="nx">becomes</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">true</span> <span class="nx">becomes</span> <span class="mi">1</span><span class="p">.</span>
</span><span class="line"><span class="err">•</span> <span class="nx">Strings</span> <span class="nx">are</span> <span class="nx">parsed</span><span class="p">.</span>
</span><span class="line"><span class="err">•</span> <span class="nx">Objects</span> <span class="nx">are</span> <span class="nx">first</span> <span class="nx">converted</span> <span class="nx">to</span> <span class="nx">primitives</span> <span class="p">(</span><span class="nx">discussed</span> <span class="nx">shortly</span><span class="p">),</span> <span class="nx">which</span> <span class="nx">are</span> <span class="nx">then</span> <span class="nx">converted</span> <span class="nx">to</span> <span class="nx">numbers</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>String()
Converts a value to a string. It has the obvious results for all primitives. For example:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nb">String</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;null&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">String</span><span class="p">(</span><span class="mf">123.45</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;123.45&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">String</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;false&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Objects are first converted to primitives (discussed shortly), which are then con‐ verted to strings.</p>

<p>*　Object()
Converts objects to themselves, undefined and null to empty objects, and primi‐ tives to wrapped primitives. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="mi">123</span> <span class="p">};</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Object</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nx">obj</span> <span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Object</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span>
</span><span class="line"><span class="p">{}</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Object</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span> <span class="k">instanceof</span> <span class="nb">String</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Algorithm: ToPrimitive()—Converting a Value to a Primitive
To convert a value to either a number or a string, it is first converted to an arbitrary primitive value, which is then converted to the final type</p>

<p>The ECMAScript specification has an internal function, ToPrimitive() (which is not accessible from JavaScript), that performs this conversion. Understanding ToPrimi tive() enables you to configure how objects are converted to numbers and strings. It has the following signature:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">ToPrimitive</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">PreferredType</span><span class="o">?</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The optional parameter PreferredType indicates the final type of the conversion: it is either Number or String, depending on whether the result of ToPrimitive() will be converted to a number or a string.</p>

<p>If PreferredType is Number, then you perform the following steps:</p>

<ol>
  <li>If input is primitive, return it (there is nothing more to do).</li>
  <li>Otherwise, input is an object. Call input.valueOf(). If the result is primitive, return it.</li>
  <li>Otherwise, call input.toString(). If the result is primitive, return it.</li>
  <li>Otherwise, throw a TypeError (indicating the failure to convert input to a
primitive).</li>
</ol>

<p>If PreferredType is String, steps 2 and 3 are swapped. The PreferredType can also be omitted; it is then considered to be String for dates and Number for all other values. This is how the operators + and == call ToPrimitive().</p>

<h5 id="examples-toprimitive-in-action">Examples: ToPrimitive() in action</h5>

<p>The default implementation of valueOf() returns this, while the default implementa‐ tion of toString() returns type information:</p>

<p>&#8220;`
&gt; var empty = {};
&gt; empty.valueOf() === empty </p>

<p>true
&gt; empty.toString()
‘[object Object]’
&#8220;`</p>

<p>Therefore, Number() skips valueOf() and converts the result of toString() to a num‐ ber; that is, it converts ‘[object Object]’ to NaN:</p>

<p><code>
&gt; Number({})
NaN
</code></p>

<p>The following object customizes valueOf(), which influences Number(), but doesn’t change anything for String():</p>

<p>&#8220;`
&gt; var n = { valueOf: function () { return 123 } }; &gt; Number(n)
123
&gt; String(n)
‘[object Object]’</p>

<p>&#8220;`</p>

<p>The following object customizes toString(). Because the result can be converted to a number, Number() can return a number:</p>

<p><code>
&gt; var s = { toString: function () { return '7'; } }; 
&gt; String(s)
'7'
&gt; Number(s)
7
</code></p>

<h3 id="operators">Operators</h3>
<p>#### Operators and Objects
One example where that is unfortunate is the plus operator, which many languages use for array concatenation. That’s not so with JavaScript, however, where this operator converts arrays to strings and appends them:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="s1">&#39;1,23&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">String</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class="line"><span class="s1">&#39;1,2&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">String</span><span class="p">([</span><span class="mi">3</span><span class="p">])</span>
</span><span class="line"><span class="s1">&#39;3&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Equality Operators: === Versus ==
JavaScript has two ways of determining whether two values are equal:</p>

<ul>
  <li>Strict equality (===) and strict inequality (!==) consider only values that have the same type to be equal.</li>
  <li>Normal (or “lenient”) equality (==) and inequality (!=) try to convert values of different types before comparing them as with strict (in)equality.</li>
</ul>

<h4 id="strict-equality--">Strict Equality (===, !==)</h4>
<p>Values with different types are never strictly equal. If both values have the same type, then the following assertions hold:</p>

<ul>
  <li>undefined === undefined</li>
  <li>null === null</li>
  <li>Two numbers:</li>
</ul>

<p>&#8220;`
x === x // unless x is NaN
+0 === -0
NaN !== NaN // read explanation that follows</p>

<p>&#8220;`</p>

<ul>
  <li>
    <p>Two booleans, two strings: obvious results</p>
  </li>
  <li>
    <p>Two objects (including arrays and functions): x === y if and only if x and y are the <code>same</code> object; that is, if you want to compare different objects, you have to implement your own comparison algorithm:</p>
  </li>
</ul>

<p><code>
&gt; var b = {}, c = {}; 
&gt; b === c
false
&gt; b === b
true
</code></p>

<ul>
  <li>Everything else: not strictly equal.</li>
</ul>

<h4 id="pitfall-nan">Pitfall: NaN</h4>

<p>The special number value NaN (see “NaN” on page 106) is not equal to itself:</p>

<p><code>
&gt; NaN === NaN
false
</code>
Thus, you need to use other means to check for it, which are described in “Pitfall: checking whether a value is NaN” on page 107.
#### Strict inequality (!==)
#### Normal (Lenient) Equality (==, !=)
The algorithm for comparing via normal equality works as follows. If both operands have the same type (one of the six specification types—Undefined, Null, Boolean, Num‐ ber, String, and Object), then compare them via strict equality.</p>

<p>Otherwise, if the operands are:</p>

<ol>
  <li>
    <p>undefined and null, then they are considered leniently equal:</p>

    <p><code>
  &gt; undefined == null
 true
</code></p>
  </li>
  <li>A string and a number, then convert the string to a number and compare both operands via strict equality.</li>
  <li>A boolean and a nonboolean, then convert the boolean to a number and compare leniently (again).</li>
  <li>An object and a number or a string, then try to convert the object to a primitive (via the algorithm described in “Algorithm: ToPrimitive()—Converting a Value to a Primitive” on page 79) and compare leniently (again).</li>
</ol>

<h4 id="pitfall-lenient-equality-is-different-from-conversion-to-boolean">Pitfall: lenient equality is different from conversion to boolean</h4>

<p><code>
&gt; 2 == true
false
&gt; 2 == false
false
&gt; 1 == true
true
&gt; 0 == false
true
// 2 === 1
// 2 === 0
// 1 === 1
// 0 === 0
</code>
Similarly, while the empty string is equal to false, not all nonempty strings are equal to true:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;&#39;</span> <span class="o">==</span> <span class="kc">false</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;1&#39;</span> <span class="o">==</span> <span class="kc">true</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;2&#39;</span> <span class="o">==</span> <span class="kc">true</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="c1">// 0 === 0</span>
</span><span class="line"><span class="c1">// 1 === 1</span>
</span><span class="line"><span class="c1">// 2 === 1</span>
</span><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;abc&#39;</span> <span class="o">==</span> <span class="kc">true</span>  <span class="c1">// NaN === 1</span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Pitfall: lenient equality and strings
Some of the leniency can be useful, depending on what you want:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="s1">&#39;abc&#39;</span> <span class="o">==</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>  <span class="c1">// &#39;abc&#39; == &#39;abc&#39;</span>
</span><span class="line"><span class="kc">true</span>
</span><span class="line"><span class="o">&gt;</span> <span class="s1">&#39;123&#39;</span> <span class="o">==</span> <span class="mi">123</span>  <span class="c1">// 123 === 123</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Other cases are problematic, due to how JavaScript converts strings to numbers (see “Converting to Number” on page 104):</p>

<p><code>
&gt; '\n\t123\r ' == 123  // usually not OK
true
&gt; '' == 0  // 0 === 0
true
</code></p>

<h4 id="pitfall-lenient-equality-and-objects">Pitfall: lenient equality and objects</h4>

<p>If you compare an object to a nonobject, it is converted to a primitive, which leads to strange results:</p>

<p><code>
 &gt; {} == '[object Object]'
true
&gt; ['123'] == 123
true
&gt; [] == 0
true
</code>
However, two objects are only equal if they are they same object. That means that you can’t really compare two wrapper objects:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="o">===</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span> <span class="o">===</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### There Are No Valid Use Cases for ==</p>

<ul>
  <li>Use case: checking for undefined or null
The following comparison ensures that x is neither undefined nor null:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>replace the above with </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If you want to be more precise, you should perform an explicit check for both values:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Use case: working with numbers in strings
If you are not sure whether a value x is a number or a number-as-a-string, you can use checks such as the following:</li>
</ul>

<p><code>
if (x == 123) ...
</code>
The preceding checks whether x is either 123 or ‘123’. Again, this is very compact, and
again, it is better to be explicit:</p>

<p><code>
if (Number(x) === 123) ...
</code></p>

<h4 id="use-case-comparing-wrapper-instances-with-primitives">Use case: comparing wrapper instances with primitives</h4>

<p>Lenient equals lets you compare primitives with wrapped primitives:</p>

<p><code>
&gt; 'abc' == new String('abc')
true
</code>
There are three reasons against this approach. First, lenient equality does not work between wrapped primitives:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Second, you should avoid wrappers anyway. Third, if you do use them, it is better to be explicit:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">wrapped</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;abc&#39;</span><span class="p">)</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### What is void used for?
Under ECMAScript 5, void is rarely useful. Its main use cases are:</p>

<ul>
  <li>void 0 as a synonym for undefined</li>
</ul>

<p>The latter can be changed, while the former will always have the correct value. However, undefined is reasonably safe from being changed under ECMAScript 5, which makes this use case less important</p>

<ul>
  <li>Discarding the result of an expression
In some situations, it is important to return undefined as opposed to the result of an expression. Then void can be used to discard that result. One such situation involves javascript: URLs, which should be avoided for links, but are useful for bookmarklets. When you visit one of those URLs, many browsers replace the cur‐ rent document with the result of evaluating the URL’s “content,” but only if the result isn’t undefined. Hence, if you want to open a new window without changing the currently displayed content, you can do the following:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">javascript</span><span class="o">:</span><span class="k">void</span> <span class="nb">window</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;http://example.com/&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Prefixing an IIFE
An IIFE must be parsed as an expression. One of several ways to ensure that is by prefixing it with void (see “IIFE Variation: Prefix Operators” on page 184).2</li>
</ul>

<h4 id="categorizing-values-via-typeof-and-instanceof">Categorizing Values via typeof and instanceof</h4>
<p>If you want to categorize a value, you unfortunately have to distinguish between prim‐ itives and objects (refer back to Chapter 8) in JavaScript:</p>

<ul>
  <li>The typeof operator distinguishes primitives from objects and determines the types of primitives.</li>
  <li>The instanceof operator determines whether an object is an instance of a given constructor. </li>
</ul>

<h5 id="typeof-categorizing-primitives">typeof: Categorizing Primitives</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="k">typeof</span> <span class="kc">undefined</span>
</span><span class="line"><span class="s1">&#39;undefined&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">typeof</span> <span class="s1">&#39;abc&#39;</span>
</span><span class="line"><span class="s1">&#39;string&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">typeof</span> <span class="p">{}</span>
</span><span class="line"><span class="s1">&#39;object&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="k">typeof</span> <span class="p">[]</span>
</span><span class="line"><span class="s1">&#39;object&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Pitfall: typeof null
Unfortunately,typeof nullis’object’.Thisisconsideredabug(nullisnotamember of the internal type Object), but it can’t be fixed, because doing so would break existing code. You thus have to be wary of null</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">isObject</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="p">(</span><span class="nx">value</span> <span class="o">!==</span> <span class="kc">null</span>
</span><span class="line">	<span class="o">&amp;&amp;</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span>
</span><span class="line">	<span class="o">||</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> <span class="nx">isObject</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">isObject</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>
</span><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">isObject</span><span class="p">({})</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Checking whether a variable exists</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">typeof</span> <span class="nx">x</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>It determines whether x is undefined.</li>
  <li>It determines whether the variable x exists.</li>
</ol>

<h4 id="manually-converting-to-boolean">Manually Converting to Boolean</h4>

<p>Manually Converting to Boolean</p>

<ul>
  <li>Boolean(value) (Invoked as a function, not as a constructor)
value ? true : false</li>
  <li>!!value </li>
  <li>A single “not” converts to negated boolean; use twice for the nonnegated conversion.</li>
</ul>

<p>I prefer Boolean(), because it is more descriptive. </p>

<h5 id="pattern-providing-a-default-value">Pattern: providing a default value</h5>

<p>Sometimes there are situations where a value (a parameter, the result of a function, etc.) can be either a nonvalue (undefined, null) or an actual value. If you want to provide a default value for the former case, you can use the Or operator:</p>

<pre><code>theValue || defaultValue
</code></pre>

<p>The preceding expression evaluates to theValue if it is truthy and to defaultValue 
otherwise. The usual caveat applies: defaultValue will also be returned if theValue has a falsy value other than undefined and null. Let’s look at three examples of using that pattern.</p>

<ul>
  <li>Example 1: a default for a parameter
The parameter text of the function saveText() is optional and should be the empty string if it has been omitted:</li>
</ul>

<p><code>
function saveText(text) { 
	text = text || ''; ...
}
</code></p>

<table>
  <tbody>
    <tr>
      <td>This is the most common use of</td>
      <td> </td>
      <td>as a default operator. Consult “Optional Parame‐ ters” on page 173 for more on optional parameters.</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>Example 2: a default for a property</li>
</ul>

<p>The object options may or may not have the property title. If it is missing, the value ‘Untitled’ should be used when setting the title:</p>

<pre><code>setTitle(options.title || 'Untitled');
</code></pre>

<ul>
  <li>Example 3: a default for the result of a function</li>
</ul>

<p>The function countOccurrences counts how often regex matches inside str:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">countOccurrences</span><span class="p">(</span><span class="nx">regex</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// Omitted: check that /g is set for `regex` </span>
</span><span class="line">	<span class="k">return</span> <span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">regex</span><span class="p">)</span> <span class="o">||</span> <span class="p">[]).</span><span class="nx">length</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Numbers
JavaScript has a single type for all numbers: it treats all of them as floating-point num‐ bers. However, the dot is not displayed if there are no digits after the decimal point:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line">	<span class="o">&gt;</span> <span class="mf">5.000</span>
</span><span class="line">	<span class="mi">5</span>
</span><span class="line">	
</span><span class="line">	<span class="o">&gt;</span> <span class="nb">Number</span><span class="p">(</span><span class="s1">&#39;\t\v\r12.34\n &#39;</span><span class="p">)</span>  <span class="c1">// ignores leading and trailing whitespace</span>
</span><span class="line">	<span class="mf">12.34</span>
</span><span class="line"><span class="err">```</span>
</span><span class="line">
</span><span class="line"><span class="err">#####</span> <span class="nb">parseFloat</span><span class="p">()</span>
</span><span class="line"><span class="o">*</span>  <span class="nx">Applying</span> <span class="nb">parseFloat</span><span class="p">()</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">nonstring</span> <span class="nx">is</span> <span class="nx">less</span> <span class="nx">efficient</span><span class="p">,</span> <span class="nx">because</span> <span class="nx">it</span> <span class="nx">coerces</span> <span class="nx">its</span> <span class="nx">argu</span><span class="err">‐</span> <span class="nx">ment</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">string</span> <span class="nx">before</span> <span class="nx">parsing</span> <span class="nx">it</span><span class="p">.</span> <span class="nx">As</span> <span class="nx">a</span> <span class="nx">consequence</span><span class="p">,</span> <span class="nx">many</span> <span class="nx">values</span> <span class="nx">that</span> <span class="nb">Number</span><span class="p">()</span> <span class="nx">converts</span> <span class="nx">to</span> <span class="nx">actual</span> <span class="nx">numbers</span> <span class="nx">are</span> <span class="nx">converted</span> <span class="nx">to</span> <span class="kc">NaN</span> <span class="nx">by</span> <span class="nb">parseFloat</span><span class="p">()</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<blockquote>
  <p>parseFloat(true)  // same as parseFloat(‘true’)
NaN
Number(true)
1
parseFloat(null)  // same as parseFloat(‘null’)
NaN
Number(null)
0
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span></figure></notextile></p>
</blockquote>
<p>&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="o">*</span> <span class="nb">parseFloat</span><span class="p">()</span> <span class="nx">parses</span> <span class="nx">the</span> <span class="nx">empty</span> <span class="nx">string</span> <span class="nx">as</span> <span class="kc">NaN</span><span class="o">:</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;
&gt; parseFloat(‘’)
NaN
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="o">*</span>  <span class="nb">parseFloat</span><span class="p">()</span><span class="nx">ignoresleadingwhitespaceandstopsbeforeillegalcharacters</span><span class="p">(</span><span class="nx">which</span> <span class="nx">include</span> <span class="nx">whitespace</span><span class="p">)</span><span class="o">:</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
 &gt; parseFloat(‘\t\v\r12.34\n ‘)
12.34
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="err">####</span> <span class="nx">Special</span> <span class="nb">Number</span> <span class="nx">Values</span>
</span><span class="line"><span class="nx">JavaScript</span> <span class="nx">has</span> <span class="nx">several</span> <span class="nx">special</span> <span class="nx">number</span> <span class="nx">values</span><span class="o">:</span>
</span><span class="line">
</span><span class="line"><span class="o">*</span> <span class="nx">Two</span> <span class="nx">error</span> <span class="nx">values</span><span class="p">,</span> <span class="kc">NaN</span> <span class="nx">and</span> <span class="kc">Infinity</span><span class="p">.</span>
</span><span class="line"><span class="o">*</span> <span class="nx">Two</span> <span class="nx">values</span> <span class="k">for</span> <span class="nx">zero</span><span class="p">,</span> <span class="o">+</span><span class="mi">0</span> <span class="nx">and</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span> <span class="nx">JavaScript</span> <span class="nx">has</span> <span class="nx">two</span> <span class="nx">zeros</span><span class="p">,</span> <span class="nx">a</span> <span class="nx">positive</span> <span class="nx">zero</span> <span class="nx">and</span> <span class="nx">a</span> <span class="nx">negative</span> <span class="nx">zero</span><span class="p">,</span> <span class="nx">because</span> <span class="nx">the</span> <span class="nx">sign</span> <span class="nx">and</span> <span class="nx">the</span> <span class="nx">magnitude</span> <span class="nx">of</span> <span class="nx">a</span> <span class="nx">number</span> <span class="nx">are</span> <span class="nx">stored</span> <span class="nx">separately</span><span class="p">.</span> <span class="nx">In</span> <span class="nx">most</span> <span class="nx">of</span> <span class="k">this</span> <span class="nx">book</span><span class="p">,</span> <span class="nx">I</span> <span class="nx">pretend</span> <span class="nx">that</span> <span class="nx">there</span> <span class="nx">is</span> <span class="nx">only</span> <span class="nx">a</span> <span class="nx">single</span> <span class="nx">zero</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">you</span> <span class="nx">almost</span> <span class="nx">never</span> <span class="nx">see</span> <span class="k">in</span> <span class="nx">JavaScript</span> <span class="nx">that</span> <span class="nx">there</span> <span class="nx">are</span> <span class="nx">two</span> <span class="nx">of</span> <span class="nx">them</span><span class="p">.</span>
</span><span class="line">
</span><span class="line"><span class="err">####</span> <span class="nx">Pitfall</span><span class="o">:</span> <span class="nx">checking</span> <span class="nx">whether</span> <span class="nx">a</span> <span class="nx">value</span> <span class="nx">is</span> <span class="kc">NaN</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
&gt; isNaN(NaN)
true
&gt; isNaN(33)
false
&#8220;`
However, isNaN does not work properly with nonnumbers, because it first converts those to numbers. That conversion can produce NaN and then the function incorrectly returns true:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nb">isNaN</span><span class="p">(</span><span class="s1">&#39;xyz&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Thus, it is best to combine isNaN with a type check:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">myIsNaN</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;number&#39;</span> <span class="o">&amp;&amp;</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Alternatively, you can check whether the value is unequal to itself (as NaN is the only value with this trait). But that is less self-explanatory:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">myIsNaN</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">value</span> <span class="o">!==</span> <span class="nx">value</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Infinity
Infinity is an error value indicating one of two problems: a number can’t be represented because its magnitude is too large, or a division by zero has happened.</p>

<p>The exponent must be between (and excluding) −1023 and 1024. If the exponent is too small, the number becomes 0. If the exponent is too large, it becomes Infinity. 21023 can still be represented, but pow(2, 1024) can’t:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1023</span><span class="p">)</span>
</span><span class="line"><span class="mf">8.98846567431158</span><span class="nx">e</span><span class="o">+</span><span class="mi">307</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class="line"><span class="kc">Infinity</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Error: division by zero</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span><span class="mi">3</span><span class="o">/</span> <span class="mi">0</span>
</span><span class="line"><span class="kc">Infinity</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">3</span> <span class="o">/</span> <span class="o">-</span><span class="mi">0</span>
</span><span class="line"><span class="o">-</span><span class="kc">Infinity</span>
</span><span class="line"><span class="err">```</span>
</span><span class="line"><span class="err">#####</span> <span class="nx">Computing</span> <span class="kd">with</span> <span class="kc">Infinity</span>
</span><span class="line"><span class="nx">You</span> <span class="nx">get</span> <span class="nx">the</span> <span class="nx">error</span> <span class="nx">result</span> <span class="kc">NaN</span> <span class="k">if</span> <span class="nx">you</span> <span class="k">try</span> <span class="nx">to</span> <span class="err">“</span><span class="nx">neutralize</span><span class="err">”</span> <span class="nx">one</span> <span class="kc">Infinity</span> <span class="kd">with</span> <span class="nx">another</span> <span class="nx">one</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<blockquote>
  <p>Infinity - Infinity
NaN
Infinity / Infinity
NaN
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span></figure></notextile></p>
</blockquote>
<p>&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="err">#####</span> <span class="nx">Checking</span> <span class="k">for</span> <span class="kc">Infinity</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;javascript
&gt; var x = Infinity; 
&gt; x === Infinity true</p>

<blockquote>
  <p>isFinite(5)
true
isFinite(Infinity)
isFinite(NaN)
false
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span></figure></notextile></p>
</blockquote>
<p>&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="nx">compare</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;
var EPSILON = Math.pow(2, -53); 
function epsEqu(x, y) {
	return Math.abs(x - y) &lt; EPSILON; 
}
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="err">####</span> <span class="nx">Ranges</span> <span class="nx">of</span> <span class="nx">Integers</span>
</span><span class="line"><span class="o">*</span> <span class="nx">Safeintegers</span><span class="p">,</span> <span class="nx">thelargestpracticallyusablerangeof</span> <span class="nx">integers</span> <span class="nx">that</span> <span class="nx">JavaScript</span> <span class="nx">supports</span><span class="o">:</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
— 53 bits plus a sign, range (−253, 253)
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="o">*</span> <span class="nb">Array</span> <span class="nx">indices</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
— 32 bits, unsigned
— Maximum length: 232−1
— Range of indices: [0, 232−1) (excluding the maximum length!)
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="o">*</span> <span class="nx">Bitwise</span> <span class="nx">operands</span>
</span><span class="line">
</span><span class="line"><span class="err">—</span> <span class="nx">Unsigned</span> <span class="nx">right</span> <span class="nx">shift</span> <span class="nx">operator</span> <span class="p">(</span><span class="o">&gt;&gt;&gt;</span><span class="p">)</span><span class="o">:</span> <span class="mi">32</span> <span class="nx">bits</span><span class="p">,</span> <span class="nx">unsigned</span><span class="p">,</span> <span class="nx">range</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">232</span><span class="p">)</span>
</span><span class="line"><span class="err">—</span> <span class="nx">All</span> <span class="nx">other</span> <span class="nx">bitwise</span> <span class="nx">operators</span><span class="o">:</span> <span class="mi">32</span> <span class="nx">bits</span><span class="p">,</span> <span class="nx">including</span> <span class="nx">a</span> <span class="nx">sign</span><span class="p">,</span> <span class="nx">range</span> <span class="p">[</span><span class="err">−</span><span class="mi">231</span><span class="p">,</span> <span class="mi">231</span><span class="p">)</span>
</span><span class="line"><span class="err">####</span> <span class="nx">Definitions</span> <span class="k">in</span> <span class="nx">ECMAScript</span> <span class="mi">6</span>
</span><span class="line"><span class="nx">ECMAScript</span> <span class="mi">6</span> <span class="nx">will</span> <span class="nx">provide</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">constants</span><span class="o">:</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
Number.MAX_SAFE_INTEGER = Math.pow(2, 53)-1;
Number.MIN_SAFE_INTEGER = -Number.MAX_SAFE_INTEGER;
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="nx">It</span> <span class="nx">will</span> <span class="nx">also</span> <span class="nx">provide</span> <span class="nx">a</span> <span class="kd">function</span> <span class="k">for</span> <span class="nx">determining</span> <span class="nx">whether</span> <span class="nx">an</span> <span class="nx">integer</span> <span class="nx">is</span> <span class="nx">safe</span><span class="o">:</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
Number.isSafeInteger = function (n) { 
		return (typeof n === ‘number’ &amp;&amp;
            Math.round(n) === n &amp;&amp;
            Number.MIN_SAFE_INTEGER &lt;= n &amp;&amp;
            n &lt;= Number.MAX_SAFE_INTEGER);
}
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="err">####</span> <span class="nx">Converting</span> <span class="nx">to</span> <span class="nx">Integer</span>
</span><span class="line"><span class="nx">In</span> <span class="nx">JavaScript</span><span class="p">,</span> <span class="nx">all</span> <span class="nx">numbers</span> <span class="nx">are</span> <span class="nx">floating</span> <span class="nx">point</span><span class="p">.</span> <span class="nx">Integers</span> <span class="nx">are</span> <span class="nx">floating</span><span class="o">-</span><span class="nx">point</span> <span class="nx">numbers</span> <span class="nx">without</span> <span class="nx">a</span> <span class="nx">fraction</span><span class="p">.</span> <span class="nx">Converting</span> <span class="nx">a</span> <span class="nx">number</span> <span class="nx">n</span> <span class="nx">to</span> <span class="nx">an</span> <span class="nx">integer</span> <span class="nx">means</span> <span class="nx">finding</span> <span class="nx">the</span> <span class="nx">integer</span> <span class="nx">that</span> <span class="nx">is</span> <span class="err">“`</span><span class="nx">closest</span><span class="err">`”</span> <span class="nx">to</span> <span class="nx">n</span>
</span><span class="line">
</span><span class="line"><span class="nx">use</span> <span class="nx">TheMathfunctionsMath</span><span class="p">.</span><span class="nx">floor</span><span class="p">(),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(),</span><span class="nx">andMath</span><span class="p">.</span><span class="nx">round</span><span class="p">()</span>
</span><span class="line"><span class="err">####</span> <span class="mi">32</span><span class="o">-</span><span class="nx">bit</span> <span class="nx">Integers</span> <span class="nx">via</span> <span class="nx">Bitwise</span> <span class="nx">Operators</span>
</span><span class="line"><span class="nx">Binary</span> <span class="nx">bitwise</span> <span class="nx">operators</span> <span class="p">(</span><span class="nx">see</span> <span class="err">“</span><span class="nx">Binary</span> <span class="nx">Bitwise</span> <span class="nx">Operators</span><span class="err">”</span> <span class="nx">on</span> <span class="nx">page</span> <span class="mi">126</span><span class="p">)</span> <span class="nx">convert</span> <span class="p">(</span><span class="nx">at</span> <span class="nx">least</span><span class="p">)</span> <span class="nx">one</span> <span class="nx">of</span> <span class="nx">their</span> <span class="nx">operands</span> <span class="nx">to</span> <span class="nx">a</span> <span class="mi">32</span><span class="o">-</span><span class="nx">bit</span> <span class="nx">integer</span> <span class="nx">that</span> <span class="nx">is</span> <span class="nx">then</span> <span class="nx">manipulated</span> <span class="nx">to</span> <span class="nx">produce</span> <span class="nx">a</span> <span class="nx">result</span> <span class="nx">that</span> <span class="nx">is</span> <span class="nx">also</span> <span class="nx">a</span> <span class="mi">32</span><span class="o">-</span><span class="nx">bit</span> <span class="nx">integer</span><span class="p">.</span> <span class="nx">Therefore</span><span class="p">,</span> <span class="k">if</span> <span class="nx">you</span> <span class="nx">choose</span> <span class="nx">the</span> <span class="nx">other</span> <span class="nx">operand</span> <span class="nx">appropriately</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">get</span> <span class="nx">a</span> <span class="nx">fast</span> <span class="nx">way</span> <span class="nx">to</span> <span class="nx">convert</span> <span class="nx">an</span> <span class="nx">arbitrary</span> <span class="nx">number</span> <span class="nx">to</span> <span class="nx">a</span> <span class="mi">32</span><span class="o">-</span><span class="nx">bit</span> <span class="nx">integer</span> <span class="p">(</span><span class="nx">that</span> <span class="nx">is</span> <span class="nx">either</span> <span class="nx">signed</span> <span class="nx">or</span> <span class="nx">unsigned</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="err">#####</span> <span class="nx">Bitwise</span> <span class="nx">Or</span> <span class="p">(</span><span class="o">|</span><span class="p">)</span>
</span><span class="line"><span class="nx">If</span> <span class="nx">the</span> <span class="nx">mask</span><span class="p">,</span> <span class="nx">the</span> <span class="nx">second</span> <span class="nx">operand</span><span class="p">,</span> <span class="nx">is</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">don</span><span class="err">’</span><span class="nx">t</span> <span class="nx">change</span> <span class="nx">any</span> <span class="nx">bits</span> <span class="nx">and</span> <span class="nx">the</span> <span class="nx">result</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">first</span> <span class="nx">operand</span><span class="p">,</span> <span class="nx">coerced</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">signed</span> <span class="mi">32</span><span class="o">-</span><span class="nx">bit</span> <span class="nx">integer</span><span class="p">.</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
 // Convert x to a signed 32-bit integer
function ToInt32(x) { 
	return x | 0;
}</p>

<blockquote>
  <p>ToInt32(1.001)
1
ToInt32(1.999)
1
ToInt32(1)
1</p>
</blockquote>

<blockquote>
  <p>ToInt32(-1)
-1
ToInt32(Math.pow(2, 32)+1)
1
ToInt32(Math.pow(2, 32)-1)
-1
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span></figure></notextile></p>
</blockquote>
<p>&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="err">#####</span> <span class="nx">Shift</span> <span class="nx">operators</span>
</span><span class="line"><span class="nx">The</span> <span class="nx">same</span> <span class="nx">trick</span> <span class="nx">that</span> <span class="nx">worked</span> <span class="k">for</span> <span class="nx">bitwise</span> <span class="nx">Or</span> <span class="nx">also</span> <span class="nx">works</span> <span class="k">for</span> <span class="nx">shift</span> <span class="nx">operators</span><span class="o">:</span> <span class="k">if</span> <span class="nx">you</span> <span class="nx">shift</span> <span class="nx">by</span> <span class="nx">zero</span> <span class="nx">bits</span><span class="p">,</span> <span class="nx">the</span> <span class="nx">result</span> <span class="nx">of</span> <span class="nx">a</span> <span class="nx">shift</span> <span class="nx">operation</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">first</span> <span class="nx">operand</span><span class="p">,</span> <span class="nx">coerced</span> <span class="nx">to</span> <span class="nx">a</span> <span class="mi">32</span><span class="o">-</span><span class="nx">bit</span> <span class="nx">integer</span><span class="p">.</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;
 // Convert x to a signed 32-bit integer
function ToInt32(x) { return x « 0;
}
// Convert x to a signed 32-bit integer
function ToInt32(x) { return x » 0;
}
// Convert x to an unsigned 32-bit integer
function ToUint32(x) { return x »&gt; 0;
}
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">ToUint32</span><span class="p">()</span> <span class="k">in</span> <span class="nx">action</span><span class="o">:</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
 &gt; ToUint32(-1)
4294967295
&gt; ToUint32(Math.pow(2, 32)-1)
4294967295
&gt; ToUint32(Math.pow(2, 32))
0
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="err">#####</span> <span class="nx">The</span> <span class="nx">radix</span>
</span><span class="line"><span class="nb">parseInt</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">radix</span><span class="o">?</span><span class="p">)</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
 &gt; parseInt(‘0xA’)
10
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="nx">If</span> <span class="nx">radix</span> <span class="nx">is</span> <span class="nx">already</span> <span class="mi">16</span><span class="p">,</span> <span class="nx">then</span> <span class="nx">the</span> <span class="nx">hexadecimal</span> <span class="nx">prefix</span> <span class="nx">is</span> <span class="nx">optional</span><span class="o">:</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
&gt; parseInt(‘0xA’, 16)
10
&gt; parseInt(‘A’, 16)
10</p>

<blockquote>
  <p>parseInt(‘12.34’, 10)
12
parseInt(12.34, 10)
12
parseInt(‘110’, 2)
6
&#8220;`</p>
</blockquote>

<p>Don’t use parseInt() to convert a number to an integer. Here is an example where the conversion is incorrect:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nb">parseInt</span><span class="p">(</span><span class="mf">1000000000000000000000.5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>Explanation</code>
The argument is first converted to a string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="nb">String</span><span class="p">(</span><span class="mf">1000000000000000000000.5</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;1e+21&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>parseInt doesn’t consider “e” to be an integer digit and thus stops parsing after the 1.
parseInt() shouldn’t be used to convert numbers to integers: coercion to string is an unnecessary detour and even then, the result is not always correct.</p>

<ul>
  <li>num.toString(2)(see“Number.prototype.toString(radix?)”onpage129)converts the number num to a string in binary notation. For example:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="mi">6</span><span class="p">..</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;110&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Bitwise Shift Operators
JavaScript has three bitwise shift operators:</p>

<ul>
  <li>number « digitCount (left shift):</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;10&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>number » digitCount (signed right shift):</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;11111111111111111111111111111110&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;-1&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>number »&gt; digitCount</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;11100&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;1110&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Number Prototype Methods
* Number.prototype.toFixed(fractionDigits?)</p>

<p>Number.prototype.toFixed(fractionDigits?) returns an exponent-free representa‐ tion of the number, rounded to fractionDigits digits. If the parameter is omitted, the value 0 is used:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="mf">0.0000003</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;0.0000003000&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mf">0.0000003</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;3e-7&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If the number is greater than or equal to 1021, then this method works the same as toString(). You get a number in exponential notation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&gt;</span> <span class="mi">1234567890123456789012</span><span class="p">..</span><span class="nx">toFixed</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;1.2345678901234568e+21&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">1234567890123456789012</span><span class="p">..</span><span class="nx">toString</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;1.2345678901234568e+21&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Number.prototype.toPrecision(precision?)</li>
</ul>

<p>Number.prototype.toPrecision(precision?) prunes the mantissa to precision dig‐ its before using a conversion algorithm similar to toString(). If no precision is given, toString() is used directly:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="mi">1234</span><span class="p">..</span><span class="nx">toPrecision</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;1.23e+3&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">1234</span><span class="p">..</span><span class="nx">toPrecision</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;1234&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">1234</span><span class="p">..</span><span class="nx">toPrecision</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;1234.0&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mf">1.234</span><span class="p">.</span><span class="nx">toPrecision</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;1.23&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Number.prototype.toString(radix?)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">..</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;1111&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">65535</span><span class="p">..</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;ffff&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Number.prototype.toExponential(fractionDigits?)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"> <span class="o">&gt;</span> <span class="mi">1234567890123456789012</span><span class="p">..</span><span class="nx">toString</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;1.2345678901234568e+21&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">1234567890123456789012</span><span class="p">..</span><span class="nx">toExponential</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;1.23456789012345677414e+21&#39;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> <span class="mi">1234</span><span class="p">..</span><span class="nx">toString</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;1234&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">1234</span><span class="p">..</span><span class="nx">toExponential</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;1.23400e+3&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mi">1234</span><span class="p">..</span><span class="nx">toExponential</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;1.234e+3&#39;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"> <span class="o">&gt;</span> <span class="mf">0.003</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;0.003&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mf">0.003</span><span class="p">.</span><span class="nx">toExponential</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="s1">&#39;3.0000e-3&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="mf">0.003</span><span class="p">.</span><span class="nx">toExponential</span><span class="p">()</span>
</span><span class="line"><span class="s1">&#39;3e-3&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/10/build/"/>
    <updated>2014-10-10T09:20:02+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/10/build</id>
    <content type="html"><![CDATA[<h4 id="adding-non-mvc-folders-to-your-build-package">Adding Non-MVC Folders to Your Build Package</h4>
<p>For the FindACab app, I have added the utils folder to the app classpath in ./sencha/sencha.cfg:</p>

<pre><code>app.classpath=${app.dir}/app.js,${app.dir}/app,${app.dir}/utils
</code></pre>

<h4 id="adding-extra-resources-to-your-build-package">Adding Extra Resources to Your Build Package</h4>

<p>In other situations, you might want to include extra resources to your build package — for example, a folder with images or a folder with JSON data. There are two ways to include these in your build. I will explain both. First (the easy way, shown in Example 14-1), you can add the folder to the resources array in the <code>app.json</code> file. By default, Sencha Cmd already created a selection.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
	#Example 14-1. Additional resources that need to be copied during the build process
</span><span class="line">
</span><span class="line">"resources": [ 
</span><span class="line">	"resources/images", 
</span><span class="line">	"resources/css", 
</span><span class="line">	"resources/icons", 
</span><span class="line">	"resources/startup"
],

```
</span><span class="line">
`TIP`
</span><span class="line">
Additional JavaScripts or stylesheets can be entered into the `js` or `css` arrays.
</span><span class="line">
The other way of adding resources to your build is what I call the hardcore way, but it’s kinda cool so I want to mention it.
</span><span class="line">
Sencha Cmd has Apache Ant integration. You can modify the Ant build script build.xml totally to your own needs.
</span><span class="line">
See Example 14-2; this little Ant script copies a data folder from the application root to the production build folder. Isn’t it awesome?
</span><span class="line">
```
</span><span class="line">// Example 14-2. Copying a folder to a different location
</span><span class="line">&lt;target name="-after-build"/&gt; 
</span><span class="line">&lt;target name="build"
		depends="init,-before-build,-build,-after-build" 
		description="Builds the application"/&gt;
</span><span class="line">
		
&lt;copy todir="${build.dir}/data" overwrite="true"&gt; 
	&lt;fileset dir="${basedir}/data"&gt;
		&lt;include name="**/*" /&gt; 
	&lt;/fileset&gt;
&lt;/copy&gt;

```
</span><span class="line">In the next sections, you’ll learn how to:
</span><span class="line">
</span><span class="line">* Create a test build with Sencha Cmd
* Create a production build with Sencha Cmd
* Create a native build with Sencha Cmd and Adobe PhoneGap
</span><span class="line">
#### Creating a Test Build with Sencha Cmd
</span><span class="line">
With Sencha Cmd on the command line, you can generate a build package optimized for test environments. On the command line, navigate to the app folder and run the following:
</span><span class="line">
```
</span><span class="line">	sencha app build testing
```
</span><span class="line">
`NOTE`
</span><span class="line">
I’m often asked which tools are good for testing a Sencha Touch application. For UI testing, Siesta is a good tool; for syntax testing, you could use JS Lint; and for unit testing, Jasmine is a popular testing tool. For more information, check out this [great blog post](http://www.sencha.com/blog/automating-unit-tests), which contains all the links to the tools
</span><span class="line">
</span><span class="line">#### Creating a Production Build with Sencha Cmd
</span><span class="line">With Sencha Cmd on the command line, you can generate a build package optimized for production. On the command line, navigate to the app folder and run the following:
</span></code></pre></td></tr></table></div></figure></notextile></div>
<pre><code>sencha app build ```
</code></pre>

<h4 id="creating-a-native-build-with-sencha-cmd-and-adobe-phonegap">Creating a Native Build with Sencha Cmd and Adobe PhoneGap</h4>

<p>There are three products you can use to create a native app from a Sencha Touch code base:</p>

<ul>
  <li>Sencha Mobile Packager </li>
  <li>Adobe PhoneGap </li>
  <li>Apache Cordova</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Themes and Styles]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/09/themes-and-styles/"/>
    <updated>2014-10-09T18:40:26+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/09/themes-and-styles</id>
    <content type="html"><![CDATA[<p>Mobile web applications should either look and behave <code>exactly</code> the same as native apps, or they shouldn’t look like native at all</p>

<h4 id="sencha-touch-stylesheets">Sencha Touch Stylesheets</h4>
<p>In Sencha Touch version 2.3, the framework ships with stylesheets that mimic native designs and experiences of all modern major devices </p>

<p>When you create a production build of your app and you want to host it on the Web, it’s even possible to make use of the Sencha platform switcher. This switcher can make sure that the correct stylesheet will be shown for each platform. For example, the BB10 theme will be used when the platform is BlackBerry and show the Windows theme when the app is being viewed on Internet Explorer 10.</p>

<h4 id="using-sass">Using Sass</h4>

<p>Sass stands for “syntactically awesome style sheets,” a powerful CSS extension. And yes, it is awesome! I describe it as CSS infused with a lot of coffee and Red Bull, because it overcomes many of the shortcomings of CSS.</p>

<p>Sass is a preprocessor, which means that Sass files should be compiled to (minified) CSS files. A CSS file is the stylesheet your browser uses to display Sencha Touch components. (And that’s also the file that goes into your production build or server.) Therefore, Sass needs a compiler. You can compile Sencha Sass themes with Sass and Compass installed on top of Ruby (see Appendix A), but if you are not really into design, you can also use just the <code>Sencha Cmd build</code> process. A Sencha app build can compile Sass files too, but it just takes a little bit longer.</p>

<p>Sass has two syntaxes. </p>

<ul>
  <li>
    <p>The most commonly used syntax is known as <code>SCSS</code> (which stands for Sassy CSS), and is a superset of CSS3’s syntax. This means that every valid CSS3 stylesheet is valid SCSS as well. SCSS files use the extension <code>.scss</code>.</p>
  </li>
  <li>
    <p>The second, older syntax is known as the indented syntax (or just .sass). Instead of brackets and semicolons, it uses line indentation to specify blocks. Files in the indented syntax use the extension <code>.sass</code>.</p>
  </li>
</ul>

<p>The Sencha themes are <code>Sassy CSS files</code>. You can combine CSS3 syntax with the amazing features of Sass.</p>

<p>In this chapter, you’ll learn how to:</p>

<ul>
  <li>Use platform-specific out-of-the-box themes </li>
  <li>Create your own custom theme</li>
  <li>Incorporate custom fonts</li>
  <li>Incorporate custom icons</li>
  <li>Optimize your stylesheet for best performance</li>
</ul>

<p>Sencha Cmd 4 and higher have the command <code>sencha app watch</code>, You can compare this with the Compass command <code>compass watch</code>,. Sencha Cmd watches the app and every time you hit Save, Sencha Cmd builds your app and compiles your Sass stylesheets. When changes are detected, only the minimum amount of work necessary is performed to bring your app and its CSS up to date, saving you from rebuilding your Sass. It is so quick that when you navigate to your browser, the latest version is present
After writing your Sass theme, use the following command from the resources/sass folder to compile to app.css:</p>

<p><code>
sencha ant sass
</code>
<code>TIP</code>
There are some great resources on Sass and CSS at <a href="http://sass-lang.com/">the Sass website</a>. To learn more about Sass, see <a href="http://vimeo.com/75258560">The Sass Way. Learn Sass at Code School</a>, and check out “Unleash Your Inner Picasso: Advanced Theming by Platform,” an online video tutorial by Robert Dogan
#### Incorporating Custom Fonts
When you want to incorporate fonts in your theme, you can use <code>@font-face</code>. @font- face is a CSS technique that is often used to incorporate custom web fonts. Where system fonts will be visible only if they’re available on your OS, @font-face directly <code>downloads</code> the font from the Internet to display it</p>

<p><code>TIP</code></p>

<p>Read more about @font-face on <a href="http://www.paulirish.com/2010/font-face-gotchas/">Paul Irish’s blog</a> and download HTML5 @font-face kits from <a href="http://www.fontsquirrel.com/">Font
Squirrel</a> or at font ex. You can also use a font service like Adobe <a href="https://typekit.com/">Typekit</a> or <a href="http://www.google.com/fonts">Google Fonts</a>.</p>

<p>Check out the <a href="http://pictos.cc/font/">Pictos icon font</a>, the <a href="https://icomoon.io/">Ico Moon icon font</a>, and the Fontello icon font. There’s more information about icon fonts at <a href="http://css-tricks.com/html-for-icon-font-usage/">CSS-Tricks</a>, and you can use <a href="https://www.branah.com/unicode-converter">Branah’s tool</a> to convert text to unicodes and back.</p>

<h4 id="optimizing-your-stylesheet-for-best-performance">Optimizing Your Stylesheet for Best Performance</h4>

<ul>
  <li>Minify your stylesheet</li>
  <li>Import only the required mixins in your stylesheet </li>
  <li>Exclude experimental support for uncommon browsers </li>
  <li>Exclude unusable default fonts and icons</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[View Components]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/08/view-components/"/>
    <updated>2014-10-08T22:18:11+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/08/view-components</id>
    <content type="html"><![CDATA[<p>This chapter is all about view components. I will discuss how to implement messageboxes, lists, panels, toolbars, charts, and maps</p>

<p>In this chapter, you’ll learn how to implement:</p>

<ul>
  <li>A messagebox Toolbars and title bars Buttons</li>
  <li>Lists</li>
  <li>A Google Map</li>
  <li>Overlays Charts</li>
</ul>

<h4 id="implementing-a-messagebox">Implementing a Messagebox</h4>

<p>Unlike the standard JavaScript <code>alert</code> method, a messagebox in Sencha Touch is <code>asynchronous</code>. In standard JavaScript, the browser pauses execution until you press OK. In Sencha Touch, showing a messagebox will not cause the code to stop. For this reason, if you have code that should run only after some user feedback from the messagebox, you should use a callback function.</p>

<p>When you want to implement a messagebox, you will have to require Ext.MessageBox at the top of your view class. You don’t need to instantiate a messagebox (although you could); Ext.Msg is a global shared singleton instance of the Ext.MessageBox class that you can use in most cases:</p>

<p>The previous code describes the alert() method, which you can visually compare with the standard alert messagebox in JavaScript. See Figure 11-1.</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure11-1.png" /></p>

<p>It displays a small window, with a title, a message, and an OK button. In addition to the
alert, there are these types of messageboxes:</p>

<ul>
  <li>prompt(), shown in Figure 11-2, which is a messagebox with a title, message, a textfield, and Cancel and OK buttons</li>
  <li>confirm(), shown in Figure 11-3, which is a messagebox with a title, a message, and No and Yes buttons</li>
  <li>show(), which provides even more options.</li>
</ul>

<p>Here’s an example of the prompt() messagebox; the callback contains the button id and the entered value. The button id can be Yes, No, or Cancel (Cancel means close the messagebox without pressing the Yes and No buttons):</p>

<p><code>
Ext.Msg.prompt('Welcome', 'Please enter your name', function(btn, val) { //callback
    console.log(btn, val);
});
</code></p>

<p>There is one more messagebox method that is worth mentioning: show().The show() method will give you many more options; you can pass in a config object. Here I set up
a customized prompt() messagebox. It has a width of 500 pixels, it accepts multiline input, it has an info icon, and I want to specify my own set of buttons. Also, I will define a callback function:</p>

<p><code>
var myPromptBox = Ext.Msg.show({
    title: 'Address',
    message: 'Please enter your address:',
    width: 500,
    buttons: Ext.MessageBox.YESNOCANCEL,
    iconCls: Ext.MessageBox.QUESTION,
    multiLine: true,
    prompt: {
        maxlength: 180,
        autocapitalize: true
    },
    fn: function(buttonId) {
        alert('You pressed the "' + buttonId + '" button.');
    }
});
</code>
The iconCls can set an icon CSS class on the messagebox to showcase an icon. You can maintain this in your theme, but out of the box Sencha Touch ships with the following messagebox icons:</p>

<ul>
  <li>Ext.MessageBox.ERROR (a round error sign) </li>
  <li>Ext.MessageBox.INFO (a round info sign) </li>
  <li>Ext.MessageBox.QUESTION (a question mark) </li>
  <li>Ext.MessageBox.WARNING (a warning sign)</li>
</ul>

<p>The following sets of buttons are available in Sencha Touch:</p>

<ul>
  <li>Ext.MessageBox.OK (OK button with action UI skin)</li>
  <li>Ext.MessageBox.YES (Yes button with action UI skin)</li>
  <li>Ext.MessageBox.NO (No button)</li>
  <li>Ext.MessageBox.CANCEL (Cancel button)</li>
  <li>Ext.MessageBox.YESNOCANCEL (Cancel button, No button, and Yes button with action UI skin)</li>
  <li>Ext.MessageBox.OKCANCEL (Cancel button, and OK button with action UI skin) * Ext.MessageBox.YESNO (No button, and Yes button with action UI skin)</li>
</ul>

<p>If these button sets are in the wrong order, or you would like to specify your own button text and UI skins, you can pass in an array with Ext.Buttons into the buttons config, as you can see in Figure 11-4:</p>

<p><code>
var pirateBox = Ext.Msg.show({
    title: 'Ahoy!',
    message: 'Stop pirate, would ye like t\' proceed?',
    iconCls: Ext.MessageBox.ERROR,
    width: 200,
    buttons: [{
        text: 'Aye',
        itemId: 'yes',
        ui: 'action'
    }, {
        text: 'Avast',
        itemId: 'no',
        ui: 'decline'
    }],
    fn: function(buttonId) {
        alert('You pressed the "' + buttonId + '" button.');
    }
});
</code>
<img src="http://xiekunRonaldo.github.io/images/2014/10/figure11-4.png" /></p>

<p>To hide the previous messagebox, just run the hide() method on the pirateBox.</p>

<h4 id="implementing-toolbars-and-title-bars">Implementing Toolbars and Title Bars</h4>
<p>When you want to implement a toolbar (or title bar) view component (Figure 11-5), you will have to add the Ext.Toolbar (or Ext.TitleBar) to the requires at the top of your view class. After that, you can instantiate the component by using the Ext.create(“Ext.Toolbar”, {}) syntax, or by lazy instantiating (nesting the xtype called toolbar). Using the xtype is the best practice for coding real-world MVC applications.</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure11-5.png" /></p>

<p>Implementing a title bar works exactly the same. The only difference is that the class from which you implement the instance is called Ext.TitleBar and the xtype is called titlebar. Although the title bar does not extend from Ext.Toolbar, they have a very similar appearance and setup.</p>

<p>The main difference between a Ext.TitleBar and a Ext.Toolbar is that the title config is always centered horizontally in a title bar, between any items aligned left or right. By default, any item in a title bar or toolbar is a button, so you do not need to explicitly set it. Items in a title bar, such as buttons, can be docked to the left or right side of the bar, via the align config.</p>

<h4 id="implementing-lists">Implementing Lists</h4>
<p>A list is a data-aware component. You will need to hook up a data store to the list (with a fields model) to display any items. Following is an example of an Ext.List. First you must make sure you add the Ext.List to the requires array at the top of your view class so the Ext.Loader can load the framework class. Afterward you will use the object literal notation to create a Sencha Touch list:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">    xtype: 'list',
</span><span class="line">    store: {
</span><span class="line">        fields: ['name'],
</span><span class="line">        data: [{
</span><span class="line">            name: 'Leonardo'
</span><span class="line">        }, {
</span><span class="line">            name: 'Donatello'
</span><span class="line">        }, {
</span><span class="line">            name: 'Michelangelo'
</span><span class="line">        }, {
</span><span class="line">            name: 'Raphael'
</span><span class="line">        }]
</span><span class="line">    },
</span><span class="line">    itemTpl: '{name}'
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline Storage (Client Proxies)]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/07/offline-storage-client-proxies/"/>
    <updated>2014-10-07T22:09:31+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/07/offline-storage-client-proxies</id>
    <content type="html"><![CDATA[<p>HTML5 offers a powerful way to achieve this with Local Storage, Session Storage, Web SQL, and Application Cache.</p>

<ul>
  <li>
    <p>HTML5 Local Storage</p>

    <p>HTML5 Local Storage saves its data with no expiration date. You use it to save key/value pairs. The Sencha framework uses it internally to save persisted JavaScript (Sencha) classes. When you open a Sencha Touch app while you are offline, the Sencha Touch app itself can run because all the assets are stored offline in the Local Storage. The FindACab app makes use of Local Storage by saving the user settings offline.</p>
  </li>
  <li>
    <p>HTML5 Session Storage</p>

    <p>This method saves its data in a session. The session will be over after the browser is closed. This is the main difference from Local Storage, which won’t lose its data at all. Usually, the HTML5 Session Storage is used for online shopping baskets. It stores all the products in the session. After the products are purchased, the session can be cleared.</p>
  </li>
  <li>
    <p>Web SQL Databases</p>

    <p>This method, formerly known as “WebDB,” provides a thin wrapper around a SQL database. In 2007, Google launched Google Gears, an open source cross-browser plug-in that included an embedded database based on SQLite. This early prototype later influenced the creation of the HTML5 Web SQL Database specification.</p>
  </li>
  <li>
    <p>Application Cache</p>

    <p>This can make your application available offline, and can cache files and assets into the browser. You will need to <code>set up an AppCache manifest file</code>.</p>
  </li>
</ul>

<p><code>CAUTION</code></p>

<p>There is a SQL client proxy available in Sencha Touch 2.3. However, unfortunately, on November 18, 2010, the W3C announced that Web SQL database is a deprecated specification. This means that web developers should no longer use the technology, as the spec will receive no further updates, and browser vendors aren’t encouraged to support this technology. You can still use Web SQL databases in Google Chrome and in Safari browsers, but at your own risk. That said, it works very well with Sencha Touch, and there is no officially supported alternative.
You might want to check out IndexDB instead. See Grgur Grisogono’s <a href="https://github.com/grgur/Ext.data.proxy.IndexedDB">Sencha IndexDB Proxy</a>.</p>

<p>The Sencha Touch client proxy saves and loads the data locally on its device or in its
memory. Sencha Touch’s client proxy has four important subclasses:</p>

<ul>
  <li>Ext.data.proxy.Memory </li>
  <li>Ext.data.proxy.LocalStorage </li>
  <li>Ext.data.proxy.SessionStorage </li>
  <li>Ext.data.proxy.Sql
The <code>MemoryProxy</code> uses a local variable for data storage and retrieval, but the contents are lost on every page refresh. For that reason, I will not discuss it in this chapter.</li>
</ul>

<p>This is not the case with the <code>LocalStorage</code> proxy, the <code>SessionStorage</code> proxy, and the <code>SQL</code> proxy. When the browser provides support for these, it will save the model data as a key/value data store into the browser, so it will remain after the browser is closed and reopened. If the HTML5 Storage API is not supported by the browser, the constructor will throw an error.</p>

<p>This is not the case with the LocalStorage proxy, the SessionStorage proxy, and the SQL proxy. When the browser provides support for these, it will save the model data as a key/value data store into the browser, so it will remain after the browser is closed and reopened. If the HTML5 Storage API is not supported by the browser, the constructor will throw an error.</p>

<p>Because the data is saved as key/value pairs, where the key needs to be unique, you cannot save complex objects like JSON — unless you convert these JSON objects to strings with Ext.JSON.encode(). LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.</p>

<p>Here is an example showing how to implement a client proxy to your model or store class:</p>

<p><code>
proxy: {
	type: "&lt;client-proxy&gt;"
}
</code></p>

<p>The type can be set to <code>memory</code> (the default), <code>localstorage</code>, <code>sessionstorage</code>, or <code>sql</code>.
In this chapter, you’ll learn:</p>

<ul>
  <li>How to save data into Local Storage</li>
  <li>How to save data into Session Storage</li>
  <li>How to save data into a Web SQL database</li>
  <li>How to save assets locally by using the Application Cache</li>
</ul>

<h4 id="saving-data-into-local-storage">Saving Data into Local Storage</h4>

<p><code>CAUTION</code></p>

<p>When this proxy is used in a browser where Local Storage is not supported, the constructor will throw an error.</p>

<p>Every key/value pair in the Local Storage should have a unique key, to refer to its model data. Sencha Touch can generate a unique record id for you; you will only need to set an id on the proxy, which will be <code>prefixed</code> to the unique record id to make the Local Storage key.</p>

<p>In the FindACab app, you will use the LocalStorage proxy for saving user settings locally on the device. The Settings model in the FindACab app will contain a proxy like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
</pre></td><td class="code"><pre><code class=""><span class="line">proxy: {
	type: 'localstorage', 
	id: "Setting"
}
```
</span><span class="line">
Note that the key/value pairs in the client proxies are strings! When you retrieve this data later from a store — by using, for example, the command Ext.getStore("MyStore").getAt(0) — it will decode this string to a JavaScript object for you. In other words, it serializes and deserializes data `automatically` when saving or retrieving it. Awesome!
</span><span class="line">
An example Local Storage key/value pair for the FindACab app could look like this:
</span><span class="line">
```
</span><span class="line">"Setting-51726e64-ae85-4fe8-9bea-aa085f499da6" : "{ 
</span><span class="line">	"id":"51726e64-ae85-4fe8-9bea-aa085f499da6", 
</span><span class="line">	"gps":null,
</span><span class="line">	"city":"Amsterdam",
	"country":"NL" 
</span><span class="line">}"
```
</span><span class="line">
To generate an id with Sencha Touch, you need to implement an id strategy. There are three strategies you can use:
</span><span class="line">
</span><span class="line">* `Ext.data.identifier.Sequential` is a sequential id generator. It generates ids in sequential order (1, 2, 3, etc.).
* `Ext.data.identifier.Simple` is the default id generator in Sencha Touch. It generates ids in sequential order, prefixed with a prefix parameter. When no prefix parameter is set, it prefixes ids by default with ext-record- (e.g., ext- record-1, ext-record-2, ext-record-3, etc.).
* `Ext.data.identifier.Uuid` is a UUID (Universally Unique IDentifier, also known as GUIDs (Globally Unique IDentifier generator). A UUID is a 128-bits id that can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation’s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.
</span><span class="line">
To set an id strategy, you have to require one of the identifiers at the top of your model; for example: `requires: ["Ext.data.identifier.Uuid]`. The model should also have the idProperty set to the model field that can be used as an id, which defaults to the fieldname: id. (Make sure the field type matches!) In addition, the model should contain the identifier property. In this case, it can be set to uuid, which is why you are requiring this class at the top of the file.
</span><span class="line">
Let’s take a look at the full code for the Settings model of the FindACab app, FindACab.model.Setting:
</span><span class="line">
```
</span><span class="line">Ext.define('FindACab.model.Setting', {
</span><span class="line">        extend: 'Ext.data.Model',
</span><span class="line">        requires: ['Ext.data.identifier.Uuid'],
</span><span class="line">        config: {
</span><span class="line">            idProperty: 'id',
</span><span class="line">            identifier: 'uuid',
</span><span class="line">            fields: [{
</span><span class="line">                name: 'id',
</span><span class="line">                type: 'auto'
</span><span class="line">            }, {
</span><span class="line">                name: 'gps',
</span><span class="line">                type: 'boolean'
</span><span class="line">            }, {
</span><span class="line">                name: 'city',
</span><span class="line">                type: 'string'
</span><span class="line">            }, {
</span><span class="line">                name: 'country',
</span><span class="line">                type: 'string'
</span><span class="line">            }],
</span><span class="line">            validations: [{
</span><span class="line">                type: 'presence',
</span><span class="line">                field: 'city',
</span><span class="line">                message: "Please provide a city."
</span><span class="line">            }, {
</span><span class="line">	            type: 'presence',
				field: 'country',
				message: "Please provide a country."
</span><span class="line">            }],
</span><span class="line">            proxy: {
</span><span class="line">                type: 'localstorage',
</span><span class="line">                id: "Setting"
</span><span class="line">            }￼￼￼
</span><span class="line">        }
```
</span><span class="line">
#### Saving Data into Session Storage
</span><span class="line">
```
</span><span class="line">proxy: {
	type: "sessionstorage", 
	id: "session-id-prefix"
}
```
</span><span class="line">
</span><span class="line">#### Saving Data into a Web SQL Database for the FindACab App
</span><span class="line">
`TIP`
</span><span class="line">
Isn’t it annoying that you cannot delete a Web SQL database directly with the Google Chrome Dev Tools? Well, there is a solution to remove a database (and its tables). Just open the following URL in your Google Chrome browser: chrome://settings/cookies. Here you can search for any particular site or remove all locally stored data. In my case, I just search for localhost, and I get an exact overview of all my cookies, Local Storage, and Web SQL databases. I can double-click a database, and I’ll be prompted to remove the database. I click the Remove button, and it is gone!
</span><span class="line">
#### Saving Assets Locally by Using the Application Cache
</span><span class="line">
it is a technique for making your application available offline, without downloading the stylesheets, images, Sencha Touch framework, and custom classes. It will create a cached version of your mobile app by setting up a HTML5 cache manifest file, better known as the HTML5 AppCache.
</span><span class="line">
AppCache is extremly handy for users who want to bookmark their mobile apps to their phone home screen. This is nice because the browser address bar will be gone, so it will give you a more native experience.
</span><span class="line">
Whereas Web Storage saves key/value pairs in the browser’s Local or Session Storage, AppCache has the HTML5 ability to save (cache) a whole web app (the index.html file and all its assets, such as stylesheets, JavaScript, images, icons, fonts, etc.) in the browser’s cache to make it available, even if the client has no Internet connection at all.
</span><span class="line">
The Application Cache manifest file is a simple text file that lists the resources that the browser should cache for offline access. Another reason for using AppCache is speed (because it caches and therefore loads faster) and performance (it reduces server load).
</span><span class="line">
`TIP`
</span><span class="line">
[Read the W3C spec about AppCache](http://www.w3.org/TR/offline-webapps/#offline). Also, take a look at [Jake Archibald’s blog post](http://alistapart.com/article/application-cache-is-a-douchebag) at A List Apart about troubleshooting AppCache.
</span><span class="line">
Now how can you implement this? You don’t have to do much to make Application Cache work. First, you will have to edit the app.json file; it should define the appCache object. Let’s take a look:
</span><span class="line">
```
</span><span class="line">"appCache": { 
</span><span class="line">	"cache": [
		"index.html",
		"resources/css/app.css"
	],
```
The cache section lists all the items that need to be cached. Make sure that these files
exist, or else the caching will fail (and if it fails, you will not be happy):
</span><span class="line">
```
</span><span class="line">"network": [ 
</span><span class="line">	"*"
],
```
</span><span class="line">
The `network` section is basically used for (white) listing files that require an online connection. All requests to these resources `bypass the cache`, even if the browser is offline. Note you can also set this to a wildcard, *. This might be handy when the files from the cache section are cached but some assets are not listed and therefore missing. It will make sure that those unlisted assets will still be downloaded, no matter what. If I didn’t create a network section that points to the wildcard, then the application would miss these files:
</span><span class="line">
```
</span><span class="line">	"fallback": [
		//fall back items
	￼
</span><span class="line">	]
}//end appCache
```
</span><span class="line">The fallback section in the app cache file will let us list fallback solutions for when a request fails. See, for example, the line `resources/images/resources/images/placeholder.gif`. If any image in the resources/images folder fails, it will display the placeholder.png file.
</span><span class="line">
</span><span class="line">Then build the application with Sencha Cmd:
</span></code></pre></td></tr></table></div></figure></notextile></div>
<pre><code>sencha app build ``` Be aware that the Application Cache can be a pain sometimes for the following reasons:
</code></pre>

<ul>
  <li>You cannot specify an expiration date/time for files in the cache. But you can expire the cache by making a change to the manifest file — for example, by adding a comment. Any change to the file causes all files to be recached. This is what Sencha does: it changes the Application Cache manifest by adding comments that represent generated unique keys.</li>
  <li>If any of the files listed on the manifest are not found, no caching will occur.</li>
  <li>While waiting for the manifest file, the browser will load the site <code>from the cache</code>. Therefore, changes to your cache manifest are acted upon only after a <code>second</code> refresh from when the file was modified.</li>
  <li>Manually clearing the browser cache from the Google Chrome Dev Tools does not force all files to be recached.</li>
</ul>

<p><code>TIP</code></p>

<p>A manifest file must be served with the <code>MIME-typ</code>e text/cache-manifest. You may need to add this custom file type to your web server or to a .htaccess file: AddType text/cache-manifest .appcache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Stores]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/07/data-stores/"/>
    <updated>2014-10-07T16:16:36+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/07/data-stores</id>
    <content type="html"><![CDATA[<p>A data store is a mechanism to cache your data and is part of the Ext.data package. It is like a bucket full of data records. You can pick (select) a record out of this bucket (the data store) and add or remove records. Stores also provide functions for sorting, filtering, and grouping the model instances. You’ll need to give a model structure to the store with data. You can do this inline by setting the fields and data arrays (hardcoded), but a better MVC approach is to bind a model to the data store.</p>

<p>Sencha Touch has data-aware components — such as <code>lists, dataviews, and charts</code> — that need to be hooked up to a store in order to display data. I will discuss those in
<code>Chapter 11.</code></p>

<p>In this chapter, you’ll learn:</p>

<ul>
  <li>How to load data in a store</li>
  <li>How to sort a data store locally How to sort data on a server</li>
  <li>How to group a data store</li>
  <li>How to filter a data store locally </li>
  <li>How to filter a data store on a server </li>
  <li>How to save/sync data in a store</li>
</ul>

<h4 id="loading-data-in-a-store">Loading Data in a Store</h4>
<p>For the FindACab app to be able to display the data, the data needs to be contained in the store. By default, when you create a store (and the data is not hardcoded), you will have to load the model data into your store.
When autoLoad is not enabled, you have to manually load the store from your code, or from your developer’s console:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.getStore('MyStore').load(this, records, successful, operation, eOpts);</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>NOTE</code></p>

<p><code>Ext.getStore("MyStore")</code> is a lookup method; it finds a store (if the store is registered in the Ext.application() or controller) based on the store instance name or storeId through the StoreManager. Really, it’s a short alias for <code>Ext.data.StoreManager.lookup("myStore")</code>;.</p>

<p>We want the FindACab app to retrieve a list of cabs in the area. We already hooked up a proxy to the store, so we can load the data. When you run the Ext.getStore(“Cabs”).load() event in the console, it will look up the Cabs store through the StoreManager and return a store object with a data array that contains 20 items.</p>

<p>Instead of just loading the store, you can also handle a callback:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.getStore('Cabs').load({
</span><span class="line">    callback: function(records, success, operation) {
</span><span class="line">        //callback function here
</span><span class="line">        console.log(records);
</span><span class="line">    },
</span><span class="line">    scope: this
</span><span class="line">});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The store has a callback function, which in this case logs all records after the store is loaded. You can also set a scope. In this case, when you log console.log(this) in your callback, it won’t log the scope within the callback, but rather the scope of the class where the store load() event is called.</p>

<p><code>TIP</code></p>

<p><code>
There are more events you can listen for in the store; for example, addrecords, beforeload, beforesync, refresh, removerecords, updaterecords, and write. Check the API docs for more details about the different store events.
</code></p>

<p>Now you will modify the store proxy config. Instead of entering a full proxy URL, you will retrieve the URL, the YELP_API key, and the YELP_TERM from the Utils.Commons static file, so it’s better organized. You can send parameters with the request by using the extraParams object, and you can modify these parameters from elsewhere in your code, as shown in Example 9-1.</p>

<p><code>
Example 9 - 1.store / Cabs.js
Ext.define('FindACab.store.Cabs', {
    extend: 'Ext.data.Store',
    requires: ['Ext.data.proxy.JsonP'],
    config: {
        model: 'FindACab.model.Cab',
        autoLoad: false,
        proxy: {
            type: 'jsonp',
            url: Utils.Commons.YELP_API,
            noCache: false,
            extraParams: {
                term: Utils.Commons.YELP_TERM,
                ywsid: Utils.Commons.YELP_KEY,
                location: Utils.Commons.LOCATION
            },
            reader: {
                type: 'json',
                rootProperty: 'businesses',
            }
        },
    }
});
</code></p>

<p>In order to maintain the store callback in the controller, you will create a system event listener to listen to the store load event. For now, this code will only log the results, and show and hide a loading indicator. Example 9-2 shows the new FindACab.controller.CabController.</p>

<p>&#8220;`
Example 9-2. controller/CabController.js</p>

<p><code>
Ext.define('FindACab.controller.CabController', {
    extend: 'Ext.app.Controller',
    config: {
        models: ['Cab'],
        stores: ['Cabs']
    },
    init: function() {
        Ext.Viewport.mask({
            xtype: 'loadmask',
            message: 'loading...'
        });
        Ext.getStore('Cabs').load();
        Ext.getStore('Cabs').addListener('load',
            this.onCabsStoreLoad,
            this);
    },
    onCabsStoreLoad: function(records, success, operation) {
        console.log(records.getData());
        Ext.Viewport.unmask();
    }
});
</code></p>

<h4 id="sorting-a-data-store-locally">Sorting a Data Store Locally</h4>

<p>After you retrieve data in your store, you might notice that the store is not sorted. It is possible to sort the records in a data store on the client side. You will use the <code>Ext.data.Store.sort(sorters, [defaultDirection], [where])</code> method, and you can pass in sorters_ object, which specifies the fieldname to sort and the direction, either ASC (ascending, A–Z) and DESC (descending, Z-A).</p>

<p>Here I construct a sorters array to sort the fieldname property by ASC:</p>

<p><code>
sorters: [{
	property: "fieldname", direction: "ASC"
}]
</code></p>

<p>The sorters array or the sort() method on the store sorts the data collection inside the
store by one or more of its properties.</p>

<p>To programmatically sort a store from elsewhere in your code, you can pass in a single
argument, the fieldname to sort. This will toggle between ascending and descending:</p>

<p><code>
Ext.getStore("Cabs").sort("name");
</code></p>

<p>Or you can pass in the full sorters configuration:</p>

<p><code>
Ext.getStore("Cabs").sort({
    property: "fieldname",
    direction: "ASC"
});
</code>
Or just the string fieldname and strings “ASC” or “DESC”:</p>

<p><code>
Ext.getStore("Cabs").sort("name", "DESC");
</code>
In the FindACab app, you will sort the Cabs list on the cab service name in alphabetical
order. Therefore, the default sorter will be set to name:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">sorters: [{
</span><span class="line">    property: "name",
</span><span class="line">    direction: "ASC"
</span><span class="line">}],</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
It is possible to add sorters on top of each other. For example, first sort on the field name and afterward filter on the field distance. You do so by passing an array:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">store.sort([{
</span><span class="line">    property: 'name',
</span><span class="line">    direction: 'ASC'
</span><span class="line">}, {
</span><span class="line">    property: 'distance',
</span><span class="line">    direction: 'DESC'
</span><span class="line">}]);</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>When the sort() method is called again with a new sorter object, any existing sorters will be removed. When the sort() method is called without any arguments, the existing sorters will be reapplied. To keep existing sorters and add new ones, you will need to run the add() method on the sorters object. Here is how you can add sorters to a store:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">store.sorters.add(new Ext.util.Sorter({
</span><span class="line">    property: 'phone',
</span><span class="line">    direction: 'ASC'
</span><span class="line">}));
</span><span class="line">store.sort();</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The previous examples make sense when you want to sort on local stores. However, it’s also possible to sort remotely on the server side.</p>

<h4 id="sorting-data-on-a-server">Sorting Data on a Server</h4>
<p>The data that you retrieve from the server side might be very large. It could be faster to sort it on the server side instead of locally. Luckily, Sencha Touch provides a way to implement server-side paging, called <code>remote sorting</code>. You will use the Ext.data.Store.remoteSort boolean, and you will use the sorters object directly in the store or run the Ext.data.Store.sort(sorters, [defaultDirection], [where]) method where you can pass in a sorters object. (See the previous section on how to sort a store.)</p>

<p>If you want to enable remote sorting, set the following settings in the store class definition:</p>

<ul>
  <li>A pageSize to define the number of records that constitutes a “page.” (Note that the default page size is set to 25.)</li>
  <li>The boolean remoteSort config in the store class definition to true. (Note that remote sorting is false by default.)</li>
  <li>The sorters object, as described in the previous section:</li>
</ul>

<p><code>
pageSize: 30, 
remoteSort: true, 
sorters: [{
	property: "fieldname",
	direction: "ASC" 
}]
</code></p>

<p>Unfortunately, because we do not have control over the Yelp server side, we won’t implement a remote sorter for the FindACab app. However, I do want to share a running example of a remote sorter. In this demo, there is another data store with Car objects that sorts cars by brand in ascending order:</p>

<p><code>
Ext.define('RemoteTest.store.Cars', {
        extend: 'Ext.data.Store',
        requires: ['Ext.data.proxy.JsonP'],
        config: {
            model: 'RemoteTest.model.Car',
            autoLoad: true,
            remoteSort: true, // 
            sorters: [{ //
	            property: "brand",
	            direction: "ASC"
	        }],
	    pageSize: 20, //
	    proxy: { //
	        type: 'jsonp',
	        url: 'http://someurl.com/test.php',
	        reader: { //
	            rootProperty: 'results',
	            totalProperty: 'total',
	            successProperty: 'success'
	        }
	    },
	}
});
</code>
<code>WARNING</code></p>

<p>The previous store has an autoLoad property. This makes sense for demo purposes, but in a real application, you would probably want to programmatically sort and load the store.</p>

<p>Currently, this Car store doesn’t do much. That’s because there is no server side implemented. This is OK, because the server-side code can be a black box for us. However, let’s assume that http://<someurl>.com/test.php is a working web service that sends Car objects back.</someurl></p>

<p>In the Google Developer network tab, you can see a request is made, which sends the following GET request to your server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http://someurl.com/test.php?_dc=1386924081041&amp;page=1&amp;start=0&amp;limit=20 &amp;sort=%5B%7B%22property%22%3A%22brand%22%2C%22direction%22%3A%22ASC%22%7D%5D &amp;callback=Ext.data.JsonP.callback1
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Let’s format the query string parameters:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">page:1
start:0
limit:20 
sort:[{"property":"name","direction":"ASC"}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The limit parameter comes from the store pageSize. The page and start parameters are used for paging. On the server side, you can calculate which set of items you have to send back to the client-side code.</p>

<p>The http://<someurl>.com/test.php web service requires some logic to sort the data (e.g., in a database) and send the correct set of data back.</someurl></p>

<p>The server response for sending back Car objects (in PHP) could look like Example 9- 3. The names of the success, total, and results properties should be set in the store’s reader.</p>

<p><code>
{
    "success": true,
    "total": 500,
    ￼￼￼￼￼
        "results": [{
                "id": 1,
                "brand": "BMW",
                "type": 7
            }, {
                "id": 2,
                "brand": "Mercedes",
                "type": 5
            }
            ... //20 results in total
    ]
}
</code></p>

<h4 id="grouping-a-data-store">Grouping a Data Store</h4>

<p>Grouping a data store makes sense when you want to display data into an Ext.List component in Sencha Touch and you want to visually group data. For example, when you have a store with companies, you could, for example, group by “city.” This will list every company per city.</p>

<p>To enable grouping in a store, implement the groupField and groupDir configurations directly in the store class definition. The groupFields sets the field to group and the groupDir sets the direction (ASC or DESC):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>&#8216;<model-field-name>&#8217;, 
groupDir: &#8216;ASC&#8217;<a href="http://xiekunRonaldo.github.io//or">DESC</a><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="sb">```</span>
</span><span class="line">
</span><span class="line"><span class="sb">To dynamically group a store, you can run the setGrouper() method on a store object:</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="no">Ext</span><span class="o">.</span><span class="n">getStore</span><span class="p">(</span><span class="s1">&#39;Cabs&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">setGrouper</span><span class="p">({</span>
</span><span class="line">    <span class="ss">direction</span><span class="p">:</span> <span class="s1">&#39;ASC&#39;</span><span class="p">,</span> <span class="sr">//o</span><span class="n">r</span> <span class="no">DESC</span>
</span><span class="line">    <span class="ss">property</span><span class="p">:</span> <span class="s1">&#39;&lt;model-field-name&gt;&#39;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line">
</span><span class="line"><span class="sb">You will implement grouping on the Cabs store for the FindACab app list. This time, you will not group on city, because all the data that is in the Cabs store already shares the same city — for example, Amsterdam. Therefore, let’s group on the first alphabetical character of a cab service name. (See Figure 9-1.) You would see a group “A” that lists all names that start with an A, a group “B” that lists all names that start with a B, and so on. It’s the same behavior as when you open the contacts list on an iPhone. Names are grouped, and if you want, you can even display an index bar on the side to quickly browse to the corresponding character.</span>
</span><span class="line">
</span><span class="line"><span class="sb"><img src="http://xiekunRonaldo.github.io/images/2014/10/figure7-3.png" /></span>
</span><span class="line">
</span><span class="line"><span class="sb">To achieve this, you will need the Ext.data.Store.grouper object, with a custom group function: groupFn(). You can set the grouper object directly in the store class definition, as shown in Example 9-4.</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="ss">grouper</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">    <span class="ss">groupFn</span><span class="p">:</span> <span class="n">function</span><span class="p">(</span><span class="n">record</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">record</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">toUpperCase</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line">
</span><span class="line"><span class="sb">The groupFn function with the code return record.get(&quot;name&quot;) [0].toUpperCase(); will group the data in the store on the first (uppercase) character of the name field.</span>
</span><span class="line">
</span><span class="line"><span class="sb">#### Filtering a Data Store Locally</span>
</span><span class="line">
</span><span class="line"><span class="sb">A data store can also filter records. When a filter is applied, the data store will not remove records. The same records are still available in the store, but only the records that match the filter criteria are displayed.</span>
</span><span class="line">
</span><span class="line"><span class="sb">Filters are added as arrays. Here’s how to implement a filter array directly in the store class definition:</span>
</span></code></pre></td></tr></table></div>
filters: [{
    property: &#8220;fieldname&#8221;,
    value: &#8220;match&#8221;
}],
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>&#8216;<model-field-name>&#8217;, 
groupDir: &#8216;ASC&#8217;<a href="http://xiekunRonaldo.github.io//or">DESC</a><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">You</span> <span class="n">can</span> <span class="n">also</span> <span class="n">filter</span> <span class="n">programmatically</span><span class="o">.</span> <span class="no">Just</span> <span class="n">run</span> <span class="n">the</span> <span class="n">following</span> <span class="nb">method</span> <span class="n">from</span> <span class="n">a</span> <span class="n">store</span> <span class="ss">instance</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">Ext.data.Store.filter(filters, [value], [anyMatch], [caseSensitive]);</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="no">It</span><span class="err">’</span><span class="n">s</span> <span class="n">possible</span> <span class="n">to</span> <span class="n">filter</span> <span class="n">on</span> <span class="n">the</span> <span class="n">first</span> <span class="n">characters</span> <span class="n">of</span> <span class="n">a</span> <span class="n">field</span> <span class="ow">or</span> <span class="n">from</span> <span class="n">anywhere</span> <span class="p">(</span><span class="ss">argument</span><span class="p">:</span> <span class="n">anyMatch</span><span class="p">),</span> <span class="ow">and</span> <span class="n">it</span><span class="err">’</span><span class="n">s</span> <span class="n">also</span> <span class="n">possible</span> <span class="n">to</span> <span class="n">filter</span> <span class="k">for</span> <span class="k">case</span> <span class="n">sensitivity</span> <span class="p">(</span><span class="ss">argument</span><span class="p">:</span> <span class="sb">`caseSensitive`</span><span class="p">)</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="c1">#### Custom Filter Functions</span>
</span><span class="line">
</span><span class="line"><span class="no">You</span> <span class="n">can</span> <span class="n">also</span> <span class="n">create</span> <span class="n">custom</span> <span class="n">filter</span> <span class="n">functions</span><span class="o">.</span> <span class="no">To</span> <span class="k">do</span> <span class="n">so</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">set</span> <span class="n">a</span> <span class="n">filterFn</span> <span class="k">in</span> <span class="n">the</span>
</span><span class="line"><span class="n">array</span> <span class="ow">or</span> <span class="n">use</span> <span class="n">the</span> <span class="n">filterBy</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span> <span class="nb">method</span> <span class="n">on</span> <span class="n">the</span> <span class="n">store</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">filters: [{</span>
</span><span class="line"><span class="sb">    filterFn: function(item) {</span>
</span><span class="line"><span class="sb">        return item.get(&quot;phone&quot;).length &gt; 0;</span>
</span><span class="line"><span class="sb">    }</span>
</span><span class="line"><span class="sb">}],</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="c1">#### Stacking Filters</span>
</span><span class="line"><span class="n">o</span> <span class="n">add</span> <span class="n">filters</span> <span class="n">on</span> <span class="n">top</span> <span class="n">of</span> <span class="n">each</span> <span class="n">other</span> <span class="err">—</span> <span class="k">for</span> <span class="n">example</span><span class="p">,</span> <span class="n">to</span> <span class="n">filter</span> <span class="n">on</span> <span class="n">a</span> <span class="nb">name</span> <span class="n">with</span> <span class="n">a</span> <span class="n">value</span> <span class="n">of</span> <span class="no">Taxi</span> <span class="ow">and</span> <span class="n">filter</span> <span class="n">on</span> <span class="n">a</span> <span class="n">distance</span> <span class="n">of</span> <span class="mi">20</span> <span class="n">miles</span> <span class="err">—</span> <span class="n">you</span> <span class="n">pass</span> <span class="k">in</span> <span class="n">an</span> <span class="n">array</span><span class="o">.</span> <span class="no">Here</span><span class="p">,</span> <span class="n">I</span> <span class="n">stack</span> <span class="n">a</span> <span class="n">couple</span> <span class="n">of</span> <span class="n">filters</span> <span class="n">on</span> <span class="n">top</span> <span class="n">of</span> <span class="n">each</span> <span class="ss">other</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">store.filter([{</span>
</span><span class="line"><span class="sb">    property: &quot;name&quot;,</span>
</span><span class="line"><span class="sb">    value: &quot;Taxi&quot;</span>
</span><span class="line"><span class="sb">}, {</span>
</span><span class="line"><span class="sb">    property: &quot;distance&quot;,</span>
</span><span class="line"><span class="sb">    value: &quot;20&quot;</span>
</span><span class="line"><span class="sb">}]);</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line">
</span><span class="line"><span class="sb">`Note`</span>
</span><span class="line">
</span><span class="line"><span class="no">Instead</span> <span class="n">of</span> <span class="n">passing</span> <span class="n">an</span> <span class="n">array</span> <span class="n">with</span> <span class="n">filter</span> <span class="n">objects</span> <span class="n">into</span> <span class="n">the</span> <span class="n">filter</span><span class="p">()</span> <span class="nb">method</span><span class="p">,</span> <span class="n">I</span> <span class="n">could</span> <span class="n">call</span> <span class="n">the</span> <span class="n">filter</span><span class="p">()</span> <span class="nb">method</span> <span class="n">again</span> <span class="n">without</span> <span class="n">the</span> <span class="n">filter</span> <span class="n">objects</span> <span class="n">as</span> <span class="n">arguments</span><span class="o">.</span> <span class="no">Unlike</span> <span class="n">sorters</span><span class="p">,</span> <span class="n">filters</span> <span class="n">won</span><span class="err">’</span><span class="n">t</span> <span class="n">reset</span> <span class="k">if</span> <span class="n">you</span> <span class="n">call</span> <span class="n">them</span> <span class="n">again</span><span class="o">.</span> <span class="no">When</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">renew</span> <span class="n">the</span> <span class="n">filter</span><span class="p">,</span> <span class="n">you</span> <span class="n">have</span> <span class="n">to</span> <span class="n">clear</span> <span class="n">it</span> <span class="ss">first</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">store.clearFilter();</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line">
</span><span class="line"><span class="c1">#### Filtering Data on a Server</span>
</span><span class="line">
</span><span class="line"><span class="no">The</span> <span class="n">data</span> <span class="n">that</span> <span class="n">you</span> <span class="n">retrieve</span> <span class="n">from</span> <span class="n">the</span> <span class="n">server</span> <span class="n">side</span> <span class="n">might</span> <span class="n">be</span> <span class="n">very</span> <span class="n">large</span><span class="o">.</span> <span class="no">It</span> <span class="n">could</span> <span class="n">be</span> <span class="n">faster</span> <span class="n">to</span> <span class="n">filter</span> <span class="n">it</span> <span class="n">on</span> <span class="n">the</span> <span class="n">server</span> <span class="n">side</span> <span class="n">instead</span> <span class="n">of</span> <span class="n">locally</span><span class="o">.</span> <span class="no">Luckily</span><span class="p">,</span> <span class="no">Sencha</span> <span class="no">Touch</span> <span class="n">provides</span> <span class="n">a</span> <span class="n">way</span> <span class="n">to</span> <span class="n">implement</span> <span class="n">server</span><span class="o">-</span><span class="n">side</span> <span class="n">filtering</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="no">You</span> <span class="n">will</span> <span class="n">use</span> <span class="n">the</span> <span class="n">remoteFilter</span> <span class="n">boolean</span> <span class="ow">and</span> <span class="n">the</span> <span class="n">array</span> <span class="n">with</span> <span class="n">filters</span><span class="o">.</span> <span class="no">Here</span><span class="err">’</span><span class="n">s</span> <span class="n">an</span> <span class="n">example</span> <span class="n">of</span> <span class="n">the</span> <span class="n">store</span> <span class="k">class</span> <span class="ss">definition</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">remoteFilter: true,</span>
</span><span class="line"><span class="sb">filters: [{</span>
</span><span class="line"><span class="sb">    property: &quot;fieldname&quot;,</span>
</span><span class="line"><span class="sb">    value: &quot;match&quot;</span>
</span><span class="line"><span class="sb">}],</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="n">because</span> <span class="n">we</span> <span class="k">do</span> <span class="ow">not</span> <span class="n">have</span> <span class="n">server</span><span class="o">-</span><span class="n">side</span> <span class="n">control</span> <span class="n">over</span> <span class="no">Yelp</span><span class="o">.</span><span class="n">com</span><span class="p">,</span> <span class="n">we</span> <span class="n">won</span><span class="err">’</span><span class="n">t</span> <span class="n">implement</span> <span class="n">a</span> <span class="n">remote</span> <span class="n">filter</span> <span class="k">for</span> <span class="n">the</span> <span class="no">FindACab</span> <span class="n">app</span><span class="o">.</span> <span class="n">I</span> <span class="k">do</span> <span class="n">want</span> <span class="n">to</span> <span class="n">share</span> <span class="n">an</span> <span class="n">example</span> <span class="n">of</span> <span class="n">a</span> <span class="n">remote</span> <span class="n">filter</span><span class="p">,</span> <span class="n">however</span><span class="o">.</span> <span class="no">In</span> <span class="n">this</span> <span class="n">demo</span><span class="p">,</span> <span class="n">there</span> <span class="n">is</span> <span class="n">another</span> <span class="n">data</span> <span class="n">store</span> <span class="n">with</span> <span class="no">Car</span> <span class="n">objects</span> <span class="ow">and</span> <span class="n">with</span> <span class="n">remote</span> <span class="n">filtering</span> <span class="n">enabled</span><span class="o">.</span> <span class="no">It</span> <span class="n">has</span> <span class="n">a</span> <span class="n">filter</span> <span class="n">set</span> <span class="n">that</span> <span class="n">filters</span> <span class="n">on</span> <span class="n">car</span> <span class="ss">brand</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">Ext.define(&#39;RemoteTest.store.Cars&#39;, {</span>
</span><span class="line"><span class="sb">    extend: &#39;Ext.data.Store&#39;,</span>
</span><span class="line"><span class="sb">    requires: [&#39;Ext.data.proxy.JsonP&#39;],</span>
</span><span class="line"><span class="sb">    config: {</span>
</span><span class="line"><span class="sb">        model: &#39;RemoteTest.model.Car&#39;,</span>
</span><span class="line"><span class="sb">        autoLoad: true,</span>
</span><span class="line"><span class="sb">        pageSize: 20,</span>
</span><span class="line"><span class="sb">        remoteFilter: true,</span>
</span><span class="line"><span class="sb">        filters: [{</span>
</span><span class="line"><span class="sb">            property: &quot;brand&quot;,</span>
</span><span class="line"><span class="sb">            value: &quot;BMW&quot;</span>
</span><span class="line"><span class="sb">        }],</span>
</span><span class="line"><span class="sb">        proxy: {</span>
</span><span class="line"><span class="sb">            type: &#39;jsonp&#39;,</span>
</span><span class="line"><span class="sb">            url: &#39;http://someurl.com/test.php&#39;,</span>
</span><span class="line"><span class="sb">            reader: {</span>
</span><span class="line"><span class="sb">                rootProperty: &#39;results&#39;,</span>
</span><span class="line"><span class="sb">                totalProperty: &#39;total&#39;,</span>
</span><span class="line"><span class="sb">                successProperty: &#39;success&#39;</span>
</span><span class="line"><span class="sb">            }</span>
</span><span class="line"><span class="sb">        },</span>
</span><span class="line"><span class="sb">    }</span>
</span><span class="line"><span class="sb">});</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">`WARNING`</span>
</span><span class="line">
</span><span class="line"><span class="no">When</span> <span class="n">the</span> <span class="n">remoteFilter</span> <span class="n">configuration</span> <span class="n">has</span> <span class="n">been</span> <span class="n">set</span> <span class="n">to</span> <span class="kp">true</span><span class="p">,</span> <span class="n">you</span> <span class="n">will</span> <span class="n">have</span> <span class="n">to</span> <span class="n">manually</span> <span class="n">call</span> <span class="n">the</span> <span class="nb">load</span> <span class="nb">method</span> <span class="n">after</span> <span class="n">every</span> <span class="n">filter</span> <span class="n">you</span> <span class="n">set</span> <span class="n">to</span> <span class="n">retrieve</span> <span class="n">the</span> <span class="n">filtered</span> <span class="n">data</span> <span class="n">from</span> <span class="n">the</span> <span class="n">server</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="no">Let</span><span class="err">’</span><span class="n">s</span> <span class="n">assume</span> <span class="n">that</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="o">&lt;</span><span class="n">someurl</span><span class="o">&gt;.</span><span class="n">com</span><span class="o">/</span><span class="nb">test</span><span class="o">.</span><span class="n">php</span> <span class="n">is</span> <span class="n">a</span> <span class="n">working</span> <span class="n">web</span> <span class="n">service</span> <span class="n">that</span> <span class="n">sends</span>
</span><span class="line"><span class="no">Car</span> <span class="n">objects</span> <span class="n">back</span><span class="o">.</span> <span class="no">We</span><span class="err">’</span><span class="n">ll</span> <span class="n">filter</span> <span class="n">on</span> <span class="n">a</span> <span class="n">car</span> <span class="n">brand</span> <span class="n">of</span> <span class="no">BMW</span><span class="p">,</span> <span class="mi">20</span> <span class="n">per</span> <span class="n">time</span> <span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span>
</span><span class="line"><span class="no">In</span> <span class="n">the</span> <span class="no">Google</span> <span class="no">Developer</span> <span class="no">Network</span> <span class="n">tab</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">see</span> <span class="n">a</span> <span class="n">request</span> <span class="n">is</span> <span class="n">made</span> <span class="n">that</span> <span class="n">sends</span> <span class="n">the</span>
</span><span class="line"><span class="n">following</span> <span class="no">GET</span> <span class="n">request</span> <span class="n">to</span> <span class="n">your</span> <span class="ss">server</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">http://someurl.com/test.php?_dc=1387182737587&amp;page=1&amp;start=0&amp;limit=20 &amp;filter=%5B%7B%22property%22%3A%22brand%22%2C%22value%22%3A%22BMW%22%7D%5D &amp;callback=Ext.data.JsonP.callback1</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line">
</span><span class="line"><span class="no">Let</span><span class="err">’</span><span class="n">s</span> <span class="nb">format</span> <span class="n">the</span> <span class="n">query</span> <span class="n">string</span> <span class="ss">parameters</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">page: 1</span>
</span><span class="line"><span class="sb">start: 0</span>
</span><span class="line"><span class="sb">limit: 20</span>
</span><span class="line"><span class="sb">filter: [{</span>
</span><span class="line"><span class="sb">    &quot;property&quot;: &quot;brand&quot;,</span>
</span><span class="line"><span class="sb">    &quot;value&quot;: &quot;BMW&quot;</span>
</span><span class="line"><span class="sb">}]</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="no">As</span> <span class="n">you</span> <span class="n">might</span> <span class="n">have</span> <span class="n">noticed</span><span class="p">,</span> <span class="n">the</span> <span class="n">implementation</span> <span class="ow">and</span> <span class="n">server</span> <span class="n">requests</span> <span class="n">of</span> <span class="n">a</span> <span class="n">remote</span> <span class="n">filter</span> <span class="n">are</span> <span class="n">similar</span> <span class="n">to</span> <span class="n">the</span> <span class="n">implementation</span> <span class="ow">and</span> <span class="n">server</span> <span class="n">requests</span> <span class="n">of</span> <span class="n">a</span> <span class="n">remote</span> <span class="n">sorter</span><span class="o">.</span> <span class="no">The</span> <span class="n">limit</span> <span class="n">parameter</span> <span class="n">comes</span> <span class="n">from</span> <span class="n">the</span> <span class="n">store</span> <span class="n">pageSize</span><span class="o">.</span> <span class="no">The</span> <span class="n">page</span> <span class="ow">and</span> <span class="n">start</span> <span class="n">parameters</span> <span class="n">are</span> <span class="n">used</span> <span class="k">for</span> <span class="n">paging</span><span class="o">.</span> <span class="no">On</span> <span class="n">the</span> <span class="n">server</span> <span class="n">side</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">calculate</span> <span class="n">which</span> <span class="n">set</span> <span class="n">of</span> <span class="n">items</span> <span class="n">you</span> <span class="n">have</span> <span class="n">to</span> <span class="nb">send</span> <span class="n">back</span> <span class="n">to</span> <span class="n">the</span> <span class="n">client</span><span class="o">-</span><span class="n">side</span> <span class="n">code</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="no">The</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="o">&lt;</span><span class="n">someurl</span><span class="o">&gt;.</span><span class="n">com</span><span class="o">/</span><span class="nb">test</span><span class="o">.</span><span class="n">php</span> <span class="n">requires</span> <span class="n">some</span> <span class="n">logic</span> <span class="n">to</span> <span class="n">filter</span> <span class="n">their</span> <span class="n">data</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span><span class="n">,</span> <span class="k">in</span> <span class="n">a</span> <span class="n">database</span><span class="p">),</span> <span class="ow">and</span> <span class="nb">send</span> <span class="n">the</span> <span class="n">correct</span> <span class="n">set</span> <span class="n">of</span> <span class="n">data</span> <span class="n">back</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="no">The</span> <span class="n">server</span> <span class="n">response</span> <span class="k">for</span> <span class="n">sending</span> <span class="n">back</span> <span class="no">Car</span> <span class="n">objects</span> <span class="p">(</span><span class="k">in</span> <span class="no">PHP</span><span class="p">)</span> <span class="n">could</span> <span class="n">look</span> <span class="n">like</span> <span class="no">Example</span> <span class="mi">9</span><span class="o">-</span> <span class="mi">6</span><span class="o">.</span> <span class="no">The</span> <span class="n">names</span> <span class="n">of</span> <span class="n">the</span> <span class="n">success</span><span class="p">,</span> <span class="n">total</span><span class="p">,</span> <span class="ow">and</span> <span class="n">results</span> <span class="n">properties</span> <span class="n">should</span> <span class="n">be</span> <span class="n">set</span> <span class="k">in</span> <span class="n">the</span> <span class="n">store</span><span class="err">’</span><span class="n">s</span> <span class="n">reader</span><span class="o">.</span>
</span></code></pre></td></tr></table></div>
// Example 9-6. A server response in PHP
{
    &#8220;success&#8221;: true,
    &#8220;total&#8221;: 500,
    &#8220;results&#8221;: [{
            &#8220;id&#8221;: 1,
            &#8220;brand&#8221;: &#8220;BMW&#8221;,
            &#8220;type&#8221;: 7
        }, {
            &#8220;id&#8221;: 2,
            &#8220;brand&#8221;: &#8220;BMW&#8221;,
            &#8220;type&#8221;: 5
        }
        &#8230;
    ]
}
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>&#8216;<model-field-name>&#8217;, 
groupDir: &#8216;ASC&#8217;<a href="http://xiekunRonaldo.github.io//or">DESC</a><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#### Syncing Data in a Store</span>
</span><span class="line">
</span><span class="line"><span class="no">To</span> <span class="n">save</span><span class="o">/</span><span class="n">synchronize</span> <span class="n">records</span> <span class="k">in</span> <span class="n">a</span> <span class="n">data</span> <span class="n">store</span> <span class="n">with</span> <span class="n">the</span> <span class="n">server</span><span class="p">,</span> <span class="n">you</span> <span class="n">will</span> <span class="n">have</span> <span class="n">to</span> <span class="n">run</span> <span class="n">the</span> <span class="sb">`sync()`</span> <span class="nb">method</span> <span class="n">on</span> <span class="n">the</span> <span class="n">store</span><span class="o">.</span> <span class="no">It</span><span class="err">’</span><span class="n">s</span> <span class="n">also</span> <span class="n">possible</span> <span class="n">to</span> <span class="n">automatically</span> <span class="n">sync</span> <span class="n">the</span> <span class="n">store</span> <span class="n">with</span> <span class="n">the</span> <span class="n">server</span> <span class="n">side</span><span class="o">.</span> <span class="no">That</span> <span class="n">way</span><span class="p">,</span> <span class="n">the</span> <span class="n">remote</span> <span class="n">server</span> <span class="n">keeps</span> <span class="k">in</span> <span class="n">close</span> <span class="n">sync</span> <span class="n">with</span> <span class="n">your</span> <span class="no">Sencha</span> <span class="no">Touch</span> <span class="n">app</span><span class="o">.</span> <span class="no">You</span> <span class="n">can</span> <span class="n">enable</span> <span class="n">this</span> <span class="n">by</span> <span class="n">setting</span> <span class="n">the</span> <span class="sb">`autoSync`</span> <span class="n">property</span> <span class="n">to</span> <span class="sb">`true`</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="no">More</span> <span class="n">likely</span><span class="p">,</span> <span class="n">you</span> <span class="n">will</span> <span class="n">use</span> <span class="n">the</span> <span class="no">Ext</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">Store</span><span class="o">.</span><span class="n">sync</span><span class="p">()</span> <span class="nb">method</span> <span class="n">to</span> <span class="n">synchronize</span> <span class="n">the</span> <span class="n">store</span> <span class="n">with</span> <span class="n">its</span> <span class="n">proxy</span> <span class="ss">programmatically</span><span class="p">:</span>
</span></code></pre></td></tr></table></div>
store.sync(options);
&#8220;`
Before the sync process, Sencha Touch will fire a `beforesync` system event. When you run the sync() method, all inserts, updates, and deletes are sent as three separate requests, and if you want, you can declare the order in which the three operations should occur. After the sync process, an object is returned with the child objects `added, updated, and removed`.
</model-field-name></span></figcaption></figure></notextile></div></model-field-name></span></figcaption></figure></notextile></div></model-field-name></span></figcaption></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Connections (Server Proxies)]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/07/remote-connections-server-proxies/"/>
    <updated>2014-10-07T11:09:16+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/07/remote-connections-server-proxies</id>
    <content type="html"><![CDATA[<p>Models and stores can load and save data via a so-called <code>proxy</code>. Sencha Touch has two main types of proxies: <code>client proxies</code> and <code>server proxies</code>. Client proxies save and load their data locally. Server proxies interact with a remote server.You can read more about client proxies and saving data offline (with techniques such as Local Storage, Session Storage, Web SQL, and AppCache) in Chapter 10. In this chapter, I will talk about the different kinds of server proxies.</p>

<p>A server proxy communicates by sending requests to some remote server. There are four types of server proxies you can use out of the box:</p>

<ul>
  <li>
    <p>Ext.data.proxy.Ajax</p>

    <p>Sends a request to the server on the <code>same domain</code> by using — you guessed it — AJAX.</p>
  </li>
  <li>
    <p>Ext.data.proxy.JsonP</p>

    <p>Sends a request to a server on a different domain by using JSON with padding (JSONP).</p>
  </li>
  <li>
    <p>Ext.data.proxy.Rest</p>

    <p>A kind of AJAX proxy that automatically maps to four readable actions, the RESTful HTTP verbs: create, read, update, and destroy.</p>
  </li>
  <li>
    <p>Ext.data.proxy.Direct</p>

    <p>Uses the Ext.Direct technology (originally created for Ext JS) to remote server-side methods to the client side. Ext.Direct allows communication between the client side of a Sencha app and all popular server platforms.</p>
  </li>
</ul>

<p>Let’s implement the two most used server proxies for receiving data: the AJAX proxy and the JSONP proxy. We’ll also discuss how to communicate with a server without using a proxy, by making AJAX and JSONP requests.</p>

<p>For the FindACab app, you will implement a JSONP proxy to retrieve TaxiServices data for a certain location from an external web server (Yelp.com).</p>

<p>In this chapter, you’ll learn about:</p>

<ul>
  <li>
    <p>Saving or retrieving data from the same domain with AJAX</p>

    <p>How to implement AJAX proxies </p>

    <p>How to implement an AJAX request</p>
  </li>
  <li>
    <p>Retrieving data from an external domain with JSONP</p>

    <p>How to implement JSONP proxies </p>

    <p>How to implement a JSONP request</p>
  </li>
  <li>
    <p>Saving or retrieving data from an external domain with AJAX</p>

    <p>How to implement <code>CORS</code></p>
  </li>
</ul>

<h4 id="saving-or-retrieving-data-from-the-same-domain-with-ajax">Saving or Retrieving Data from the Same Domain with AJAX</h4>

<h5 id="implementing-ajax-proxies">Implementing AJAX Proxies</h5>

<p>At the top of your model or store class, you will require Ext.data.proxy.Ajax, so the Ext.Loader knows to load the AJAX proxy framework class first. Next, you will create a proxy object:</p>

<p><code>
config: {
	//model or store configs here
	proxy: {
		type: 'ajax',
		url: 'data/data.json' 
	}
}
</code>
The proxy object can be set into the config object from a store or a model</p>

<p>The URL can point to a web service URL, or it can just point to some file <code>locally</code>. In Example 8-1, an AJAX proxy was used to load the local file, /data/data.json, which is in the same web folder as the app folder.</p>

<p>You can set a proxy object and it will load the data. To let the proxy understand (read) the data, you can set a reader object (Ext.data.reader.Reader).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">proxy: {
	type: 'ajax',
	url: 'data/data.json', 
	reader: {
		type: 'json',
		rootProperty: 'results' 
	}
}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Note the steps to set up the reader object:</p>

<ul>
  <li>First, set up a type. There are two types of data responses that the reader can interpret: json and xml.</li>
  <li>Define the rootProperty. It points to the root node of your data, from where it has to start reading the data.</li>
</ul>

<p>There are more configs you can set in Ext.data.reader.Reader. The ones I use regularly are:</p>

<ul>
  <li>
    <p>successProperty</p>

    <p>Should point to the response property with a success attribute (by default, it points to the property name success).</p>
  </li>
  <li>
    <p>messageProperty</p>

    <p>Should point to the response property with a response message (this property is optional).</p>
  </li>
  <li>
    <p>totalProperty</p>

    <p>Should point to the response property with a total number of records in the dataset. This is required only while paging, when the whole dataset is not passed in one go, but is being paged from the remote server (by default, it points to the property name total).</p>
  </li>
</ul>

<p>Let’s take a look at the FindACab app in Example 8-1. Here I retrieve data from the same domain into the store by setting an AJAX proxy into the data store.</p>

<p><code>
Ext.define('FindACab.store.Cabs', {
    extend: 'Ext.data.Store',
    requires: ['Ext.data.proxy.Ajax'],
    config: {
        model: 'FindACab.model.Cab',
        autoLoad: true,
        proxy: {
	        type: "ajax",
	        url : "data/data.json",
	        reader: {
	            type: "json",
	            rootProperty: "businesses"
	        }
	    },
    }
});
</code>
Sometimes when you want to retrieve data from an external server, the response data is just not what you expected. For example, you want to reorder, cache, or rename properties, or you just want to add more data or maybe you don’t have control over the remote server to provide JSONP. In these cases, an AJAX proxy can be really handy. You can create an own “proxy” on the server side that connects to the external server and fetches the data. When it is retrieved on the server side, you modify the response. This custom proxy script is running on the same server as your app does, so you can hook it up with a Sencha Touch AJAX proxy back to the Sencha Touch data store. In PHP, such a scenario might look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;? php
</span><span class="line">
</span><span class="line">function URL_get_contents($URL) {
</span><span class="line">    if (!function_exists('cURL_init')) {
</span><span class="line">        die('CURL is not installed!');
</span><span class="line">    }
</span><span class="line">    $ch = cURL_init();
</span><span class="line">    cURL_setopt($ch, CURLOPT_URL, $URL);
</span><span class="line">    cURL_setopt($ch, CURLOPT_RETURNTRANSFER, true);
</span><span class="line">    $output = cURL_exec($ch);
</span><span class="line">    $httpCode = cURL_getinfo($ch, CURLINFO_HTTP_CODE); //get the code of request
</span><span class="line">    cURL_close($ch);
</span><span class="line">    if ($httpCode == 400) return 'Bummer';
</span><span class="line">    if ($httpCode == 200) {
</span><span class="line">        $data = json_decode($output); // do some fancy stuff here $data = json_encode($data);
</span><span class="line">        header('Content-Type: application/json');
</span><span class="line">        echo $data;
</span><span class="line">    }
</span><span class="line">} 
</span><span class="line">?&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Retrieving data through AJAX proxies can be handy. The data is directly in your store, which is great for the data-bind components that connect to a store, such as the <code>Ext.List</code>
Sometimes you don’t need to retrieve data through a proxy. Maybe you don’t want to display the data results into a data-aware component, or you just don’t need a model or a store. Other times, the proxy is already in use by a client proxy (you can set just one proxy per model or store),Although in such a scenario you could also switch proxies with setProxy on the model or store, you can also choose to make plain AJAX requests. I will discuss this option next.</p>

<h4 id="implementing-an-ajax-request">Implementing an AJAX Request</h4>
<p>In the previous section, we retrieved data in a store via an AJAX proxy. Sometimes you don’t need to save or retrieve data in a store, maybe because you are not displaying the data in a data-aware component, such a as an XTemplate,n that case, a simple Ext.Ajax request, with parameters to pass in, might be an easier solution for saving and retrieving data on the same domain than hooking up an AJAX proxy to a store.</p>

<p>At the top of your class you will require Ext.Ajax, so the Ext.Loader knows to load the AJAX framework class first. Next you will create the request:</p>

<p><code>
Ext.Ajax.request({
            url: 'somescript.php',
            timeout: 60000,
            method: 'POST',
            params: {
                location: 'Amsterdam NL'
            },
            success: function(response){
                //remove loading mask
                Ext.Viewport.unmask();
                try {
                    var text = response.responseText;
                    var results = Ext.JSON.decode(text);
                    console.log(results.businesses);
                } catch (e) {
                    //you can never assume that data is the way you want.
                    console.error(e);
                }
            },
            failure: function(e){
                //remove loading mask
                Ext.Viewport.unmask();
                console.error(e);
            }
        });
</code>
Ext.Ajax is a singleton instance of an Ext.data.Connection, which is the class that is used to communicate with server-side code.</p>

<p><code>XHR2, NEW IN SENCHA TOUCH 2.3</code></p>

<p>A new config setting, released in Sencha Touch 2.3, is to set up your AJAX request through the XHR2 (AJAX2) object. You will just need to enable the boolean property xhr2:true in the request object. XMLHttpRequest Level 2 is like XHR but with a huge makeover that allows you to do things like uploading progress events (Sencha Touch 2.3 also has a new progressbar component, Ext.ProgressIndicator!) and support for uploading/downloading binary data.
Check out “<a href="http://bit.ly/xmlhttprequest2">New Tricks in XMLHttpRequest2</a>” and <a href="http://docs.sencha.com/touch/2.3.1/#!/guide/xhr2_guide">“XHR2 Uploads and Downloads”</a> to get more information about XHR2.</p>

<p>Sometimes you don’t have access to the source — for example, because the script is hosted on an external website. In the case of the FindACab app, we want it to receive data from Yelp.com. The next part discusses the tricks to retrieve data from an external domain.</p>

<h4 id="retrieving-data-from-an-external-domain-with-jsonp">Retrieving Data from an External Domain with JSONP</h4>

<p>While AJAX in general cannot send and retrieve data from an external domain because of the cross-domain policy, JSONP can send and retrieve data from an external domain. It <code>only</code> uses HTTP <code>GET</code> and therefore cannot use HTTP <code>POST</code> to post (large) data to an external domain</p>

<p>In other words, you can send data, but it’s sent in the query string rather than the request body,sending data through GET is less secure than over POST because the data that will be sent is part of the URL. So it’s visible in the <code>browser history</code> or in <code>server logfiles</code>.</p>

<p>It is impossible to request or send data to external domains because of the same-origin policy; the browser ignores any connection, assuming nobody else is allowed. JSONP works differently; it’s a little like a magic trick — one that is well known.</p>

<p>Under the hood, it works as follows (again, see Figure 8-2):</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure8-2.png" /></p>

<h4 id="implementing-jsonp-proxies">Implementing JSONP Proxies</h4>

<p>The JSONP proxy works only when the server supports JSONP or when you have control over the server. Also, this trick can only send and retrieve data via GET requests.</p>

<p><code>
proxy: {
    type: 'jsonp',
    URL: 'http://externaldomain.com/users',
    reader: {
        type: 'json',
        rootProperty: 'results'
    }
}
</code></p>

<h4 id="implementing-the-jsonp-proxy-for-the-findacab-app">Implementing the JSONP Proxy for the FindACab App</h4>

<p>Did you notice that the fields of the business object in the previous JSON response have the same names as the fields from the Sencha FindACab.model.Cab model? These fields map to the model fields, so you can later use them in your code. What if the JSON response has a slightly different name than the name that is defined in the model? You can either change the model field name, or you can add a mapping property to the model field.</p>

<p>For example, when you have a complex data feed that looks like this (note the
car:brand: notation):</p>

<p><code>
{
    results: [
        car: brand: [{
            name: "BMW",
            series: 7
        }, {
            name: "BMW",
            series: 5
        }]
        ...
    }
</code></p>

<p>You can add a mapping attribute to the field. In this case, brand maps to <code>["car:brand"][0].name:</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define("MyApp.model.Car", {
</span><span class="line">    extend: "Ext.data.Model",
</span><span class="line">    config: {
</span><span class="line">        fields: [{
</span><span class="line">            name: "brand"
</span><span class="line">            mapping: "['car:brand'][0].name"
</span><span class="line">        }]
</span><span class="line">    }
</span><span class="line">});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>JSONP request</p>

<p><code>
Ext.define('FindACab.store.Cabs', {
    extend: 'Ext.data.Store',
    requires: ['Ext.data.proxy.JsonP'],
    config: {
        model: 'FindACab.model.Cab',
        autoLoad: true,
        proxy: {
            type: 'jsonp',
            noCache: false,
            url: FindACab.utils.Commons.Commons.YELP_API,
            extraParams: {
                term: FindACab.utils.Commons.YELP_TERM,
                ywsid: FindACab.utils.Commons.YELP_KEY,
                location: FindACab.utils.Commons.LOCATION
            },
            reader: {
                type: 'json',
                rootProperty: 'businesses',
            }
        },
    }
});
</code>
Instead of using the proxy for a JSONP request, you can also use the Ext.data.JsonP method, which you will do in the next section.</p>

<h4 id="implementing-a-jsonp-request">Implementing a JSONP Request</h4>
<p>View components — like lists, dataviews, or charts — are data-aware. You need to hook up a data store to preview the view with data. The previous section explained how to <code>retrieve</code> external data from Yelp in a data store. Later, this data will be displayed in an <code>Ext.dataview.List</code> view component,When retrieving external data, sometimes you don’t need to retrieve data in a store — for example, when you’re displaying data in an <code>Ext.XTemplate</code> (or another component that isn’t data-aware) – because you want to have the control over the HTML and styling of the component.In that case, a simple Ext.JsonP request, with parameters to pass in, might be an easier solution for retrieving data from an external domain than retrieving it through a JSONP proxy.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.data.JsonP.request({
</span><span class="line">            url: 'somescript.php',
</span><span class="line">            callbackKey: 'callback',
</span><span class="line">            params: {
</span><span class="line">                location: "Amsterdam NL"
</span><span class="line">            },
</span><span class="line">            success: function(response, request){
</span><span class="line">                //remove loading mask
</span><span class="line">            },
</span><span class="line">            failure: function(e){
</span><span class="line">                //remove loading mask
</span><span class="line">            }
</span><span class="line">        });</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Saving or Retrieving Data from an External Domain with AJAX</p>

<p>You want to post (or get) data from an external domain, but posting data is only possible with AJAX, not with JSONP. JSONP cannot send data with HTTP POST, and AJAX in general cannot retrieve and post data from external domains so you might run into a problem. What you actually want is an AJAX request to save and retrieve data to an external domain. Read on for the trick to this.</p>

<h5 id="implementing-cors">Implementing CORS</h5>

<p>You will need to set up Access-Control-Allow HTTP headers on the web server to post (and retrieve) data with AJAX to an external URL.</p>

<p>Sencha Touch provides additional configuration. In an Ext.Ajax.request or AJAX proxy, you have to set the withCredentials boolean to true and set the useDefaultXhrHeader boolean to false to not send the default Xhr header with every request.</p>

<p>Sencha Touch provides additional configuration. In an Ext.Ajax.request or AJAX proxy, you have to set the withCredentials boolean to true and set the useDefaultXhrHeader boolean to false to not send the default Xhr header with every request.</p>

<p>The Ext.Ajax() method (and also the model.save() and form.submit() methods) transmit through the XMLHttpRequest() object, and therefore you can run into security restrictions — cross-domain restrictions — when posting to a different domain. However, there is a way to post data to another server with AJAX; you need to set up your server so it’s possible to set up the HTTP headers (Access-Control-Allow headers) on the web server for that. This technique is called cross-origin resource sharing (CORS), and it enables you to override the default restrictions that prevent a web server from making AJAX requests to domains other than where the app is launched. CORS is supported by the modern browsers.</p>

<p>An example of such an HTTP header might look like:</p>

<p><code>
Access-Control-Allow-Origin: *
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Models]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/07/data-models/"/>
    <updated>2014-10-07T08:49:56+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/07/data-models</id>
    <content type="html"><![CDATA[<p>Every field can be given a data type,When no datatype is specified, the datatype will be set to auto, which means there is no datatype conversion at all. This might be a solution for complex datatypes such as objects.</p>

<p>Models may contain (optional) validations and associations (relations to other models). Both models and stores can have a proxy to send and retrieve data in JSON, XML, or JavaScript array notation.</p>

<p>本章，我们将学习以下知识点</p>

<ul>
  <li>How to validate a model</li>
  <li>How to save a model to the server </li>
  <li>How to implement a model association</li>
</ul>

<h4 id="validating-a-model">Validating a Model</h4>
<p>In the model config object, you can set a validations array. This array contains validation objects:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">validations: [
</span><span class="line">	{type:'presence', field: 'age'},
</span><span class="line">	{type:'length', field:'name', min: 2},
</span><span class="line">	{type:'inclusion', field:'gender', list:['Male', 'Female']},
</span><span class="line">	{type:'exclusion, field:'username', list:['Admin', 'Operator']},
</span><span class="line">	{'format', field:'username', matcher: /([a-z]+)[0-9]{2,3}/}
</span><span class="line">]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>As you can see, there are different validation types. For example, you can validate fields on presence (if the data exists), on length (if a string has a min or max length of characters), inclusion (if the data string exists in a given list array), exclusion (if the data string does not exist in a given list array), and on format (if the data matches a regular expression, matcher).</p>

<p>Let’s test this. Open the FindACab app in your modern browser. In your debug console, you can enter the code for creating a new model instance:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var setting = Ext.create('FindACab.model.Setting', { city: "Amsterdam"});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Now you can validate your record with the following command in your console:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">setting.validate();</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Saving a Model to the Server
We will use a simple Car model that looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('SaveTest.model.Car', {
</span><span class="line">	extend: 'Ext.data.Model',
</span><span class="line">
</span><span class="line">	config: {
</span><span class="line">		fields: [
</span><span class="line">			{ name: 'id', type: 'int'},
</span><span class="line">			{ name: 'brand'},
</span><span class="line">		],
</span><span class="line">		proxy: {
</span><span class="line">            type: 'rest',
</span><span class="line">            //url : '/cars',
</span><span class="line">		    format: 'php', 
</span><span class="line">		    api: {
</span><span class="line">		        create: 'cars/addcar',
</span><span class="line">		        update: 'cars/editcar',
</span><span class="line">		        read: 'cars/loadcar',
</span><span class="line">		        destroy: 'cars/deletecar'
</span><span class="line">		    }	
</span><span class="line">        }
</span><span class="line">	}
</span><span class="line">});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>接下来做一些测试</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var car = Ext.create('SaveTest.model.Car', {
</span><span class="line">    brand: 'Mercedes'
</span><span class="line">});
</span><span class="line">
</span><span class="line">//save = POST method
</span><span class="line">car.save({
</span><span class="line">    success: function() {
</span><span class="line">        console.log('The car record is saved');
</span><span class="line">    },
</span><span class="line">    failure: function(){
</span><span class="line">        console.log('The car record could not be saved.');
</span><span class="line">    }
</span><span class="line">});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Once you’ve created a record, you can save it to the server side with record.save():</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">car.save({</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In order to load data from the server side via the model, you can use record.load(id, callback). When there is no store available, the trick is to first request the model via the ModelManager:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.ModelManager.getModel('SaveTest.model.Car').load(1, { 
</span><span class="line">	success: function(car) {
		console.log("Load Car: " + car.getId()); },
	failure: function(){
		console.log("The car could not be loaded");
	} 
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>Note</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">When you set the proxy type to ajax instead of rest, you can still use readable URLs. The only
</span><span class="line">difference is the HTTP method. Adding, editing, and removing records will be an HTTP POST call.Loading records will be an HTTP GET call.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Cross-Domain Restrictions
The record.save() method (as well as the Ext.Ajax and form.submit() methods) transmit through the <code>XMLHttpRequest()</code> object, and therefore you might face security restrictions when posting to a different domain. These are known as <code>cross-domain restrictions</code>.</p>

<p>However, there is a way to save and post data to another server. It requires setting up special HTTP headers (<code>Access-Control-Allow headers</code>) on the web server. This technique is called <code>CORS</code> (cross-origin resource sharing), and it enables you to override the default restrictions that prevent a web server from making AJAX request to other domains. For more information, see Chapter 8 and the AJAX sections of this book, or check out the HTML5 Rocks website.</p>

<p>Models can also have relationships with other models. For example, a User model can have a relationship with multiple Order models, and one Order model can have just one relationship with one payment method.</p>

<h4 id="implementing-a-model-association">Implementing a Model Association</h4>
<p>Models can have relationships with one or more other models. The following model associations can request data through each other:</p>

<ul>
  <li>Ext.data.association.HasOne </li>
  <li>Ext.data.association.HasMany </li>
  <li>Ext.data.association.BelongsTo
You can create two or more models and connect these to each other with the hasMany, hasOne, and belongsTo configs:</li>
</ul>

<p>&#8220;`
Ext.define(‘TaxiService’, { 
	extend: ‘Ext.data.Model’,
	config: {
		fields: [‘id’, ‘name’], 
		hasMany : {
			model: ‘Car’, name: ‘cars’ }
	} </p>

<p>});</p>

<p>Ext.define(‘Car’, {
	extend: ‘Ext.data.Model’,
	config: {
		fields: [‘id’, ‘brand’]
	} 
});
&#8220;`
When you want to use associations, you have to add these to the requires array at the top of your model class:</p>

<p><code>
requires: [ 
	'Ext.data.association.HasOne', 
	'Ext.data.association.BelongsTo', 
	'Ext.data.association.HasMany'
]
</code>
<img src="http://xiekunRonaldo.github.io/images/2014/10/figure7-3.png" /></p>

<p>When you want to display the different brands of Cars per TaxiService, you could express the relationships between both models. One TaxiService may contain many different types of Car records. You can define this relationship by specifying the hasMany property into the TaxiService model, so later you can request Car information via the TaxiService model.</p>

<p>You will need a foreignKey on the owner model that links to the associated model. By default, it takes the lowercase name of the owner model plus _id. For example, the TaxiService model would create taxiservice_id as the foreign key.</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure7-4.png" /></p>

<p>&#8220;`</p>

<p>//Example 7-2
Ext.define(‘AssociationsTest.model.TaxiService’, {
    extend: ‘Ext.data.Model’,</p>

<pre><code>requires: ['Ext.data.association.HasMany'],

config: {
    fields: ['id', 'name'],
    hasMany  : { //&lt;1&gt;
    	model: 'AssociationsTest.model.Car', //&lt;2&gt;
    	name: 'cars', //&lt;3&gt;
    	foreignKey: 'taxiservice_id' //&lt;4&gt;
    }
} }); ```
</code></pre>

<p>As with every relationship, their connection can be confirmed; the Car model answers its relationship by confirming it belongsTo the TaxiService model. This belongsTo association allows me to request the TaxiService information via the Car model.</p>

<p>&#8220;`
//Example 7-3. model/Car.js
Ext.define(‘AssociationsTest.model.Car’, {
    extend: ‘Ext.data.Model’,
    requires: [‘Ext.data.association.BelongsTo’],
    config: {
        fields: [{
            name: ‘id’, //&lt;1&gt;
            type: ‘int’
        }, {
            name: ‘brand’
        }, {
            name: ‘taxiservice_id’,
            type: ‘int’ //&lt;2&gt;
        }],
        belongsTo: {
            model: ‘AssociationsTest.model.TaxiService’
        }
    }
});</p>

<p>&#8220;`</p>

<p>And now comes the fancy stuff: requesting all the records that have a relationship through the parent model. As covered in Chapter 6, many records are saved in a store — the set of all records together. When specifying the hasMany association, you will point to the relating hasMany model and set a name (cars). The association will dynamically create a <code>virtual store</code> and the name that is set in the association will become the store name. You can call this store by running the <code>cars()</code> method on the TaxiService model. Remember, creating a store will not autoload the data, so you will need to <code>load()</code> the virtual store manually.</p>

<p>Let’s take a look at the next code snippets. First, create two TaxiService records, each of which will contain Car records. A TaxiService model has a hasMany relationship with the Car model:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var taxiAmsterdam = Ext.create('AssociationsTest.model.TaxiService', { 
</span><span class="line">	id: 1,
	name: 'Taxi Amsterdam' 
</span><span class="line">});
var yellowCab = Ext.create('AssociationsTest.model.TaxiService', { 
	id: 2,
	name: 'Yellow Cab' 
</span><span class="line">});
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The Car records know that they belong to the TaxiService parent model (see previous code) because of the <code>belongsTo</code> relation (in Example 7-3). It has a property, <code>model</code>, that points (belongs) to the <code>TaxiService</code> model. The TaxiService model has a hasMany relationship to the Car model and it has a property: foreignKey (again, see Example 7- 2).</p>

<p>Now let’s create some Car records:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var bmw = Ext.create('AssociationsTest.model.Car', { 
</span><span class="line">	id: 1,
	brand: 'BMW' 
</span><span class="line">});
</span><span class="line">
var mercedes = Ext.create('AssociationsTest.model.Car', { 
	id: 2,
	brand: 'Mercedes' 
</span><span class="line">});
</span><span class="line">
var vw = Ext.create('AssociationsTest.model.Car', { 
	id: 3,
	brand: 'Volkswagen' 
</span><span class="line">});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>To get access to all the Car records from the TaxiService record, you can call the cars() method to create a virtual store:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var taxiAmsterdamStore = taxiAmsterdam.cars(); 
</span><span class="line">var yellowCabStore = yellowCab.cars();</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The add() and sync() lines in the next piece of code just add the particular Car records to each TaxiService store. You will read more about stores in the next two chapters:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//add new cars to the Store
taxiAmsterdamStore.add(mercedes); 
taxiAmsterdamStore.add(vw);
</span><span class="line">taxiAmsterdamStore.sync(); 
</span><span class="line">
</span><span class="line">yellowCabStore.add(bmw); 
</span><span class="line">yellowCabStore.sync();
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>To request the TaxiService data from a Car record (and to test the belongsTo relation), you can use the autogenerated getter getTaxiService(). Now, let’s request the TaxiService data for the first record in the taxiAmsterdamStore:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">console.log(taxiAmsterdam.cars().first().getTaxiService());</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Remote Associations
You can also request Car records from the server side. To do so, you would need to add a remote proxy to the Car model:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">proxy: {
	type: 'ajax',
	reader: {
	rootProperty: 'cars'
	},
	url: 'app/data.php' 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>After you add the records and sync the taxiAmsterdamStore and yellowCabStore, this proxy will <code>POST</code> the messages shown in Examples 7-4 and 7-5 to <code>app/data.json</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Example 7-4. taxiAmsterdam
{cars: [{id:1, brand:BMW, taxiservice_id:1}, {id:2, brand:BMW, taxiservice_id:1}]} 
</span><span class="line">
Example 7-5. yellowCab
{cars: [{id:1, brand:BMW, taxiservice_id:2}]}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>On your server side, you could code a script that takes these objects and adds them to a
database.</p>

<p>When you want to load data from the remote, you can run the following command:</p>

<p><code>
taxiAmsterdamStore.load(function(records){ 
	console.log(records);
});
</code>
Here, you are loading data into the taxiAmsterdamStore, which has a model with associations hooked up. Therefore, it will fire a GET request, with the following parameters:</p>

<p><code>
filter:[{"property":"taxiservice_id", "value": 1}]
</code>
<code>TIP</code></p>

<p><code>
When the remote store is loaded, the store is automatically filtered so that only records with a matching foreign key are included in the resulting child store. You can override this by specifying the filterProperty.
</code>
On your server side, you could code a script that filters for the taxiservice_id with the value set to 1. The data returned for this request from the server might look like the following example, which is written in PHP:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;? php
</span><span class="line">//Return response as JavaScript header('Content-Type: application/javascript'); echo '{
</span><span class="line">"cars": [{
</span><span class="line">    "id": 1,
</span><span class="line">    "brand": "BMW",
</span><span class="line">    "taxiservice_id": 1
</span><span class="line">}, {
</span><span class="line">    "id": 2,
</span><span class="line">    "brand": "Mercedes",
</span><span class="line">    "taxiservice_id": 1
</span><span class="line">}]
</span><span class="line">}'; 
</span><span class="line">?&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The FindACab app will not display the different brands of cars, which is why you won’t implement any model associations. That is because you will use the Yelp API to provide data about taxi businesses. It will not supply information about car brands like the previous examples did.</p>

<p><code>TIP</code></p>

<p>If you want to read more about associations, check out <a href="http://appointsolutions.com/2012/07/using-model-associations-in-sencha-touch-2-and-ext-js-4/">Rob Boerman’s great tutorial</a> and<a href="http://miamicoder.com/2012/sencha-touch-2-models-hasmany-associations-php-example/">MiamiCoder’s tutorial</a>with PHP server-side code</p>

<h4 id="summary">Summary</h4>

<p>The Sencha data package contains the three key classes <code>Ext.data.Model</code>, <code>Ext.data.Record</code>, and <code>Ext.data.Store</code>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Layout System]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/06/the-layout-system/"/>
    <updated>2014-10-06T09:55:37+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/06/the-layout-system</id>
    <content type="html"><![CDATA[<p>In Sencha Touch there are two basic building blocks: <code>components</code> and <code>containers</code>.When you instantiate both with no configuration, they look the same. However, there is one important difference: containers can contain components (or other containers):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var container = Ext.create('Ext.Container', { 
</span><span class="line">	items: [{
		xtype: 'component',
		html: 'Nested component' 
	}, {
		xtype: 'container', 
		items: [{
			xtype: 'component',
			html: 'Nested container with component' 
		}]
	}] 
});
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Usually when containers hold other components, you want to think about how to position these multiple components. Maybe you want to position the components on top of each other, or maybe next to each other. In other words, you want to give the container a <code>layout</code>.</p>

<p>Under the hood, Sencha Touch uses the CSS3 <a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/">flexbox layout</a>.</p>

<p>Ext.Component is the base class for any Sencha Touch view component (widget). Ext.Container is the base class for any Sencha Touch component that may visually contain other components. The most commonly used container classes for Sencha Touch are Ext.Panel, Ext.tab.Panel, and Ext.form.Panel</p>

<p>本章中我们将学习到以下知识点</p>

<ul>
  <li>How to implement a horizontal layout </li>
  <li>How to implement a vertical layout</li>
  <li>How to implement a full screen (fit) layout </li>
  <li>How to implement a card layout</li>
  <li>How to implement the default layout (no layout) </li>
  <li>How to dock components</li>
</ul>

<h4 id="implementing-a-horizontal-layout">Implementing a Horizontal Layout</h4>

<p>When you want to position components horizontally, use the horizontal box layout. The layout type hbox positions items next to each other.</p>

<p>At the top of your container view class, you will require Ext.layout.HBox, so the Ext.Loader knows to load the hbox framework class first. Next, you will create a layout object that sets the type to hbox. Follow up by creating an array with items; this array can contain all the items that need to be positioned next to each other. Here’s the full example:</p>

<p><code>
Ext.define('MyApp.view.MainInterface', { 
	extend: 'Ext.Container',
	requires: ['Ext.layout.HBox'], 
	layout: {
		type: 'hbox', 
	},
	items: [{
		xtype: 'component', 
		html: 'box 1'
	},{
		xtype: 'component', 
		html: 'box 2'
	}] 
});
</code></p>

<p>You can set the <code>align</code> config to position items <code>vertically</code> on the screen. The options for the align config are start (top), center (middle), end (bottom), and stretch. The last option stretches a component to give it the full container height. Then there is the <code>pack</code> config — start (left), center (middle), and end (right) — which positions the set of items <code>horizontally</code> on the screen.</p>

<p>Here are some of the hbox layouts, each of which is followed by its corresponding illustration </p>

<p><code>
layout: {
	type: 'hbox',
	align: 'start',
	pack: 'start' 
},
items: [{
	xtype: 'component', 
	html: 'width: 150',
	width: 150
},{
	xtype: 'component', 
	html: 'width: 150',
	width: 150
}]
</code>
<img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-1.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: {
	type: 'hbox',
	align: 'center',
	pack: 'center' 
</span><span class="line">
},
items: [{
	xtype: 'component', 
	html: 'width: 150',
	width: 150
}, {
	xtype: 'component',
	html: 'width: 150',
	width: 150 
}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-2.png" /></p>

<p><code>
layout: {
	type: 'hbox',
	align: 'center',
	pack: 'end' 
},
items: [{
	xtype: 'component', 
	html: 'width: 150',
	width: 150
},{
	xtype: 'component', 
	html: 'width: 150',
	width: 150
}]
</code>
<img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-3.png" /></p>

<p><code>
layout: {
	type: 'hbox',
	align: 'end',
	pack: 'start' 
},
items: [{
	xtype: 'component', 
	html: 'width: 150',
	width: 150
},{
	xtype: 'component',
	html: 'width: 150'
	width: 150 
}]
</code>
<img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-4.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: {
	type: 'hbox',
	align: 'stretch',
	pack: 'start' 
},
items: [{
	xtype: 'component', 
	html: 'width: 150',
</span><span class="line">	width: 150
},{
	xtype: 'component',
	html: 'width: 150',
	width: 150 
}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-5.png" /></p>

<p>The preceding examples used a width config for every item. When you want more dynamic sizes, you can use the flex config. Flexing means that you divide the available area based on the flex of each child component. The next example, illustrated in Figure 5-6, shows a horizontal flex layout:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: {
	type: 'hbox',
},
items: [{
	xtype: 'component', 
	flex: 2,
	html: 'flex: 2',
},{
	xtype: 'component', 
	flex: 1,
	html: 'flex: 1',
}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-6.png" /></p>

<p>Now let’s say you have three items. The first item has flex: 2, the second item has flex:1, and the third item has a fixed pixel width, width: 100px. How will the layout be calculated? First, the 100px will be subtracted from the 100%. The remainder will be divided into two-thirds and one-third .</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: {
</span><span class="line">	type: 'hbox', 
</span><span class="line">},
items: [{
	xtype: 'component', 
	flex: 2,
	html: 'flex: 2',
},{
	xtype: 'component', 
	flex: 1,
	html: 'flex: 1',
},{
	xtype: 'component', 
	width: 100,
	html: 'width: 100'
}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-7.png" />
#### Implementing a Vertical Layout
At the top of your container view class, you will require Ext.layout.VBox, so the Ext.Loader knows to load the vbox framework class first. Next, you will create a layout object that sets the type to vbox.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('MyApp.view.MainInterface', { 
</span><span class="line">	extend: 'Ext.Container',
	requires: ['Ext.layout.VBox'], 
</span><span class="line">
	layout: {
		type: 'vbox', 
	},
	items: [{
		xtype: 'component', 
		html: 'box 1'
	},{
		xtype: 'component', 
		html: 'box 2'
	}] 
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can set the <code>align</code> config to position items <code>horizontally</code> on the screen. The options for the align property are start (left), center (middle), end (right), or stretch. The last option stretches a component to give it the full container width. Then there is the <code>pack</code> property — start (top), center (middle), and end (bottom) — which positions the set of items <code>vertically</code> on the screen.
来看几个demo</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: {
	type: 'vbox',
	align: 'start',
	pack: 'start' 
},
items: [{
	xtype: 'component', 
</span><span class="line">	html: 'height: 50',
</span><span class="line">	height: 50
},{
	xtype: 'component', 
	html: 'height: 50',
	height: 50
}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-8.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: {
	type: 'vbox',
	align: 'center',
	pack: 'center' 
},
items: [{
	xtype: 'component', 
	html: 'height: 50',
	height: 50
},{
	xtype: 'component', 
	html: 'height: 50',
	height: 50
}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-9.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: {
	type: 'vbox',
	align: 'center',
	pack: 'end' 
},
items: [{
	xtype: 'component', 
	html: 'height: 50',
	height: 50
},{
	xtype: 'component', 
	html: 'height: 50',
	height: 50
}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-10.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: {
	type: 'vbox',
	align: 'end',
	pack: 'start' 
},
items: [{
	xtype: 'component', 
</span><span class="line">	html: 'height: 50',
</span><span class="line">	height: 50
},{
	xtype: 'component', 
	html: 'height: 50',
	height: 50
}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-11.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: {
	type: 'vbox',
	align: 'stretch',
	pack: 'center' 
},
items: [{
	xtype: 'component', 
</span><span class="line">	html: 'height: 50',
</span><span class="line">	height: 50
},{
	xtype: 'component', 
</span><span class="line">	html: 'height: 50',
</span><span class="line">	height: 50
}]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-12.png" /></p>

<p>If you want to set a fixed height for one of the items, you use the height config. When you want more dynamic sizes, you use the flex config. Flexing means that you divide the available area based on the flex of each child component. The next example, shows a vertical flex layout:</p>

<p><code>
layout: {
	type: 'vbox',
},
items: [{
	xtype: 'component', 
	html: 'flex: 1', 
	flex: 1
},{
	xtype: 'component', 
	html: 'flex: 3', 
	flex: 3
}]
</code>
<img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-13.png" /></p>

<p>Now let’s say you have three items. The first item has flex: 1, the second item has flex:3, and the third item has a fixed pixel height, height: 50px. How will the layout be calculated? First, the 50px will be subtracted from the 100%. The remainder will be divided into one-quarter and three-quarters:</p>

<p><code>
layout: {
	type: 'vbox',
},
items: [{
	xtype: 'component', 
	html: 'flex: 1', 
	flex: 1
},{
	xtype: 'component', 
	html: 'flex: 3', 
	flex: 3
},{
	xtype: 'component', 
	html: 'height: 50', 
	height: 50
}]
</code></p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-14.png" /></p>

<h4 id="implementing-a-full-screen-fit-layout">Implementing a Full-Screen (Fit) Layout</h4>

<p>When you want to position a component full screen, you use the fit layout. The layout type fit makes a child item fit to the full size of its parent container.</p>

<p><code>
layout: 'fit', items: [{
	html: 'Item 1' 
}]
</code>
At the top of your container view class, you will require Ext.layout.Fit, so the Ext.Loader knows to load the fit framework class first. Next, you will create a layout object that sets the type to fit. Follow up by creating an items array; this array can contain <code>only one</code> item.</p>

<p>&#8220;`
Ext.define(‘MyApp.view.MainInterface’, { 
	extend: ‘Ext.Container’,
	requires: [‘Ext.layout.Fit’], 
	layout: {
		type: ‘fit’, </p>

<pre><code>},
items: [{
	xtype: 'component', 
	html: 'layout: fit'
}]  }); ``` &lt;img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-15.png"&gt;
</code></pre>

<p>The container has a height and width of 400×400 pixels. The nested item (component) takes the full width and height that has been set in the parent container, so it has the same 400×400 pixel dimension.</p>

<p>Here’s another example of the same fit layout. The container has a 400×400px dimension, but this time the nested component has a margin of 25px on each side </p>

<p><code>
layout: {
	type: 'fit',
},
items: [{
	xtype: 'component', 
	margin: 25,
	html: 'layout: fit'
}]
</code>
<img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-16.png" /></p>

<h4 id="implementing-a-card-layout">Implementing a Card Layout</h4>

<p>You can create a more complex layout by using cards. A card layout allows you to fit multiple components in one space, and show <code>only one at a time</code>, just like a stack of cards. To do this, set the layout type to card .</p>

<p>At the top of your container view class, you will require Ext.layout.Card, so the Ext.Loader knows to load the card framework class first. Next, you will create a layout object that sets the type to card. Follow up by creating an array with items; this array can contain all the items that need to be positioned as a stack of cards.</p>

<p><code>
Ext.define('MyApp.view.MainInterface', { 
	extend: 'Ext.Container',
	requires: ['Ext.layout.Card'], 
	layout: {
		type: 'card', 
	},
	items: [{
		xtype: 'component', html: 'card 1'
	},{
		xtype: 'component', html: 'card 2'
	}, {
		html: 'card 3' 
	}]
});
</code>
<img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-17.png" /></p>

<p>This layout has the same visual look as a fit layout; it also takes the size of the container. But there is one important difference with this layout type. When the container contains multiple items, they will be stacked on top of each other, like a deck of cards</p>

<p>With the method setActiveItem(), you can set the item to be displayed at the top of the cards stack. All the other items won’t be visible. Carousels (a Sencha Touch component for cards that you can slide with your fingers) and tabpanels (a Sencha Touch component for cards that you can activate with tabs) both use a card layout.</p>

<p>A nice extra that comes with the card layout is the ability to add an animation while changing the active slide. You can set an animation object with a type and a direction. The supported types are:</p>

<ul>
  <li>slide (Ext.fx.layout.card.Slide) </li>
  <li>fade (Ext.fx.layout.card.Fade) </li>
  <li>cover (Ext.fx.layout.card.Cover) </li>
  <li>reveal (Ext.fx.layout.card.Reveal) </li>
  <li>pop (Ext.fx.layout.card.Pop)</li>
  <li>flip (Ext.fx.layout.card.Flip) </li>
  <li>scroll (Ext.fx.layout.card.Scroll) </li>
  <li>cube (Ext.fx.layout.card.Cube)</li>
</ul>

<p>Here’s an example of how you can include an animation for a page transition in a card layout. Please note the animation subject:</p>

<p><code>
layout: {
	type: 'card',
	animation: {
		type: 'slide',
		direction: 'left' 	
	}
}
</code>
<code>注意</code></p>

<p><code>
Android 2 supports only scroll and fade; otherwise, it forces the animation to slide.
</code></p>

<h4 id="implementing-the-default-layout">Implementing the Default Layout</h4>

<p>When you do not want to set a layout or you want to fall back to the default browser behavior, you can use the default/auto layout.</p>

<p>When you do not specify the layout object, or you set the layout to auto or default, your design will take the Ext.layout.Default layout</p>

<p><code>
Ext.define('MyApp.view.MainInterface', { 
	extend: 'Ext.Container',
	requires: ['Ext.layout.Default'], 
	layout: {
		type: 'auto', 
	},
	items: [{
		xtype: 'component', 
		cls: 'component1',
		html: 'component 1
	},{
		xtype: 'component', 	
		cls: 'component2', 
		html: 'component 2
	}] 
});
</code>
<img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-19.png" /></p>

<p>This layout tiles your elements directly beneath each other. It takes the full available width to fill its parent container unless a width is set. If no height is set, it will expand <code>naturally to fit itself or its child items</code>. It’s the same behavior as how a browser positions block-level elements.</p>

<p><code>Tip</code>
Impressive Webs has a <a href="http://www.impressivewebs.com/difference-block-inline-css/">helpful article</a> about browser block-level elements versus inline-elements.</p>

<p>All other layouts inherit from Ext.layout.Default, and the default layout also supports docking items, which we’ll cover next.</p>

<h4 id="docking-components">Docking Components</h4>
<p>With docking, you can set an item to dock left, top, right, or bottom from its container. A good example is a toolbar that is docked to the top of the screen. (Some people call this a sticky header.)</p>

<p>&#8220;`
Ext.define(‘MyApp.view.MainInterface’, { 
	extend: ‘Ext.Container’,
	items: [{
		docked: ‘top’
		html: ‘docked: top’, </p>

<pre><code>},{
	html: '' 
}] }); ``` &lt;img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-19.png"&gt;
</code></pre>

<p>You must use an <code>HTML5</code> doctype for a docked bottom to work. To do this, simply add the following code to the top of the HTML file: <code>&lt;!doctype html&gt;</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('MyApp.view.MainInterface', { 
</span><span class="line">	extend: 'Ext.Container',
	items: [{
		docked: 'left'
		html: 'docked: left', 
	},{
		html: '' 
	}]
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-21.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('MyApp.view.MainInterface', {
</span><span class="line">	extend: 'Ext.Container', 
</span><span class="line">	items: [{
		docked: 'right'
		html: 'docked: right', 
	},{
		html: '' 
	}]
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/10/figure5-22.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('MyApp.view.MainInterface', { 
</span><span class="line">	extend: 'Ext.Container',
	items: [{
		docked: 'bottom'
		html: 'docked: bottom', 
	},{
		html: '' 
	}]
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Summary
The best way of creating interfaces is by prototyping the application before you implement it in your app. You could do this with code, as with the code snippets in this chapter, or you could use <a href="http://www.sencha.com/products/architect/">Sencha Architect</a>, Sencha’s visual design tool.</p>

<p>The Sencha layout system supports the following layout types: hbox (horizontal box layout), vbox (vertical box layout), fit (take the size of the container layout), card (stacked layout), and default, the browser’s, block-level layout. All of these types have a set of additional configurations, such as <code>align, pack, and animation</code>.</p>

<p>The <code>Ext.Viewport</code> is an instance created when you use Ext.application(). Ext.Viewport extends from Ext.Container, so it has a layout (which defaults to the card layout). This means you can add items to it at any time, from anywhere in your code. The viewport fullscreen configuration is true by default, so it will take up your whole screen, and thus it matches any device to its screen size.</p>

<p>Imagine you would like the main layout for your tablet to be different from that of your phone. Sencha Touch handles this with <code>device profiles</code>, which create different mobile experiences. With a device profile, you can share code (like layouts and views, but also logics and controllers) between device types, to customize the appearance, behavior, or workflows for each device Device profiles can be generated with Sencha Cmd. These classes will be stored in the app/profile directory. For more information about device profiles, read the <a href="http://docs.sencha.com/touch/2.3.1/#!/guide/profiles">online guide</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Class System]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/05/the-class-system/"/>
    <updated>2014-10-05T20:25:39+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/05/the-class-system</id>
    <content type="html"><![CDATA[<h1 id="the-class-system">The Class System</h1>
<p>上一章，我们学习了如何从已知的component classes中创建components并引用它们,我们其实也可以通过extending Sencha Touch的base classes来定义我们自己<code>custom component classes</code>,接下来我们将学习如何创建一个component并且定义我们自己的类,本章中，我们将学习到以下知识点</p>

<ul>
  <li>How to define your own custom class</li>
  <li>How to define getters and setters</li>
  <li>How to define singletons and static members How inheritance works (extending)</li>
  <li>How multiple inheritance works (mixins)</li>
</ul>

<h4 id="section">定义我们自己的类</h4>
<p>let’s discuss how the Sencha class system works and how to define your own blueprints to define a class.</p>

<p>Let’s make a blueprint containing a variable, myVar, and a method, myMethod. Using Ext.define():</p>

<p><code>
Ext.define('AppName.packagename.ClassName', { 
	//class configuration object
	myVar: 1,
	myMethod: function(name){
		//console.log("Log: " + name);
	} 
},function(){
	//optional callback used for logging
});
</code>
It’s important to know that components in the Sencha framework are, in fact, classes.
To create a class definition, you will use the Ext.define method.</p>

<p>In general, the string class name consists of the following parts:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">AppName.packagename.ClassName</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>For example, the following class maps to the file app/view/ListView.js:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('MyDemoApp.view.ListView', { 
</span><span class="line">	//class configuration object
</span><span class="line">});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In the preceding code, note the following:</p>

<ul>
  <li>The app name, MyDemoApp, maps to the app folder in your project root and should be written in the upper CamelCase notation (wherein each word begins with a capital letter).</li>
  <li>The package name, view, maps to the package folder in the app folder; package names are always written in lowercase.</li>
  <li>The class name, ListView, should also be written in the upper CamelCase notation. The class name should contain the same name as the JavaScript filename (ListView.js); therefore, it’s not possible to put multiple Sencha Touch classes in a single JavaScript file.</li>
</ul>

<p>The second argument takes a class configuration object. This is where you can set properties and methods. </p>

<p>&#8220;`
Ext.application({ 
	name: ‘DemoApp’,
	launch: function() {
	/* Start class definition code: */
	//Create a class definition Ext.define(‘DemoApp.view.DemoComponent’, { //
	//
		extend: ‘Ext.Component’, config: {
		html: ‘Hello World’ // }
	}, function() {
		console.log(“class is created”); //
	});
	//Create a class instance </p>

<pre><code>Ext.create('DemoApp.view.DemoComponent', { //
	fullscreen: true 
});
}  }); ```
</code></pre>

<h4 id="defining-getters-and-setters">Defining Getters and Setters</h4>

<p>the Sencha class system can automatically create accessors and mutators (known as magic methods) for you.</p>

<p>It is very easy to create getter and setter methods to access or mutate a class property; they will be automatically generated for you. That is why some people call them magic.</p>

<p>To autocreate magic getter and setter methods, set a property in the class config:</p>

<p><code>
config: {
	myProperty: "some value"
}
</code>
The config object autocreates the getter and setter methods as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">getMyProperty: function(){
	return this.myProperty; //returns "some value"
}
</span><span class="line">
setMyProperty: function(x){
	this.myProperty = x; 
}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Besides getter and setter methods, it also automatically creates apply and update methods. These methods are handy to change the process, before and after you set a value:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">applyMyProperty: function(x){
	//runs before this.myProperty changes. //for example validation
}
updateMyProperty: function(x){
	//runs after this.myProperty was changed.
}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来看一个例子，在configs里定义了一个Cab类，注意getDriver(), setDriver(), applyDriver(), and updateDriver() 是自动产生的.为了在值生产前作一些校验，你需要重写 applyDriver() 方法; 为了在改变driver后再作一些操作，你需要重写updateDriver()方法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('VehicleApp.vehicle.Cab', { // The default config
	config: {
		driver: 'John Doe', 
		driver2: {
			firstName: 'John',
			lastName: 'Doe' 
		}
	},
	constructor: function(config) {
		 this.initConfig(config);
	},
	applyDriver: function(newVal){ 
</span><span class="line">
		if(newVal === 'The Pope') {
			console.log(newVal + " is an invalid taxi driver.");
			return; 
		}
		return newVal; 
	},
	updateDriver: function(newVal, oldVal){
		console.log('The owner has been changed from ' + oldVal + ' to ' + newVal);
	} 
});
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Because the previous code example does not extend from a Sencha component, I had to initialize the config settings in my constructor:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">constructor: function(config) { 
</span><span class="line">	this.initConfig(config);
}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The config object sets some default values. When you are not extending from an Ext.Component, you have to call the initConfig(config) method once by yourself,(e.g., in the base class), which will initialize the configuration for the class that was passed in while creating the objects.
After you instantiate the class, you have access to the getters and setters in the prototype. They have been magically generated:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var taxi = Ext.create("VehicleApp.vehicle.Cab", { 
</span><span class="line">	driver: "John Doe"
});
alert(taxi.getDriver()); //alerts 'John Doe';
taxi.setDriver('The Pope');
alert(taxi.getDriver()); //alerts 'John Doe' because 'The Pope' is invalid.
//changes the driver from 'John Doe' to 'Lee Boonstra'
taxi.setDriver('Lee Boonstra'); 
</span><span class="line">
alert(taxi.getDriver());
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can even use magic getter and setter methods to access complex objects. For example, let’s change the code in Example 4-2 and define a config with a complex object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">config: { 
</span><span class="line">	driver: {
		firstName: "John",
</span><span class="line">		lastName: "Doe" 
</span><span class="line">	}
}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>I can get access to its properties with the line <code>taxi.getDriver().firstName</code>.
The config object in a class definition is very useful for class instances. Sometimes you don’t want to instantiate a class; for example, you may just want to run some default common utility functions. Singletons and static members would do the trick. We’ll discuss them in the next section.</p>

<h4 id="defining-singletons-and-static-members">Defining Singletons and Static Members</h4>
<p>It is pretty simple to define a class as a singleton — just set the config singleton to true:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('Utils.common.Functions', { 
</span><span class="line">	singleton: true,
	//key value pairs here
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>A singleton class definition can’t create objects (technically it can’t create more than one object, because the singleton itself gets instantiated once), but you can get access to all the methods and properties in the class itself. This is very handy for when you want to get access to generic functions or properties used as constants:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('Utils.common.Logger', { 
</span><span class="line">	singleton: true,
	version: "1.02", 
	log: function(msg) {
		console.log(msg); 
	}
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can call the log() function by invoking <code>Utils.common.Logger.log()</code> directly from the class.
Singletons also can contain config objects, and therefore generate magic getters and setters from properties. For example:</p>

<p><code>
Ext.define('Utils.common.Version', { 
	singleton: true,
	config: {
		version: "1.03",
	} 
});
</code></p>

<p>The previous code will generate a getter: getVersion(). Now, from anywhere in my application I can get access to this property with</p>

<p><code>
Utils.common.Version.getVersion()
</code>
A nice alternative for singletons are classes with a statics object defined. To set up a class with a statics object, you only need to define a statics object with key/value pairs.(Note that you can’t set a config object within a statics object)
Here we define statics with the VehicleApp.utils.Commons class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('VehicleApp.utils.Commons', { 
</span><span class="line">	statics: {
		YELP_API: 'http://api.yelp.com/business_review_search?', 
		YELP_KEY: 'ftPpQUCgfSA3yV98-uJn9g',
		YELP_TERM: 'Taxi',
		LOCATION: 'Amsterdam NL',
		getUrl: function() {
			return this.YELP_API + "term=" + this.YELP_TERM +
				"&amp;ywsid=" + this.YELP_KEY
				+ "&amp;location=" + this.LOCATION;
		}, 
	}
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can create objects of a class that has statics defined, but these objects cannot get access to its properties and methods without invoking it from the class itself with the dot notation. In other words, requesting properties and methods from an instance via this will not work, but calling the full namespace (i.e., VehicleApp.utils.Commons.LOCATION) will:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var mySettings = Ext.create('VehicleApp.utils.Commons');
//It is possible to create an instance of a class with static members: console.log(mySettings);
//But getting access to a static member from an object fails: 
mySettings.getUrl();
//Uncaught TypeError: Object [object Object] has no method 'getUrl'</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Inherit from a Single Class
To create single class inheritance, you extend from a parent class by setting the extend config:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.define('AppName.packagename.ClassName', { 
</span><span class="line">	extend: 'AppName.packagename.SomeClassName'
});
</span><span class="line">

// Example 4-3. Define a parent class
</span><span class="line">Ext.define('VehicleApp.vehicle.Vehicle', { 
</span><span class="line">	unit: "mph",
	drive: function(speed) {
		console.log(this.$className + ": Vrrroom: " + speed + " " + this.unit);
	} 
});
</span><span class="line">
// Example 4-4. Define a child class and implement inheritance
</span><span class="line">Ext.define('VehicleApp.vehicle.Car', { 
</span><span class="line">	extend: 'VehicleApp.vehicle.Vehicle', drive: function(speed) {
		console.log(this.$className + ": Vrrroom, vrrroom: " + speed + this.unit); 
	}
});
</span><span class="line">
</span><span class="line">var vehicle = Ext.create("VehicleApp.vehicle.Vehicle");
vehicle.drive(40); //alerts "Vrrroom: 40 mph" 
</span><span class="line">
var car = Ext.create("VehicleApp.vehicle.Car");
car.drive(60); //alerts "Vrrroom, vrrroom: 60 mph"
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>As with any object-oriented language, if you need to do further initializations upon creation, you code a constructor. It makes sense to code an initConfig(config) method in a constructor.</p>

<p>The <code>initConfig(config)</code> method initializes the configuration for this particular class. Whether you initialize default config values or pass in config values as an argument while creating an object, this method will override and merge them all together and create an instance with these default settings.When you are inheriting from other classes, you don’t need to rewrite the initConfig method. It’s inherited, so the functionality is already there, but it does need to exist. Typically, the best place to include it would be in your base class.</p>

<p>Another powerful method is <code>callParent([arguments])</code>. It also makes sense to write this call in the constructor, although you don’t have to. You can run this from any other method, as shown in Example 4-6, which I will discuss shortly.
It’s important to have this call in your <code>custom classes</code>, because you always want to initialize the config settings from every parent. </p>

<p>You are free to call the parent from whatever method you are in. This can be handy for overriding functionality.In Example 4-6, I want to override the drive() function that is inherited from the Vehicle class in order to customize it specifically for a <code>Motor</code> class</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Example 4-6. Class inheritance
</span><span class="line">Ext.define('VehicleApp.vehicle.Motor', {
	extend: 'VehicleApp.vehicle.Vehicle',
	config: { 
		nrOfWheels: 2 //
	},
	constructor: function (config) { 
		this.initConfig(config); //
	},
	drive: function(speed) { //
		if(this.getNrOfWheels() &lt; 3) { // 
		console.log(this.$className +
			": Vrrroom, vrrroom on " + this.getNrOfWheels() + " wheels.");
		} else { 
			this.callParent([60]); //
		} 
	}
});
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意以上的constructor部分，最后把这部分放到base class( 即Vehicle.js),放这里只做demo之用
I can run this code by creating an instance of the Motor class.
<code>
var motor = Ext.create('VehicleApp.vehicle.Motor', { 
//nrOfWheels: 4
}); 
motor.drive();
</code>
Constructors aren’t used with components. If you subclass Ext.Component, you probably won’t use a constructor. Instead, components are initialized in a method named <code>initialize()</code>.
Inheritance is a very powerful concept. What about multiple inheritance?
#### Inherit from Multiple Classes</p>

<p>You might want a class to inherit features from more than one superclass. When you want to implement multiple inheritance of classes, you need <code>mixins</code>,A mixin object does exactly what the name implies: it mixes in functionality.“Take a little bit of this, use a little bit of that…” For example, take a method of class X, take a method of class Y, implement it in class Z.
Let’s say we have two vehicle classes, a normal car and a monster 4-wheeler. Both vehicles can inherit the methods to brake and to drive. Only the monster 4-wheeler can also jump, however; the normal car can’t.</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/10/multi-inherit.png" /></p>

<p>Now, let’s define three classes, each with its own functionality to share drive(), brake(), and jump(). Later you will define two vehicle classes that inherit from these classes and mix in those methods.</p>

<p>&#8220;`
// Example 4-7. Define classes with the methods you will mix in</p>

<p>Ext.define(‘VehicleApp.mixins.Drive’, { 
	drive: function(){ //the method to share
	console.log(this.$className + “: Vrrrrooom”); }
}); </p>

<p>Ext.define(‘VehicleApp.mixins.Brake’, {
	brake: function(){ 
		console.log(this.$className + “: Eeeeekk”);
	}
});</p>

<p>Ext.define(‘VehicleApp.mixins.Jump’, {
	jump: function(){ 
		console.log(this.$className + “: Bump”);
	}	 
});	
&#8220;`</p>

<p>Finally, you can define the two Vehicle classes with the mixin implementations. Again, these are just normal class definitions, but with a mixins object. You can list all the mixins underneath one another</p>

<p>&#8220;`
// Example 4-8. Define a Car class with mixin implementations
Ext.define(‘VehicleApp.vehicle.Car’, { 
	mixins: {
		canBrake: ‘VehicleApp.mixins.Brake’,
		canDrive: ‘VehicleApp.mixins.Drive’ 	
	}
});</p>

<p>// Example 4-9. Define a FourWheeler class with mixin implementations
Ext.define(‘VehicleApp.vehicle.FourWheeler’, { 
	mixins: {
		canBrake: ‘VehicleApp.mixins.Brake’, 
		canDrive: ‘VehicleApp.mixins.Drive’, 
		canJump: ‘VehicleApp.mixins.Jump’
	} 
});
&#8220;`
With the implementation of Examples 4-8 and 4-9, the drive() and brake() methods are available to the Car class, and the drive(), brake(), and jump() methods are available to the FourWheeler class.</p>

<p><code>
var mercedes = Ext.create('VehicleApp.vehicle.Car');
var honda = Ext.create('VehicleApp.vehicle.FourWheeler');
mercedes.drive(); 
mercedes.brake();
honda.drive(); 
honda.jump(); 
honda.brake();
</code>
The mixin identifier <code>canBrake</code> matches the prototype, and therefore you can run the brake() method on the FourWheeler and Car classes.
#### Summary
Vanilla JavaScript by its nature has no class system, as JavaScript is a prototype-based language. To mimic the ideas of object-oriented programming, you can write your JavaScript functions in an object-oriented way:</p>

<p><code>
function Cab(driver, passenger) { 
	this.driver = driver; 
	this.passenger = passenger;
}
</code>
To create an instance of this Cab class, you can create a new object with the new operator:</p>

<p><code>
var mercedes = new Cab('John Doe', 'The president');
</code>
Sencha Touch has a built-in class system that ships with inheritance, magic methods, and singleton strategies. Example 4-10 is the Sencha version of the previous Cab class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//Example 4-10. app/view/Cab.js
</span><span class="line">Ext.define('TaxiApp.view.Cab', { 
</span><span class="line">	extend: 'Ext.Component', 
</span><span class="line">	config: {
		driver: '',
		passenger: '' 
	}
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>To create an instance of this Sencha Cab class, you can create a new object, but without the new operator:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var mercedes = Ext.create('TaxiApp.view.Cab', { 
</span><span class="line">	driver: 'John Doe',
	passenger: 'The president'
});
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>下一章我们将学习<code>how to create layouts for your Sencha applications and components.</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sencha Fundamentals]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/05/sencha-fundamentals/"/>
    <updated>2014-10-05T15:25:28+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/05/sencha-fundamentals</id>
    <content type="html"><![CDATA[<p>All of the Sencha Touch visual components (like panels, lists, and toolbars) extend from the Ext.Component class. This base class gives every component the ability to set certain standard layout-related properties, such as height, width, margin, padding, and style, or set content with the html or template (tpl) configs. Every component in Sencha Touch can be rendered to the DOM.</p>

<p>本章中我们将学习以下几点</p>

<ul>
  <li>How to instantiate a basic component</li>
  <li>How to implement templates</li>
  <li>How to make references to components</li>
  <li>How component traversing works</li>
  <li>How to make references to DOM nodes</li>
  <li>How to fire and remove events using event handling</li>
</ul>

<h3 id="how-to-instantiate-a-basic-component">How to instantiate a basic component</h3>

<p>创建一个Sencha Touch view component</p>

<p>&#8220;`
var c = Ext.create(‘Ext.Component’, { 
	//key value pairs here, i.e.
	html: ‘Hello World!’
});</p>

<p>&#8220;`
in Sencha Touch you use a method, Ext.create(), to create a new object instance (in this case, Ext.component). This is because Sencha Touch has a built-in class system and class loader.</p>

<p><code>Note</code>:在js中，创建一个对象用new，但在sencha touch中,几乎不用，because the new operator won’t inform the Sencha loader to load the required classes in the background</p>

<p>A much simpler way to render components to the DOM is what we call object literal notation (or lazy instantiation). You will probably use this more often when building real-world applications:</p>

<p><code>
var c = {
	xtype: 'component', html : 'Hello World'
}
</code>
什么是xtype?xtype是以下键值对的别名<code>alias: widget.&lt;some-component&gt;</code>,通常你在以下两种情况下用到xtype:</p>

<ul>
  <li>When you define your own custom class (a blueprint for objects you create), you set an alias name to this component so you can easily refer to it later.(下一章中我们将学习如何创建自己的类)</li>
  <li>To create a component instance in the object literal notation, use the xtype defined in the class blueprint (as above).
每一个Sencha view component都有一个xtype名字</li>
  <li><code>Ext.List</code>对应<code>xtype:'list'</code></li>
  <li><code>Ext.navigation.View</code>对应<code>xtype:'navigationview'</code>
Tip</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">When you use Sencha Architect for building Sencha Touch or Ext JS apps and you are creating an interface, xtype has a different name. You will need to look for the setting useralias. In the code that it generates, Sencha Architect will use alias: widget.&lt;useralias-name&gt;. So, in other words, xtype: &lt;useralias-name&gt; is equivalent to alias: widget.&lt;useralias-name&gt;.
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>当我们创建components时(并且你不使用sencha-touch-all.js/sencha- touch-all-debug.js frameworks)，你需要告诉Sencha的Ext.Loader将相应的类载入内存中,Ext.Loader能将所有你指定的类和信赖关系按正确的顺序加载(类似java中的import),当你定义了自己的类并且嵌入了xtypes时，你可以将需要的类放requeires数据中告诉Ext.Loader去加载这些类,当用Ext.create()来创建这些components时,你能通过Ext.require()方法来加载这些类,<code>Ext.require("Ext.List");</code> or <code>requires: ["Ext.List"]</code>
注意以上的例子中,我们把html的内容写死了,在生产环境中这是非常不合适的,我们常常希望能动态生成内容,我们改用Templates来实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.create('Ext.Component', {
	tpl: Ext.create('Ext.XTemplate','&lt;h1&gt;{name}&lt;/h1&gt;&lt;p&gt;{description}&lt;/p&gt;'), 
	data: {
		name: 'Template',
		description: 'This is an example of how to configure a basic template.' 
	}
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如上所示,Ext.Component允许你使用Ext.Xtemplate来动态生成内容，再来看一个生产环境中的例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.onReady(function() {
	var data = {
		name: 'Taxi Amsterdam',
		description: 'The only taxi in Amsterdam that does not circle around'
	};
	Ext.create('Ext.Component', {
		tpl: '&lt;h1&gt;{name}&lt;/h1&gt;&lt;p&gt;{description}&lt;/p&gt;', data: data,
		styleHtmlContent: true,
		cls: 'box',
		renderTo: Ext.getBody()
	}); 
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>动态改变数据</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var data = {
	name: 'Taxi Amsterdam',
	description: 'The only taxi in Amsterdam that does not circle around.'
};
var c = null;
Ext.require('Ext.Component');

Ext.onReady(function() {
	c = Ext.create('Ext.Component', {
		tpl: '&lt;h1&gt;{name}&lt;/h1&gt;&lt;p&gt;{description}&lt;/p&gt;', 

		data: data,
		styleHtmlContent: true,
		cls: 'box',
</span><span class="line">		renderTo: Ext.getBody() 
</span><span class="line">	});
</span><span class="line">	data.description = "We like tourists a lot!"; c.setData(data);
});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>以上的tpl还可简化为</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var myTpl = Ext.create(
'Ext.XTemplate','&lt;h1&gt;{name}&lt;/h1&gt;&lt;p&gt;{description}&lt;/p&gt;');
</span><span class="line">c = Ext.create('Ext.Component', {
		tpl: myTpl, 
		data: data,
		styleHtmlContent: true,
		cls: 'box',
</span><span class="line">		renderTo: Ext.getBody() 
</span><span class="line">	});</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在实际生产环境中,我们会把所有的HTML的templates保存到一个custom separate (singleton) class中，而不是让它暴露在全局域中(参见第八章中的<code> Defining Singletons and Static Members</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//Example  utils/Template.js 
</span><span class="line">Ext.define('Utils.utils.Template', {
</span><span class="line">	statics: {
		MY_TPL: Ext.create('Ext.XTemplate','&lt;h1&gt;{name}&lt;/h1&gt;&lt;p&gt;{description}&lt;/p&gt;');
} });</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### 实现更高级的Templates
如果你不想把数据保存在一个随机的变量中，而是将数据从data store(假设为CabStore)load到template中,如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.create('Ext.data.Store', { 
</span><span class="line">	id:'CabStore',
	fields: ['name', 'description'], 
</span><span class="line">
	data : [
		{ name: "Taxi Amsterdam", description: "The best taxi service" + "of Amsterdam."},
		{ name: "Cab &amp; Co", description: "Always fast."} 
	]
});
</span><span class="line">

var myTpl = Ext.create('Ext.XTemplate', '&lt;tpl for="."&gt;', 
	'&lt;div class="row"&gt;',
		'&lt;h1&gt;{name}&lt;/h1&gt;&lt;p&gt;{description}&lt;/p&gt;', 
	'&lt;/div&gt;',
	'&lt;/tpl&gt;'
);
</span><span class="line">
</span><span class="line">Ext.create('Ext.DataView', {
	itemTpl: myTpl,
	styleHtmlContent: true,
	cls: 'box',
	fullscreen: true,
	height: 250
});</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>&lt;tpl for="."&gt;</code> looping tags, which loop through the root (.) of all the data records. This <code>&lt;tpl&gt;</code> tag sets the template markup for every row of data.</p>

<p>XTemplates是很强大的，不仅限于以上功能,You can run conditional expressions, basic math functions, built-in variables, custom member functions, and loops into templates.
#### 引用Components
之前我们讨论了如何创建一个component并配合template使用,现在我们看看如何引用component
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">ComponentQuery:
Ext.ComponentQuery.query('selector');</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
//注意,In the component query, you pass in a string with the xtype:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var cars = Ext.ComponentQuery.query('car');</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>或者搜索选择多个components:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var carsAndCabs = Ext.ComponentQuery.query("car, cab");</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>Tip</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">An alternative way of creating references to components is by using a refs object in the controller.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>It’s also possible to retrieve components with a component query for <code>id</code> or <code>itemId</code>, by passing in the string id name, prefixed with a #. As itemIds are not globally unique, it is a better practice to use them(<code>itemIds</code>) instead of ids.</p>

<p><code>
Ext.ComponentQuery.query('#mybutton');
</code>
You can even make your component query more complex by passing in CSS-like selectors.
select all panels that have the attribute title=”Test”:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.ComponentQuery.query('panel[title="Test"]');</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Or we can select only child elements from a component:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.ComponentQuery.query('formpanel &gt; button');</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Traversing Components
以上最后一个例子就是<code>Traversing Components</code>,To traverse components, you can use the up() and down() methods to retrieve the first parent or first child component:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//get first parent
myComponent.up(el); //get first child
myComponent.down(el);
</span><span class="line">
</span><span class="line">var form = myButton.up('formpanel');
var input = form.down('textfield[name="lastname"]');</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>the up() or down() method returns the first parent or child that it finds.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; Ext.ComponentQuery.query('button') 
</span><span class="line">[Class, Class]
</span><span class="line">
</span><span class="line">&gt; Ext.Viewport.down('button')
</span><span class="line">Class {onInitializedListeners: Array[0],
</span><span class="line">initialConfig: Object, id: "mybutton",
</span><span class="line">getId: function, element: Class...}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Making References to DOM Nodes
when you are creating custom components and plug-ins yourself, you might need to work with the DOM.</p>

<p><code>Note</code></p>

<p>Creating custom components or plug-ins in Sencha Touch is beyond the scope of this book. It’s an advanced technique that requires an understanding of the Sencha class system, DOM, and custom styling. If you are interested in custom components, take a look at the <a href="http://market.sencha.com/">Sencha Market</a>, where a lot of plug-in developers share their components and plug-ins for free.</p>

<p>Sencha提供了三种方式获取DOM</p>

<ul>
  <li>Getting Sencha’s version of a DOM element.</li>
  <li>Getting a collection of multiple direct DOM elements. </li>
  <li>Getting the direct DOM node.
假设有以下代码</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;h2 id="title"&gt;Taxi Amsterdam&lt;/h2&gt; 
</span><span class="line">&lt;div id="description"&gt;
		&lt;p&gt;Taxi description&lt;/p&gt;
		&lt;p&gt;Taxi description2&lt;/p&gt; 
	&lt;/div&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Exg.get()
Ext.get(el) is the trick you use to retrieve the Ext.dom.Element, which is a kind of wrapper that encapsulates a DOM element, adding simple DOM manipulation facilities and normalizing for browser differences.
你可以传入以下三种形式</p>

<ul>
  <li>An ID to the node</li>
  <li>A DOM node</li>
  <li>An existing Ext.Element
测试结果</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var title = Ext.get('title'); 
</span><span class="line">console.log(title);
</span><span class="line">//result
</span><span class="line">Class {dom: h2#title, id: "title", self: function, 
</span><span class="line">superclass: Object, defaultConfig: emptyFn}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>Note</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Ext.get() is the shorthand notation for Ext.dom.Element.get().
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>##### Ext.select()
选择多个DOM elements,我们可以用Ext.select(selector)
You can pass in a CSS-like selector (with an xtype, itemId, or CSS class), and it returns an Ext.dom.CompositeElementLite, which is a collection of DOM elements providing methods to filter members or to perform actions upon the whole set.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; var pars = Ext.select("p");
Class {elements: Array[2], el: Class, self: function, superclass: Object, defaultConfig: emptyFn}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>获取第一个DOM Node</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; var firstPar = Ext.select("p").elements[0]; 
</span><span class="line">&lt;p&gt;Number one taxi in Amsterdam.&lt;/p&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Note</code></p>

<p>在JS中,你用以下方法来获取一个tag name的所有DOM</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">##### Ext.getDom()</span>
</span><span class="line"><span class="sb">Finally, you can also request the true DOM with Ext JS by using Ext.getDom(el).</span>
</span><span class="line"><span class="sb">You can pass in the following:</span>
</span><span class="line">
</span><span class="line"><span class="sb">* An ID to the node</span>
</span><span class="line"><span class="sb">* A DOM node</span>
</span><span class="line"><span class="sb">* An existing Ext.Element</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line">	<span class="o">&gt;</span> <span class="n">var</span> <span class="n">title</span> <span class="o">=</span> <span class="no">Ext</span><span class="o">.</span><span class="n">getDom</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span>
</span><span class="line">	<span class="o">&lt;</span><span class="n">h2</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="no">Taxi</span> <span class="no">Amsterdam</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span>
</span><span class="line"><span class="sr">```</span>
</span><span class="line">
</span><span class="line"><span class="sr">既然我们已经知道如何获取DOM elements和Sencha components,我们可以看看如何do something with these references</span>
</span><span class="line">
</span><span class="line"><span class="sr">##### Handling Events</span>
</span><span class="line">
</span><span class="line"><span class="sr">Event handling is done via the Ext.util.Observable mixin,A mixin is a technique to support (multiple) inheritance.(第四章将有介绍)The Ext.Component class uses the Ext.util.Observable mixin, which means that all components are able to respond to events, because Ext.Component is the base class for every view component in Sencha Touch.</span>
</span><span class="line">
</span><span class="line"><span class="sr">有三种类型的events</span>
</span><span class="line">
</span><span class="line"><span class="sr">* System events</span>
</span><span class="line">
</span><span class="line"><span class="sr">	Events invoked by the framework — for example, loading data with the load event.</span>
</span><span class="line"><span class="sr">* Lifecycle events</span>
</span><span class="line">
</span><span class="line"><span class="sr">	Events invoked by the framework lifecycle — for example, painting a view with the painted event.</span>
</span><span class="line"><span class="sr">* User events</span>
</span><span class="line">
</span><span class="line"><span class="sr">	Events invoked by the user — for example, a tap event.</span>
</span><span class="line"><span class="sr">本节我们将关注User events</span>
</span><span class="line">
</span><span class="line"><span class="sr">###### Firing Events</span>
</span><span class="line"><span class="sr">在原生的JS代码中，如果你想监听一个tap event</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>function myEventHandler(ev) { //do something
}
element.addEventListener(‘touchend’, myEventHandler);
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="err">在</span><span class="no">Sencha</span> <span class="no">Touch</span><span class="err">中，你可以按如下方式来定义</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
listeners : {
	tap: ‘myEventHandler’
}
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="err">来看</span><span class="no">Sench</span> <span class="no">Touch</span><span class="err">中的</span><span class="mi">3</span><span class="err">种监听方式</span>
</span><span class="line">
</span><span class="line"><span class="o">*</span> <span class="n">listeners</span>
</span><span class="line">
</span><span class="line">	<span class="n">the</span> <span class="n">listeners</span> <span class="n">configuration</span> <span class="n">directly</span> <span class="n">into</span> <span class="n">the</span> <span class="n">component</span> <span class="ss">class</span><span class="p">:</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
Ext.define(‘BookTaxiBtn’, { 
	extend: ‘Ext.Button’, 
	xtype: ‘booktaxibtn’, 
	config: {
		text: ‘Book a Taxi - listeners’, margin: 5,
		listeners: {
			tap: ‘bookTaxiEventHandler’ 
		},
	},
	bookTaxiEventHandler: function(b){
		console.log(‘You tapped the ‘ + b.getText() + ‘button’); 
	}
});
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="o">*</span> <span class="n">handler</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
	var callTaxiBtn1 = Ext.create(‘Ext.Button’, { 
		text: ‘1: Call a Taxi - handler’,
		margin: 5,
		handler: callTaxiEventHandler
	});
&#8220;`</p>

<ul>
  <li>addListener()</li>
</ul>

<p>&#8220;`
var callTaxiBtn2 = Ext.create(‘Ext.Button’, { 
	margin: 5,
	text: ‘2: Call a Taxi - addListener’ 
});</p>

<p>callTaxiBtn2.addListener(‘tap’, callTaxiEventHandler);
&#8220;`
Here we use the short version of the addListener() method: the on() method. It takes
the event name and the function-to-execute name as arguments:</p>

<p><code>
var callTaxiBtn3 = Ext.create('Ext.Button', { 
	margin: 5,
	text: '3: Call a Taxi - on' 
});
callTaxiBtn3.on('tap', callTaxiEventHandler);
</code>
You’ll just need to wrap each button in an Ext.application.launch() method:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Ext</span><span class="o">.</span><span class="n">application</span><span class="p">({</span>
</span><span class="line">	<span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Events&#39;</span><span class="p">,</span>
</span><span class="line">		<span class="ss">requires</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;BookTaxiBtn&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">		<span class="ss">launch</span><span class="p">:</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">			<span class="n">var</span> <span class="n">callTaxiEventHandler</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">				<span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s1">&#39;You tapped the &#39;</span> <span class="o">+</span> <span class="n">b</span><span class="o">.</span><span class="n">getText</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;button&#39;</span><span class="p">);</span>
</span><span class="line">			<span class="p">};</span>
</span><span class="line">			<span class="n">var</span> <span class="n">callTaxiBtn1</span> <span class="o">=</span> <span class="no">Ext</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s1">&#39;Ext.Button&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">				<span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;1: Call a Taxi - handler&#39;</span><span class="p">,</span>
</span><span class="line">				<span class="ss">margin</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class="line">				<span class="ss">handler</span><span class="p">:</span> <span class="n">callTaxiEventHandler</span>
</span><span class="line">			<span class="p">});</span>
</span><span class="line">			<span class="n">var</span> <span class="n">callTaxiBtn2</span> <span class="o">=</span> <span class="no">Ext</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s1">&#39;Ext.Button&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">				<span class="ss">margin</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class="line">				<span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;2: Call a Taxi - addListener&#39;</span>
</span><span class="line">			<span class="p">});</span>
</span><span class="line">			<span class="n">callTaxiBtn2</span><span class="o">.</span><span class="n">addListener</span><span class="p">(</span><span class="s1">&#39;tap&#39;</span><span class="p">,</span> <span class="n">callTaxiEventHandler</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">			<span class="n">var</span> <span class="n">callTaxiBtn3</span> <span class="o">=</span> <span class="no">Ext</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s1">&#39;Ext.Button&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">				<span class="ss">margin</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class="line">				<span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;3: Call a Taxi - on&#39;</span>
</span><span class="line">			<span class="p">});</span>
</span><span class="line">
</span><span class="line">			<span class="n">callTaxiBtn3</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;tap&#39;</span><span class="p">,</span> <span class="n">callTaxiEventHandler</span><span class="p">);</span>
</span><span class="line">			<span class="sr">//</span><span class="no">Display</span> <span class="n">the</span> <span class="n">buttons</span><span class="p">,</span> <span class="k">for</span> <span class="n">testing</span> <span class="n">purposes</span>
</span><span class="line">			<span class="no">Ext</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s1">&#39;Ext.Container&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">fullscreen</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class="line">			<span class="ss">padding</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">			<span class="ss">items</span><span class="p">:</span> <span class="o">[</span>
</span><span class="line">				<span class="n">callTaxiBtn1</span><span class="p">,</span>
</span><span class="line">				<span class="n">callTaxiBtn2</span><span class="p">,</span>
</span><span class="line">				<span class="n">callTaxiBtn3</span><span class="p">,</span>
</span><span class="line">				<span class="p">{</span> <span class="ss">xtype</span><span class="p">:</span> <span class="s1">&#39;booktaxibtn&#39;</span><span class="p">}</span>
</span><span class="line">			<span class="o">]</span>
</span><span class="line">			<span class="p">});</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>###### Removing Events
To remove a listener, you need a reference to its function. In case you want to remove event listeners, it’s a good practice to not write event-handler function bodies inline in the code. You should always assign functions to a variable;otherwise, it will be hard to reference the function to remove(from outside the function body).
原生的JS，可以按以下方式来removeEventListener</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">element</span><span class="o">.</span><span class="n">removeEventListener</span><span class="p">(</span><span class="s1">&#39;touchend&#39;</span><span class="p">,</span><span class="n">myEventHandler</span><span class="p">,</span><span class="kp">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>To remove an event listener, use the removeListener() method, pass in the event name you want to remove</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">button</span><span class="o">.</span><span class="n">removeListener</span><span class="p">(</span><span class="s1">&#39;tap&#39;</span><span class="p">,</span> <span class="n">myEventHandler</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>以下为完整演示demo</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Ext</span><span class="o">.</span><span class="n">application</span><span class="p">({</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Events&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="ss">launch</span><span class="p">:</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="n">var</span> <span class="n">callTaxiEventHandler</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s1">&#39;You tapped the &#39;</span> <span class="o">+</span> <span class="n">b</span><span class="o">.</span><span class="n">getText</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;button&#39;</span><span class="p">);</span>
</span><span class="line">			<span class="n">this</span><span class="o">.</span><span class="n">removeListener</span><span class="p">(</span><span class="s1">&#39;tap&#39;</span><span class="p">,</span> <span class="n">callTaxiEventHandler</span><span class="p">);</span>
</span><span class="line">			<span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s1">&#39;From now on, you can not call again.&#39;</span><span class="p">);</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">		<span class="n">var</span> <span class="n">callTaxi</span> <span class="o">=</span> <span class="no">Ext</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s1">&#39;Ext.Button&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">			<span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Call the Taxi&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="ss">margin</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class="line">			<span class="ss">listeners</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">				<span class="ss">tap</span><span class="p">:</span> <span class="n">callTaxiEventHandler</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">		<span class="p">});</span>
</span><span class="line">		<span class="sr">//</span><span class="n">just</span> <span class="k">for</span> <span class="n">testing</span> <span class="n">purposes</span>
</span><span class="line">		<span class="no">Ext</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s1">&#39;Ext.Container&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">			<span class="ss">fullscreen</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class="line">			<span class="ss">padding</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">			<span class="ss">items</span><span class="p">:</span> <span class="o">[</span><span class="n">callTaxi</span><span class="o">]</span>
</span><span class="line">		<span class="p">});</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>Note</code></p>

<p>Just as the on() method is a shorthand version for addListener(), there is a shorthand version for the removeListener() function un(). So, instead of:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">button</span><span class="o">.</span><span class="n">removeListener</span><span class="p">(</span><span class="s1">&#39;tap&#39;</span><span class="p">,</span> <span class="n">myEventHandler</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>you can use:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">button</span><span class="o">.</span><span class="n">un</span><span class="p">(</span><span class="s1">&#39;tap&#39;</span><span class="p">,</span> <span class="n">myEventHandler</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>###### Firing Custom Events
监听模式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">listeners</span> <span class="p">:</span> <span class="p">{</span>
</span><span class="line">	<span class="ss">tap</span><span class="p">:</span> <span class="n">function</span><span class="p">(</span><span class="n">e</span><span class="p">){</span>
</span><span class="line">		<span class="n">this</span><span class="o">.</span><span class="n">up</span><span class="p">(</span><span class="s1">&#39;taxiview&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">fireEvent</span><span class="p">(</span><span class="s1">&#39;calltaxi&#39;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The controller listens to the custom calltaxi event:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pars = document.getElementsByTagName(&#8216;p&#8217;);</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Ext</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="s1">&#39;TaxiController&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">	<span class="kp">extend</span><span class="p">:</span> <span class="s1">&#39;Ext.app.Controller&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="ss">config</span><span class="p">:</span> <span class="p">{</span> <span class="ss">control</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">		<span class="s1">&#39;taxiview&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">			<span class="ss">calltaxi</span><span class="p">:</span> <span class="s1">&#39;onCallTaxi&#39;</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="ss">onCallTaxi</span><span class="p">:</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Call the Taxi&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sencha初探]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/01/senchachu-tan/"/>
    <updated>2014-10-01T22:12:09+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/01/senchachu-tan</id>
    <content type="html"><![CDATA[<p><a href="http://vimeo.com/76568053">入门教程</a>笔记
#### 创建app
cd到sencha touch的sdk(目前最新版本为touch-2.4.0)下执行以下命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sencha generate app MyApp /path/to/www/myapp</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Sencha+PhoneGap+Cordova</p>

<ul>
  <li>PhoneGap和Cordova的安装</li>
</ul>

<p>首选安装<a href="http://nodejs.org/">NodeJS</a>安装以后执行以下命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo npm install -g phonegap
</span><span class="line">sudo npm install -g cordova</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>即可安装<a href="http://phonegap.com/">phonegap</a>,<a href="http://cordova.apache.org/">cordova</a></p>

<h4 id="sencha-appcordova">为Sencha App添加Cordova支持</h4>
<p>进入Sencha app的根据目录,执行以下命令
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">sencha cordova init [bundleID] [Native app name]</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
注意<code>Native app name</code>可以为空,这样编译到手机的名字即为sencha touch app的名字
执行完以上的命令后,<code>app.json</code>里会出现cordova的选项,如下图所示</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">"cordova" : {
</span><span class="line">                "config": {
</span><span class="line">                    // Uncomment the line below and add the platforms you wish to build for
</span><span class="line">                    //"platforms": "ios android",
</span><span class="line">
</span><span class="line">                    "id": "com.doouya.growIndex",
</span><span class="line">                    "name": "NotesApp"
</span><span class="line">                }
</span><span class="line">            }</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在<code>platforms</code>选项上添加你想支持的平台，这里我选了iOS,然后编译app</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sencha app build native</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>或者运行到真机上
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">sencha app run native</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
或是在模拟器上运行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sencha app emulate native</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>集成phonegap和Cordova后，我们可以看看集成是否成功,在app.js里的launch函数里写入以下代码
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">if (Ext.browser.is.PhoneGap){
</span><span class="line">	//TestCode
</span><span class="line">	alert(device.uuid);
</span><span class="line">}</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>注意这行<code>alert(device.uuid);</code>，现在phoneGap将native api剥离它的Core代码了,以plugin的形式管理,如上，如果你想用device，你需要将相应的plugin添加进来,以下为添加步骤:
* 进入Cordova的目录下
* 执行以下命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cordova plugin add org.apache.cordova.device</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### 项目开发中的问题
如果修改了app.css或新增css文件，重新编译一次以便生效</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sencha app build native</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### Workspace
类似xcode加的workspace,执行以下命令以产生一个workspace</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sencha generate workspace &lt;../myworkspacefolder&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The generate workspace command will generate workspace metadata in the hidden .sencha folder, which contains the workspace classpath.It will copy the touch framework folder in the root of the workspace folder. The generate workspace command will also create two new (empty) folders: a packages folder, in case you want to download Sencha plug-ins, and a build folder, which will be the location where your build packages will be created and stored.</p>

<p>Once you have a workspace, generating apps is the same as before:</p>

<p><code>
cd &lt;../myworkspacefolder&gt;
cd touch
sencha generate app -name &lt;namespace}&gt; -path &lt;../appfolder&gt;
</code>
<code>Tip</code></p>

<p>If you want to upgrade to a newer version of Sencha Touch, you can download the latest version from the website and let Sencha Cmd update your folder structure. Here’s an example of how to upgrade the app (or workspace) from the command line:</p>

<p><code>
	sencha app upgrade ../path-new-sdk-folder
</code>
When upgrading your framework, you don’t need to worry — it won’t touch your self-written classes. It basically just copies a newer version of the sdk in your application root or workspace, and it might change some metadata in the hidden .sencha folder. However, it’s also possible that it will need to update the app.js, app.json, or bootstrap.js files.</p>

<h4 id="generating-a-model-with-sencha-cmd">Generating a Model with Sencha Cmd</h4>

<p>To create the model definition, you create a new JavaScript file and save it in the app/model directory. But a better choice is to have Sencha Cmd generate it for you.</p>

<p>Here’s the general syntax for implementing the model definition for a Sencha MVC application. On the command line, navigate to the app folder and run the following command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">Make sure you already have an MVC application generated with Sencha Cmd. To generate our FindACab app model, navigate to your project folder and type the following:</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line">	<span class="n">sencha</span> <span class="n">generate</span> <span class="n">model</span> <span class="no">Cab</span> <span class="nb">id</span><span class="ss">:auto</span><span class="p">,</span><span class="nb">name</span><span class="ss">:string</span><span class="p">,</span><span class="ss">latitude</span><span class="p">:</span><span class="n">float</span><span class="p">,</span><span class="ss">longitude</span><span class="p">:</span><span class="n">float</span><span class="p">,</span> <span class="ss">address1</span><span class="p">:</span><span class="n">string</span><span class="p">,</span><span class="ss">phone</span><span class="p">:</span><span class="n">string</span><span class="p">,</span><span class="n">state_code</span><span class="ss">:string</span><span class="p">,</span><span class="ss">zip</span><span class="p">:</span><span class="n">string</span><span class="p">,</span><span class="ss">city</span><span class="p">:</span><span class="n">string</span><span class="p">,</span> <span class="ss">userinput</span><span class="p">:</span><span class="n">string</span><span class="p">,</span><span class="n">country_code</span><span class="ss">:string</span><span class="p">,</span><span class="n">avg_rating</span><span class="ss">:float</span><span class="p">,</span><span class="ss">distance</span><span class="p">:</span><span class="n">float</span>
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">Sencha Cmd will generate the code shown below</span>
</span></code></pre></td></tr></table></div>
Ext.define(&#8216;FindACab.model.Cab&#8217;, { 
	extend: &#8216;Ext.data.Model&#8217;,
	config: { 
	fields: [
		{ name: &#8216;id&#8217;, type: &#8216;auto&#8217; },
		{ name: &#8216;name&#8217;, type: &#8216;string&#8217; },
		{ name: &#8216;latitude&#8217;, type: &#8216;float&#8217; },
		{ name: &#8216;longitude&#8217;, type: &#8216;float&#8217; },
		{ name: &#8216;address1&#8217;, type: &#8216;string&#8217; },
		{ name: &#8216;phone&#8217;, type: &#8216;string&#8217; },
		{ name: &#8216;state_code&#8217;, type: &#8216;string&#8217; },
		{ name: &#8216;zip&#8217;, type: &#8216;string&#8217; },
		{ name: &#8216;city&#8217;, type: &#8216;string&#8217; },
		{ name: &#8216;userinput&#8217;, type: &#8216;string&#8217;},
		{ name: &#8216;country_code&#8217;, type: &#8216;string&#8217; }, 
		{ name: &#8216;avg_rating&#8217;, type: &#8216;float&#8217; },
		{ name: &#8216;distance&#8217;, type: &#8216;float&#8217; }
		] 
	}
});
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">The</span> <span class="n">code</span> <span class="k">in</span> <span class="n">our</span> <span class="n">newly</span> <span class="n">generated</span> <span class="no">JavaScript</span> <span class="n">file</span> <span class="n">defines</span> <span class="n">the</span> <span class="n">model</span> <span class="no">Cab</span><span class="o">.</span><span class="n">js</span><span class="o">.</span>
</span><span class="line"><span class="no">Every</span> <span class="n">field</span> <span class="nb">name</span> <span class="n">has</span> <span class="n">a</span> <span class="n">type</span><span class="p">;</span> <span class="k">for</span> <span class="n">example</span><span class="p">,</span> <span class="n">the</span> <span class="n">field</span> <span class="nb">name</span> <span class="n">phone</span> <span class="n">has</span> <span class="n">a</span> <span class="n">type</span> <span class="n">string</span><span class="o">.</span> <span class="no">The</span> <span class="n">possible</span> <span class="n">field</span> <span class="n">types</span> <span class="k">for</span> <span class="n">a</span> <span class="n">model</span> <span class="n">are</span> <span class="n">string</span><span class="p">,</span> <span class="n">int</span><span class="p">,</span> <span class="n">float</span><span class="p">,</span> <span class="n">boolean</span><span class="p">,</span> <span class="ow">and</span> <span class="n">auto</span><span class="o">.</span> <span class="no">The</span> <span class="n">type</span> <span class="n">auto</span> <span class="n">means</span> <span class="n">there</span> <span class="n">is</span> <span class="n">no</span> <span class="n">type</span> <span class="n">conversion</span> <span class="n">at</span> <span class="n">all</span><span class="o">.</span>
</span><span class="line"><span class="err">定义一个</span><span class="n">store</span>
</span></code></pre></td></tr></table></div>
Ext.define(&#8216;FindACab.store.Cabs&#8217;, { 
	extend: &#8216;Ext.data.Store&#8217;, 
	config: {
		model: &#8216;FindACab.model.Cab&#8217;,
		autoLoad: true 
	}
});
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="sb">`Tips`</span>
</span><span class="line"><span class="no">Stores</span> <span class="n">can</span> <span class="n">be</span> <span class="n">written</span> <span class="n">without</span> <span class="n">models</span><span class="o">.</span> <span class="no">You</span> <span class="n">can</span> <span class="n">write</span> <span class="n">the</span> <span class="n">model</span> <span class="k">in</span><span class="o">-</span><span class="n">line</span> <span class="k">in</span> <span class="n">the</span> <span class="n">store</span> <span class="n">by</span> <span class="n">just</span> <span class="n">defining</span> <span class="n">a</span> <span class="sb">`fields`</span> <span class="n">array</span>
</span><span class="line">
</span><span class="line"><span class="c1">#### Generating a Controller with Sencha Cmd</span>
</span></code></pre></td></tr></table></div>
	sencha generate controller <mycontroller>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#### Referencing a Component from a Controller</span>
</span><span class="line"><span class="no">When</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="n">reference</span> <span class="n">from</span> <span class="n">the</span> <span class="no">Sencha</span> <span class="no">MVC</span> <span class="n">controller</span> <span class="n">to</span> <span class="n">a</span> <span class="n">component</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">either</span> <span class="n">use</span> <span class="n">refs</span> <span class="ow">or</span> <span class="n">you</span> <span class="n">can</span> <span class="n">use</span> <span class="n">the</span> <span class="n">component</span> <span class="n">query</span>
</span><span class="line"><span class="no">Controller</span> <span class="n">refs</span> <span class="n">are</span> <span class="n">available</span> <span class="n">only</span> <span class="k">in</span> <span class="p">(</span><span class="n">of</span> <span class="n">course</span><span class="p">)</span> <span class="n">the</span> <span class="n">controller</span>
</span></code></pre></td></tr></table></div>
Example 6-3. Defining a Controller reference 
refs: {
	myRef: &#8216;somextype&#8217;
}
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">The</span> <span class="n">component</span> <span class="n">query</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">anywhere</span> <span class="k">in</span> <span class="n">your</span> <span class="ss">code</span><span class="p">:</span>
</span></code></pre></td></tr></table></div>
Ext.ComponentQuery.query(&#8216;somextype&#8217;);
&#8220;`
Every ref that is created will automatically generate a getter. In Example 6-3, then, this.getMyRef() would find the component that has the xtype: &#8220;somextype&#8221;.
#### Listening to Events from a Controller
When you want to control events in the Sencha MVC controller, add a control object to the controller’s config object. This control object contains a reference to a component (in this example, myref) and adds an event listener with some event that dispatches to myFunction:

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">control</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">	<span class="s1">&#39;myref&#39;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class="line">	<span class="o">&lt;</span><span class="n">event</span><span class="o">&gt;</span><span class="p">:</span> <span class="s1">&#39;myFunction&#39;</span><span class="p">,</span> <span class="p">}</span>
</span><span class="line"><span class="p">},</span>
</span><span class="line">
</span><span class="line"><span class="sb">```</span>
</span><span class="line"><span class="sb">Once you have a reference to a component, you can bind an event to it. The trick is the control object, which listens to key/value pairs. For the key, you enter the reference name (the CSS-like selector, or it could also be the xtype); this key has another object as a value. This object accepts the name of the event as a key (for example, tap or initialize) and as a value, the string name of controller function that should be called after the event has happened.</span>
</span></code></pre></td></tr></table></div>
Example 6-5. app/controller/CabController.js
Ext.define(&#8216;FindACab.controller.CabController&#8217;, { 
	extend: &#8216;Ext.app.Controller&#8217;,
	config: {
	models: [&#8216;Cab&#8217;],
	stores: [&#8216;Cabs&#8217;],
	refs: {
		main: &#8216;mainview&#8217;
	}, 
	control: {
		&#8216;mainview&#8217;: {
			initialize: &#8216;onInitMain&#8217;,
		}, 

		&#8216;button[action=press]&#8217;: {
			tap: &#8216;onTapMain&#8217; }
		} 
		},
	onInitMain: function() { 
		console.log(&#8220;Initialize mainview&#8221;);
	},
	onTapMain: function() {
		console.log(&#8220;Tapped a button in mainview&#8221;); 
	}
});
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">The</span> <span class="no">CSS</span><span class="o">-</span><span class="n">like</span> <span class="n">selector</span> <span class="n">button</span><span class="o">[</span><span class="n">action</span><span class="o">=</span><span class="n">press</span><span class="o">]</span> <span class="n">invokes</span> <span class="n">the</span> <span class="n">controller</span> <span class="nb">method</span> <span class="n">onTapMain</span><span class="p">(),</span> <span class="n">which</span> <span class="n">listens</span> <span class="n">to</span> <span class="n">all</span> <span class="n">button</span> <span class="n">xtypes</span> <span class="n">that</span> <span class="n">have</span> <span class="n">the</span> <span class="n">config</span> <span class="ss">action</span><span class="p">:</span> <span class="n">press</span> <span class="n">set</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="c1">#### Loading External Classes</span>
</span><span class="line">
</span><span class="line"><span class="no">In</span> <span class="n">app</span><span class="o">.</span><span class="n">js</span><span class="p">,</span> <span class="n">specify</span> <span class="n">the</span> <span class="n">paths</span> <span class="n">to</span> <span class="n">the</span> <span class="n">classes</span> <span class="k">in</span> <span class="n">the</span> <span class="no">Ext</span><span class="o">.</span><span class="n">Loader</span><span class="p">:</span>
</span></code></pre></td></tr></table></div>
Ext.Loader.setPath({
	&#8216;Ext&#8217;: &#8216;touch/src&#8217;,
	&#8216;FindACab&#8217;: &#8216;app&#8217;
	&#8217;<new namespace="">&#8217;: &#8217;<folder-to-point-to>&#8217;
});
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">This</span> <span class="n">doesn</span><span class="err">’</span><span class="n">t</span> <span class="nb">load</span> <span class="n">anything</span> <span class="k">in</span> <span class="n">memory</span> <span class="n">yet</span><span class="p">;</span> <span class="n">it</span> <span class="n">just</span> <span class="n">tells</span> <span class="n">the</span> <span class="no">Sencha</span> <span class="no">Touch</span> <span class="n">loader</span> <span class="n">where</span> <span class="n">to</span> <span class="n">find</span> <span class="n">files</span> <span class="n">that</span> <span class="n">use</span> <span class="n">the</span> <span class="no">Utils</span> <span class="n">namespace</span><span class="o">.</span> <span class="no">You</span> <span class="n">will</span> <span class="n">use</span> <span class="n">the</span> <span class="no">Utils</span><span class="o">.</span><span class="n">Commons</span> <span class="k">class</span> <span class="k">in</span> <span class="n">your</span> <span class="n">app</span> <span class="n">so</span> <span class="n">the</span> <span class="no">Sencha</span> <span class="no">Touch</span> <span class="n">loader</span> <span class="n">needs</span> <span class="n">to</span> <span class="nb">load</span> <span class="n">the</span> <span class="k">class</span> <span class="k">in</span> <span class="n">its</span> <span class="n">memory</span><span class="o">.</span> <span class="no">Therefore</span><span class="p">,</span> <span class="n">you</span> <span class="n">add</span> <span class="no">Utils</span><span class="o">.</span><span class="n">Commons</span> <span class="n">to</span> <span class="n">the</span> <span class="n">requires</span> <span class="n">array</span> <span class="k">in</span> <span class="n">the</span> <span class="n">app</span><span class="o">.</span><span class="n">js</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="no">The</span> <span class="no">Utils</span><span class="o">.</span><span class="n">Commons</span> <span class="k">class</span> <span class="n">is</span> <span class="n">just</span> <span class="n">a</span> <span class="k">class</span> <span class="n">with</span> <span class="n">static</span> <span class="n">members</span><span class="o">.</span> <span class="n">I</span> <span class="n">can</span> <span class="n">access</span> <span class="n">the</span> <span class="n">defined</span> <span class="n">properties</span> <span class="n">from</span> <span class="n">anywhere</span> <span class="k">in</span> <span class="n">my</span> <span class="n">code</span><span class="o">.</span> <span class="no">For</span> <span class="n">example</span><span class="p">,</span> <span class="k">in</span> <span class="n">the</span> <span class="no">FindACab</span> <span class="n">app</span><span class="p">,</span> <span class="n">I</span> <span class="n">will</span> <span class="n">need</span> <span class="n">to</span> <span class="n">have</span> <span class="n">global</span> <span class="n">access</span> <span class="n">to</span> <span class="n">the</span> <span class="no">YELP_API</span> <span class="no">URL</span><span class="o">.</span> <span class="no">If</span> <span class="n">I</span> <span class="n">add</span> <span class="n">it</span> <span class="n">to</span> <span class="n">the</span> <span class="no">Utils</span><span class="o">.</span><span class="n">Commons</span> <span class="n">class</span><span class="p">,</span> <span class="n">I</span> <span class="n">can</span> <span class="n">access</span> <span class="n">it</span> <span class="n">from</span> <span class="n">anywhere</span> <span class="k">in</span> <span class="n">my</span> <span class="n">code</span> <span class="n">by</span> <span class="n">calling</span> <span class="no">Utils</span><span class="o">.</span><span class="n">Common</span><span class="o">.</span><span class="n">YELP_API</span><span class="o">.</span> <span class="no">The</span> <span class="n">code</span> <span class="k">for</span> <span class="no">Utils</span><span class="o">.</span><span class="n">Commons</span> <span class="n">will</span> <span class="n">look</span> <span class="n">like</span> <span class="no">Example</span> <span class="mi">6</span><span class="o">-</span><span class="mi">7</span><span class="o">.</span>
</span></code></pre></td></tr></table></div>
Ext.define(&#8216;Utils.Commons&#8217;, { 
	statics: {
		YELP_API: &#8216;http://api.yelp.com/business_review_search?&#8217;, YELP_KEY: &#8216;ftPpQUCgfSA3yV98-uJn9g&#8217;,
		YELP_TERM: &#8216;Taxi&#8217;,
		LOCATION: &#8216;Amsterdam NL&#8217;,

		getUrl: function() {
			return this.YELP_API + &#8220;term=&#8221; + this.YELP_TERM +
					&#8220;&amp;ywsid=&#8221; + this.YELP_KEY + 
					&#8220;&amp;location=&#8221; + this.LOCATION;
		}
	}
});
		
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Using</span> <span class="n">the</span> <span class="no">Ext</span><span class="o">.</span><span class="n">Loader</span> <span class="n">is</span> <span class="n">really</span> <span class="n">powerful</span><span class="o">.</span> <span class="no">You</span> <span class="n">no</span> <span class="n">longer</span> <span class="n">have</span> <span class="n">to</span> <span class="n">worry</span> <span class="n">about</span> <span class="n">loading</span> <span class="n">scripts</span> <span class="k">in</span> <span class="n">the</span> <span class="n">correct</span> <span class="n">order</span><span class="o">.</span>
</span><span class="line"><span class="no">It</span><span class="err">’</span><span class="n">s</span> <span class="n">a</span> <span class="n">really</span> <span class="n">good</span> <span class="n">thing</span> <span class="n">that</span> <span class="n">the</span> <span class="no">Sencha</span> <span class="no">Touch</span> <span class="n">loader</span> <span class="n">takes</span> <span class="n">care</span> <span class="n">of</span> <span class="n">this</span><span class="o">.</span> <span class="no">However</span><span class="p">,</span> <span class="n">you</span> <span class="k">do</span> <span class="n">need</span> <span class="n">to</span> <span class="n">tell</span> <span class="n">the</span> <span class="no">Ext</span><span class="o">.</span><span class="n">Loader</span><span class="p">,</span> <span class="err">“</span><span class="no">Hey</span> <span class="n">loader</span><span class="p">,</span> <span class="n">I</span> <span class="nb">require</span> <span class="n">this</span> <span class="n">class</span><span class="p">,</span> <span class="n">so</span> <span class="n">don</span><span class="err">’</span><span class="n">t</span> <span class="n">forget</span> <span class="n">to</span> <span class="nb">load</span> <span class="n">it</span><span class="o">.</span><span class="err">”</span> <span class="no">You</span> <span class="n">can</span> <span class="n">give</span> <span class="n">this</span> <span class="n">instruction</span> <span class="n">by</span> <span class="n">setting</span> <span class="n">the</span> <span class="n">requires</span> <span class="n">array</span> <span class="k">in</span> <span class="n">a</span> <span class="k">class</span>
</span><span class="line">
</span><span class="line"><span class="sb">`Note`</span>
</span><span class="line"><span class="no">When</span> <span class="n">you</span><span class="err">’</span><span class="n">re</span> <span class="n">adding</span> <span class="no">Sencha</span> <span class="n">classes</span> <span class="n">to</span> <span class="n">your</span> <span class="n">project</span> <span class="ow">and</span> <span class="n">they</span> <span class="n">are</span> <span class="ow">not</span> <span class="n">saved</span> <span class="n">within</span> <span class="n">the</span> <span class="n">app</span> <span class="n">folder</span><span class="p">,</span> <span class="n">you</span> <span class="n">will</span> <span class="n">also</span> <span class="n">need</span> <span class="n">to</span> <span class="n">specify</span> <span class="n">the</span> <span class="n">paths</span> <span class="n">to</span> <span class="n">the</span> <span class="n">classpath</span> <span class="n">used</span> <span class="k">for</span> <span class="n">the</span> <span class="n">build</span> <span class="n">process</span><span class="p">;</span> <span class="n">otherwise</span><span class="p">,</span> <span class="n">your</span> <span class="n">builds</span> <span class="n">will</span> <span class="nb">fail</span><span class="o">.</span>
</span><span class="line"><span class="no">There</span> <span class="n">is</span> <span class="n">an</span> <span class="sb">`app`</span> <span class="ow">and</span> <span class="sb">`workspace classpath`</span><span class="o">.</span> <span class="no">The</span> <span class="n">workspace</span> <span class="n">classpath</span> <span class="n">matters</span> <span class="k">when</span> <span class="n">you</span> <span class="n">have</span> <span class="n">multiple</span> <span class="n">applications</span> <span class="ow">and</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">share</span> <span class="n">code</span><span class="p">;</span> <span class="k">in</span> <span class="n">all</span> <span class="n">other</span> <span class="n">situations</span><span class="p">,</span> <span class="n">the</span> <span class="n">app</span> <span class="n">classpath</span> <span class="n">should</span> <span class="n">be</span> <span class="n">good</span> <span class="n">enough</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="no">In</span> <span class="no">Chapter</span> <span class="mi">14</span><span class="p">,</span> <span class="n">you</span> <span class="n">will</span> <span class="n">add</span> <span class="n">the</span> <span class="n">utils</span> <span class="n">folder</span> <span class="n">to</span> <span class="n">the</span> <span class="n">app</span> <span class="n">classpath</span> <span class="k">in</span> <span class="n">the</span> <span class="n">hidden</span> <span class="o">.</span><span class="n">sencha</span><span class="o">/</span><span class="n">sencha</span><span class="o">.</span><span class="n">cfg</span> <span class="n">file</span> <span class="n">so</span> <span class="n">the</span> <span class="no">FindACab</span> <span class="n">app</span> <span class="n">can</span> <span class="n">be</span> <span class="ss">built</span><span class="p">:</span>
</span></code></pre></td></tr></table></div>
	app.classpath=${app.dir}/app.js,${app.dir}/app,${app.dir}/utils
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generate model <mymodelname> <fieldstring><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">You</span> <span class="n">can</span> <span class="n">forget</span> <span class="n">to</span> <span class="n">inform</span> <span class="n">the</span> <span class="sb">`Ext.Loader`</span> <span class="n">about</span> <span class="n">your</span> <span class="n">dependencies</span><span class="p">,</span> <span class="ow">or</span> <span class="n">just</span> <span class="n">ignore</span> <span class="n">it</span><span class="o">.</span> <span class="no">When</span> <span class="n">you</span> <span class="n">run</span> <span class="n">your</span> <span class="n">application</span> <span class="k">in</span> <span class="n">debug</span> <span class="n">mode</span> <span class="p">(</span><span class="n">you</span> <span class="n">can</span> <span class="n">enable</span> <span class="n">it</span> <span class="k">in</span> <span class="n">the</span> <span class="n">app</span><span class="o">.</span><span class="n">json</span> <span class="n">file</span> <span class="n">by</span> <span class="n">loading</span> <span class="n">the</span> <span class="n">sencha</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">debug</span><span class="o">.</span><span class="n">js</span> <span class="n">framework</span> <span class="n">with</span> <span class="n">debug</span> <span class="n">messages</span> <span class="n">instead</span> <span class="n">of</span> <span class="n">sencha</span><span class="o">-</span> <span class="n">touch</span><span class="o">.</span><span class="n">js</span><span class="p">),</span> <span class="n">the</span> <span class="n">console</span> <span class="n">will</span> <span class="kp">throw</span> <span class="n">some</span> <span class="n">warnings</span> <span class="ow">and</span> <span class="n">indicate</span> <span class="n">which</span> <span class="n">classes</span> <span class="n">you</span> <span class="n">need</span> <span class="n">to</span> <span class="nb">require</span>
</span><span class="line">
</span><span class="line"><span class="c1">#### Implementing a Form</span>
</span></code></pre></td></tr></table></div>
	sencha generate form -name MyForm -fields field,field2:textfield
&#8220;`
</fieldstring></mymodelname></span></figcaption></figure></notextile></div></fieldstring></mymodelname></span></figcaption></figure></notextile></div></fieldstring></mymodelname></span></figcaption></figure></notextile></div></folder-to-point-to></new></fieldstring></mymodelname></span></figcaption></figure></notextile></div></fieldstring></mymodelname></span></figcaption></figure></notextile></div></fieldstring></mymodelname></span></figcaption></figure></notextile></div></fieldstring></mymodelname></span></figcaption></figure></notextile></div></mycontroller></fieldstring></mymodelname></span></figcaption></figure></notextile></div></fieldstring></mymodelname></span></figcaption></figure></notextile></div></fieldstring></mymodelname></span></figcaption></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Head First Html5]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/09/22/head-first-html5/"/>
    <updated>2014-09-22T08:44:56+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/09/22/head-first-html5</id>
    <content type="html"><![CDATA[<h4 id="js">JS</h4>
<p>对象的操作</p>

<ul>
  <li>如何创建一个对象</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var fido = {
</span><span class="line">	name: "Fido",
</span><span class="line">	weight: 40,
</span><span class="line">	breed: "Mixed",
</span><span class="line">	loves = ["walks", "fetching balls"]
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>获取对象的属性</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fido.weight 或者 fido["weight"]</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>改变一个属性的值</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fido.weight = 27;
</span><span class="line">fido.loves.push("chewing bones");</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>遍历一个对象的属性</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var prop;
</span><span class="line">for (prop in fido) {
</span><span class="line">	alert("Fido has a "+prop+" property ");
</span><span class="line">	if (prop == "name") {
</span><span class="line">		alert("This is "+ fido[prop]);
</span><span class="line">	}
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>需要注意的是遍历时对象属性的顺序是任意的</p>

<ul>
  <li>遍历对象的数组</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var likes = fido.loves;
</span><span class="line">var likesString = "Fido likes";
</span><span class="line">
</span><span class="line">for (var i = 0; i &lt; likes.length; i++) {
</span><span class="line">	likesString += " "+ likes[i];
</span><span class="line">}
</span><span class="line">alert(likesString);</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>可以任意添加或删除属性
添加属性</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fido.age = 5;</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>删除属性
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">delete fido.age;</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
* 对象也能有方法(函数)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var fido = {
</span><span class="line">	name: "Fido",
</span><span class="line">	weight: 40,
</span><span class="line">	breed: "Mixed",
</span><span class="line">	loves = ["walks", "fetching balls"]
</span><span class="line">	bar: func() {
</span><span class="line">		alert("Woof woof!");
</span><span class="line">	}
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>可以像以下这样调用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fido.bark();</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code>如果在函数中引用了对象的属性，属性前必需加this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var movie1 = {
	title: "Plan 9 from Outer Space",
	genre: "Cult Classic",
	rating: 5,
	showtimes: ["3:00pm", "7:00pm", "11:00pm"],
	getNextShowing: function() {
		var now = new Date().getTime();
		for (var i = 0; i &lt; this.showtimes.length; i++) {
			var showtime = getTimeFromString(this.showtimes[i]); 
</span><span class="line">			
			if ((showtime - now) &gt; 0) {
				return "Next showing of " + this.title + " is " + this.showtimes[i];
			} 
</span><span class="line">		} 
		return null; 
	}
};
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>构造器</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function Dog(name, breed, weight) { 
</span><span class="line">	this.name = name;
	this.breed = breed; 
	this.weight = weight; 
	this.bark = function() {
		if (this.weight &gt; 25) { 
			alert(this.name + " says Woof!");
		} else {
			alert(this.name + " says Yip!");
		} 
</span><span class="line">
	};
}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用构造器创建对象</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var fido = new Dog("Fido", "Mixed", 38);</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>element object
标签p对应的对象的属性和方法</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">innerHTML
</span><span class="line">childElementCount
</span><span class="line">firstChild
</span><span class="line">
</span><span class="line">appendChild
</span><span class="line">insertBefore
</span><span class="line">setAttribute
</span><span class="line">getAttribute
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>###Geolocation
To test your geolocation code on a mobile device, you’re going to want a server.
Unless you have a means of loading your
HTML, JavaScript and CSS files directly onto your mobile device, the easiest way to test them is to place them on a server,  and access them there.we encourage you to follow along with the code on your desktop, and once you have it working there, then test on your mobile device using the server </p>

<ul>
  <li>Some devices may support the other coordinates properties: altitude, altitudeAccuracy, heading, and speed.</li>
</ul>

<h3 id="css">CSS</h3>

<ol>
  <li>
    <p>display: inline 和 display: inline-block的<a href="http://stackoverflow.com/questions/8969381/what-is-the-difference-between-display-inline-and-display-inline-block">区别</a></p>
  </li>
  <li>
    <p>CSS Links</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/* unvisited link */
</span><span class="line">a:link {
</span><span class="line">    color: #FF0000;
</span><span class="line">}
</span><span class="line">
</span><span class="line">/* visited link */
</span><span class="line">a:visited {
</span><span class="line">    color: #00FF00;
</span><span class="line">}
</span><span class="line">
</span><span class="line">/* mouse over link */
</span><span class="line">a:hover {
</span><span class="line">    color: #FF00FF;
</span><span class="line">}
</span><span class="line">
</span><span class="line">/* selected link */
</span><span class="line">a:active {
</span><span class="line">    color: #0000FF;
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>但是需要注意 </p>

<ul>
  <li>a:hover MUST come after a:link and a:visited</li>
  <li>a:active MUST come after a:hover</li>
</ul>

<ol>
  <li><a href="http://960development.com/understand-css-margins-collapsing/">margin Collapse</a></li>
</ol>

<h3 id="html">HTML</h3>

<p>block element: <code>&lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt;</code>前后会留间隙</p>

<p><code>div</code>block container</p>

<p>inline element: <code>&lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt;</code></p>

<h3 id="section">工具</h3>
<ul>
  <li>
    <p>Modernizr</p>

    <p>detect support</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if (Modernizr.geolocation) { 
</span><span class="line">	console.log("You have geo!");
	}
	if (Modernizr.localstorage) {
		console.log("You have web storage!"); }
	if (Modernizr.video) { 
		console.log("You have video!");
	}</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[objc]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/09/15/objc/"/>
    <updated>2014-09-15T14:14:30+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/09/15/objc</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Tips]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/08/31/swift-tips/"/>
    <updated>2014-08-31T14:25:53+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/08/31/swift-tips</id>
    <content type="html"><![CDATA[<ul>
  <li><code>..&lt;</code>等价于<code>..</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let possibleTipsInferred = [0.15, 0.18, 0.20]
</span><span class="line">for i in 0..&lt;possibleTipsInferred.count {
</span><span class="line">  let possibleTip = possibleTipsInferred[i]
</span><span class="line">  println("\(possibleTip*100)%: \(calcTipWithTipPct(possibleTip))")
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Dictionary返回类型</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func returnPossibleTips() -&gt; [Int: Double] { 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>命名空间
<a href="http://www.raywenderlich.com/74904/swift-tutorial-part-2-simple-ios-app">参考</a></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import UIKit
</span><span class="line"> 
</span><span class="line">class ViewController: UIViewController {
</span><span class="line"> 
</span><span class="line">  override func viewDidLoad() {
</span><span class="line">    super.viewDidLoad()
</span><span class="line">    // Do any additional setup after loading the view, typically from a nib.
</span><span class="line">  }
</span><span class="line"> 
</span><span class="line">  override func didReceiveMemoryWarning() {
</span><span class="line">    super.didReceiveMemoryWarning()
</span><span class="line">    // Dispose of any resources that can be recreated.
</span><span class="line">  }</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This is the first example you’ve seen of a class that subclasses another class. Here, you are declaring a new class ViewController that subclasses Apple’s UIViewController.</p>

<p>Experienced iOS developers – note that you do not have to put a class prefix on your class names like you did in Objective-C to avoid namespace collisions (i.e. you don’t have to name this RWTViewController). This is because Swift has namespace support, and the classes you create in your project are in their own namespace.
To see what I mean, replace the class declaration with the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class UIViewController {
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">class ViewController: UIKit.UIViewController {
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here UIKit.UIViewController refers to the UIViewController class in the UIKit namespace. Likewise, TipCalculator.UIViewController would refer to the the UIViewController class in your project.
* String to Double</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> Double((totalTextField.text as NSString).doubleValue)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code>:At the time of writing this tutorial, Swift’s String class does not have access to every method that NSString has (NSString is the string class in the Foundation framework). In particular, Swift’s String class does not have a method to convert to the string to a double; however NSString does.
You can call (xxx as NSString)() on a Swift String to convert it to an NSString. Then, you can call any method that is available on NSString, such as a method to convert to a double.
* sort dict keys</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var keys = Array(possibleTips.keys)
</span><span class="line">sort(&amp;keys)
</span><span class="line">for tipPct in keys {
</span><span class="line">  let tipValue = possibleTips[tipPct]!
</span><span class="line">  let prettyTipValue = String(format:"%.2f", tipValue)
</span><span class="line">  results += "\(tipPct)%: \(prettyTipValue)\n"
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>
    <p>Class Prefixes</p>

    <p>Swift types are all automatically namespaced by the module that contains them. As a result, prefixes are not required in order to minimize naming collisions. If two names from different modules collide you can disambiguate by prefixing the type name with the module name:</p>

    <p>You should not add prefixes to your Swift types.</p>

    <p>If you need to expose a Swift type for use within Objective-C you can provide a suitable prefix (following our Objective-C style guide) as follows:</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@objc (RWTChicken) class Chicken {
</span><span class="line">   ...
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>Value Types and Reference Types</p>

    <p>Instances of value types are copied whenever they’re assigned or used as a function argument. Numbers, strings, arrays, dictionaries, enums, tuples, and structs are value types. For example:</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var a = "Hello"
</span><span class="line">var b = a
</span><span class="line">b.extend(", world")
</span><span class="line">println("a: \(a); b: \(b)") // a: Hello; b: Hello, world</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>xcode 6.1 beta版</li>
</ul>

<p>现在，可以直接在构造器中返回nil表示构造失败。一个表示失败的构造器可以通过init?来声明，它可以返回一个显式的可选类型或隐式解封的可选类型。但要注意对于枚举和结构体来说随时都可以返回nil，而对类则不一样，只有当所有的存储属性被初始化后或者其self.init和super.init被调用后才可以返回nil，当前调用代码就可以收到nil，来判断构造是否成功：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension Int {
</span><span class="line">init?(fromString: String) {
</span><span class="line">if let i = fromString.toInt() {
</span><span class="line">// Initialize
</span><span class="line">self = i
</span><span class="line">} else {
</span><span class="line">// Discard self and return 'nil'.
</span><span class="line">return nil
</span><span class="line">    }
</span><span class="line">  }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>可以这么使用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let twentytwo = Int(fromString: "22") {
</span><span class="line">println("the number is \(twentytwo)”)
</span><span class="line">} else {
</span><span class="line">println("not a number”)
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Calling on Methods
When encapsulated in a class (or struct or enum), the first parameter name of a method is not included externally, while all following parameter names are included externally when the method is called:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class MyFunClass {
</span><span class="line">    
</span><span class="line">    func hello(name: String, age: Int, location: String) {
</span><span class="line">        println("Hello \(name). I live in \(location) too. When is your \(age + 1)th birthday?")
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">}
</span><span class="line">let myFunClass = MyFunClass()
</span><span class="line">myFunClass.hello("Mr. Roboto", age: 5, location: "San Francisco")</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>It is therefore best practice to include your first parameter name in your method name, just like in Objective-C:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class MyFunClass {
</span><span class="line">    
</span><span class="line">    func helloWithName(name: String, age: Int, location: String) {
</span><span class="line">        println("Hello \(name). I live in \(location) too. When is your \(age + 1)th birthday?")
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">}
</span><span class="line">let myFunClass = MyFunClass()
</span><span class="line">myFunClass.helloWithName("Mr. Roboto", age: 5, location: "San Francisco")</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If for some special reason you want to skip the external parameter names in your function (I’d recommend having a very good reason for doing so), use an _ for the external parameter name:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class MyFunClass {
</span><span class="line">    
</span><span class="line">    func helloWithName(name: String, _ age: Int, _ location: String) {
</span><span class="line">        println("Hello \(name). I live in \(location) too. When is your \(age + 1)th birthday?")
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">}
</span><span class="line">
</span><span class="line">let myFunClass = MyFunClass()
</span><span class="line">myFunClass.helloWithName("Mr. Roboto", 5, "San Francisco")</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>
    <p>Instance Methods Are Curried Functions
One cool thing to note is that instance methods are actually curried functions in Swift:</p>

    <pre><code>  The basic idea behind currying is that a function can be partially applied, meaning that some of its parameter values can be specified (bound) before the function is called. Partial function application yields a new function.
</code></pre>
  </li>
</ul>

<p>So given that I have a class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class MyHelloWorldClass {
</span><span class="line">    
</span><span class="line">    func helloWithName(name: String) -&gt; String {
</span><span class="line">        return "hello, \(name)"
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I can create a variable that points to the class’s helloWithName function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let helloWithNameFunc = MyHelloWorldClass.helloWithName</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>My new helloWithNameFunc is of type MyHelloWorldClass -&gt; (String) -&gt; String, a function that takes in an instance of my class and returns another function that takes in a string value and returns a string value.
So I can actually call my function like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let myHelloWorldClassInstance = MyHelloWorldClass()
</span><span class="line">
</span><span class="line">helloWithNameFunc(myHelloWorldClassInstance)("Mr. Roboto") 
</span><span class="line">// hello, Mr. Roboto</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Init: A Special Note
A special init method is called when a class, struct, or enum is initialized. In Swift, you can define initialization parameters, just like with any other method:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Person {
</span><span class="line">    
</span><span class="line">    init(name: String) {
</span><span class="line">        // your init implementation
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">}
</span><span class="line">
</span><span class="line">Person(name: "Mr. Roboto")</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice that, unlike other methods, the <code>first parameter</code> name of an init method is required externally when the class is instantiated.</p>

<p>It is best practice in most cases to add a different external parameter name—fromName in this case—to make the initialization more readable:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Person {
</span><span class="line">    
</span><span class="line">    init(fromName name: String) {
</span><span class="line">        // your init implementation
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">}
</span><span class="line">
</span><span class="line">Person(fromName: "Mr. Roboto")</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>And of course, just like with other methods, you can add an _ if you want your init method to skip the external parameter name.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Celsius {
</span><span class="line">    var temperatureInCelsius: Double
</span><span class="line">    init(fromFahrenheit fahrenheit: Double) {
</span><span class="line">        temperatureInCelsius = (fahrenheit - 32.0) / 1.8
</span><span class="line">    }
</span><span class="line">    init(fromKelvin kelvin: Double) {
</span><span class="line">        temperatureInCelsius = kelvin - 273.15
</span><span class="line">    }
</span><span class="line">    init(_ celsius: Double) {
</span><span class="line">        temperatureInCelsius = celsius
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)
</span><span class="line">// boilingPointOfWater.temperatureInCelsius is 100.0
</span><span class="line">
</span><span class="line">let freezingPointOfWater = Celsius(fromKelvin: 273.15)
</span><span class="line">// freezingPointOfWater.temperatureInCelsius is 0.0
</span><span class="line">
</span><span class="line">let bodyTemperature = Celsius(37.0)
</span><span class="line">// bodyTemperature.temperatureInCelsius is 37.0</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>
    <p>Optional Parameter Types
Optionals are similar to using nil with pointers in Objective-C, but they work for any type, not just classes. Optionals are safer and more expressive than nil pointers in Objective-C and are at the heart of many of Swift’s most powerful features.</p>
  </li>
  <li>
    <p>Parameters with Default Values</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func hello(name: String = "you") {
</span><span class="line">    println("hello, \(name)")
</span><span class="line">}
</span><span class="line">
</span><span class="line">hello(name: "Mr. Roboto")
</span><span class="line">// hello, Mr. Roboto
</span><span class="line">
</span><span class="line">hello()
</span><span class="line">// hello, you</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that a parameter <code>with a default value</code> automatically has an external parameter name.</p>

<ul>
  <li>Variadic Parameters</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func helloWithNames(names: String...) {
</span><span class="line">    for name in names {
</span><span class="line">        println("Hello, \(name)")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">// 2 names
</span><span class="line">helloWithNames("Mr. Robot", "Mr. Potato")
</span><span class="line">// Hello, Mr. Robot
</span><span class="line">// Hello, Mr. Potato
</span><span class="line">
</span><span class="line">// 4 names
</span><span class="line">helloWithNames("Batman", "Superman", "Wonder Woman", "Catwoman")
</span><span class="line">// Hello, Batman
</span><span class="line">// Hello, Superman
</span><span class="line">// Hello, Wonder Woman
</span><span class="line">// Hello, Catwoman</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The catch here is to remember that it is possible to pass in 0 values, just like it is possible to pass in an empty array, so don’t forget to check for the empty array if needed:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func helloWithNames(names: String...) {
</span><span class="line">    if names.count &gt; 0 {
</span><span class="line">        for name in names {
</span><span class="line">            println("Hello, \(name)")
</span><span class="line">        }
</span><span class="line">    } else {
</span><span class="line">        println("Nobody here!")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">helloWithNames()
</span><span class="line">// Nobody here!</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Another note about variadic parameters: the variadic parameter must be the last parameter in your function’s parameter list!</p>

<ul>
  <li>Functions as Parameters
In Swift, functions can be passed around just like variables. For example, a function can have another function passed in as a parameter:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func luckyNumberForName(name: String, #lotteryHandler: (String, Int) -&gt; String) -&gt; String {
</span><span class="line">    let luckyNumber = Int(arc4random() % 100)
</span><span class="line">    return lotteryHandler(name, luckyNumber)
</span><span class="line">}
</span><span class="line">
</span><span class="line">func defaultLotteryHandler(name: String, luckyNumber: Int) -&gt; String {
</span><span class="line">    return "\(name), your lucky number is \(luckyNumber)"
</span><span class="line">}
</span><span class="line">
</span><span class="line">luckyNumberForName("Mr. Roboto", lotteryHandler: defaultLotteryHandler)
</span><span class="line">// Mr. Roboto, your lucky number is 38</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Instance methods can also be passed in a similar way:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func luckyNumberForName(name: String, #lotteryHandler: (String, Int) -&gt; String) -&gt; String {
</span><span class="line">    let luckyNumber = Int(arc4random() % 100)
</span><span class="line">    return lotteryHandler(name, luckyNumber)
</span><span class="line">}
</span><span class="line">
</span><span class="line">class FunLottery {
</span><span class="line">    
</span><span class="line">    func defaultLotteryHandler(name: String, luckyNumber: Int) -&gt; String {
</span><span class="line">        return "\(name), your lucky number is \(luckyNumber)"
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">}
</span><span class="line">
</span><span class="line">let funLottery = FunLottery()
</span><span class="line">luckyNumberForName("Mr. Roboto", lotteryHandler: funLottery.defaultLotteryHandler)
</span><span class="line">// Mr. Roboto, your lucky number is 38</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>To make your function definition a bit more readable, consider type-aliasing your function (similar to typedef in Objective-C):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typealias lotteryOutputHandler = (String, Int) -&gt; String
</span><span class="line">
</span><span class="line">func luckyNumberForName(name: String, #lotteryHandler: lotteryOutputHandler) -&gt; String {
</span><span class="line">    let luckyNumber = Int(arc4random() % 100)
</span><span class="line">    return lotteryHandler(name, luckyNumber)
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can also have a function without a name as a parameter type (similar to blocks in Objective-C):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func luckyNumberForName(name: String, #lotteryHandler: (String, Int) -&gt; String) -&gt; String {
</span><span class="line">    let luckyNumber = Int(arc4random() % 100)
</span><span class="line">    return lotteryHandler(name, luckyNumber)
</span><span class="line">}
</span><span class="line">
</span><span class="line">luckyNumberForName("Mr. Roboto", lotteryHandler: {name, number in
</span><span class="line">    return "\(name)'s' lucky number is \(number)"
</span><span class="line">})
</span><span class="line">// Mr. Roboto's lucky number is 74</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Return a Function
Any function can also return a function in Swift:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func myFuncThatReturnsAFunc() -&gt; (Int) -&gt; String {
</span><span class="line">    return { number in
</span><span class="line">        return "The lucky number is \(number)"
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let returnedFunction = myFuncThatReturnsAFunc()
</span><span class="line">
</span><span class="line">returnedFunction(5) // The lucky number is 5</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To make this more readable, you can of course use type-aliasing for your return function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typealias returnedFunctionType = (Int) -&gt; String
</span><span class="line">
</span><span class="line">func myFuncThatReturnsAFunc() -&gt; returnedFunctionType {
</span><span class="line">    return { number in
</span><span class="line">        return "The lucky number is \(number)"
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let returnedFunction = myFuncThatReturnsAFunc()
</span><span class="line">
</span><span class="line">returnedFunction(5) // The lucky number is 5</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Nested Functions</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func myFunctionWithNumber(someNumber: Int) {
</span><span class="line">
</span><span class="line">    func increment(var someNumber: Int) -&gt; Int {
</span><span class="line">        return someNumber + 10
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    let incrementedNumber = increment(someNumber)
</span><span class="line">    println("The incremented number is \(incrementedNumber)")
</span><span class="line">}
</span><span class="line">
</span><span class="line">myFunctionWithNumber(5)
</span><span class="line">// The incremented number is 15</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li><a href="http://www.objc.io/issue-16/functional-swift-apis.html">Functional APIs with Swift</a>
    <ul>
      <li>The Filter Type</li>
    </ul>

    <p><code>
  typealias Filter = CIImage -&gt; CIImage
 </code>
it may seem strange to use the name Filter for a function type. Usually, we’d use such a name for a class, and the temptation to somehow denote the function nature of this type is high. We could name it FilterFunction or something similar. However, we consciously chose the name Filter, since the key philosophy underlying functional programming is that functions are just values. They’re no different from structs, integers, tuples, or classes. It took me some getting used to as well, but after a while, it started to make a lot of sense.
  * Building Filters</p>
  </li>
  <li>Class 和 Struct的区别
来看以下demo</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct MyStruct {
</span><span class="line">  let t = 12
</span><span class="line">  var u: String
</span><span class="line">}
</span><span class="line">
</span><span class="line">let struct2 = MyStruct(t: 12, u: "World")
</span><span class="line">struct2.u = "Planet" // Error: struct2 is immutable
</span><span class="line">struct2 = MyStruct(t: 10, u: "Defeat") // Error: struct2 is an immutable ref
</span><span class="line">
</span><span class="line">class MyClass {
</span><span class="line">  let t = 12
</span><span class="line">  var u: String
</span><span class="line">
</span><span class="line">  init(t: Int, u: String) {
</span><span class="line">    self.t = t
</span><span class="line">    self.u = u
</span><span class="line">  }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let class2 = MyClass(t: 12, u: "World")
</span><span class="line">class2.u = "Planet" // No error
</span><span class="line">class2 = MyClass(t: 11, u: "Geoid") Error: class2 is an immutable reference
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意以上<code>struct2.u = "Planet"</code>和<code>class2.u = "Planet"</code>的区别
因为struct是<code>值类型</code>,class是<code>引用类型</code></p>

<ul>
  <li>Array</li>
</ul>

<p>Swift arrays aren’t like this - they are value types instead of reference types. This means that they behave like a struct, not a class. Therefore, the let or var keyword not only specifies whether or not the variable can be redefined, but also whether or not the created array is mutable.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var array1 = [1,2,3,4]
</span><span class="line">array1.append(5)  // [1,2,3,4,5]array1[0] = 27    // [27,2,3,4,5]
</span><span class="line">array1 = [3,2]    // [3,2]
</span><span class="line">
</span><span class="line">let array2 = [4,3,2,1]
</span><span class="line">array2.append(0) // Error: array2 is immutablearray2[2] = 36   // Error: array2 is immutable
</span><span class="line">array2 = [5,6]   // Error: cannot reassign an immutable reference</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>AnyObject
AnyObject behaves almost exactly the same as id in objective-C. The difference is that properties and methods which take no arguments will return nil if that method/property doesn’t exist on the AnyObject:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let myString: AnyObject = "hello"
</span><span class="line">myString.cornerRadius // Returns nil</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>还可以有以下用法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func someFunc(parameter: AnyObject!) -&gt; AnyObject! {
</span><span class="line">  if let castedParameter = parameter as? NSString {
</span><span class="line">    // Now I know I have a string :)
</span><span class="line">    ...
</span><span class="line">  }
</span><span class="line">}
</span><span class="line">
</span><span class="line">func someArrayFunc(parameter: [AnyObject]!) {
</span><span class="line">  let newArray = parameter as [String]
</span><span class="line">  // Do something with your strings :)
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Protocol Conformance</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol MyProtocol {
</span><span class="line">  func myProtocolMethod() -&gt; Bool
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In order to check conformance of a protocol that protocol must be an objective-C protocol - and annotated with @objc:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@objc protocol MyNewProtocol {
</span><span class="line">  func myProtocolMethod() -&gt; Bool
</span><span class="line">}
</span><span class="line">
</span><span class="line">if let class1AsMyNewProtocol = class1 as? MyNewProtocol {
</span><span class="line">  // We're in
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Double Optional</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var twice_optional: String?? = Optional.Some(nil)</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Debugger</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(lldb) fr v -R twice_optional
</span><span class="line">(lldb) fr v -d r creature
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Language can be changed
在lldb中,对oc来说,$0,$1….保存了之前的表达式,而在swift文件中则是$R0, $R1….
,可能断点在swift文件中停住了,此时调用[$0 class]可能会报错，可以用以下表达式</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">expr -l objc++ -- (Class)[$0 class]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>表指示lldb来按oc的方式调试,但这么做的话导致的一个后果是<code>locals will not be available</code></p>

<p>当我们用po来打印对象时
* Swift对象display using formatters
* OC对象调用 -description方法</p>

<p>假设有以下一个对象</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class MyObject: NSObject {
</span><span class="line">	var myInt = 1
</span><span class="line">	override var description: String! {
</span><span class="line">		return "Hello Swift subclass. myInt = \(myInt)"
</span><span class="line">	}
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果有一个MyObject的对象objc,在lldb中调用<code>po object</code>命令，会出现以下结果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(lldb) po object
</span><span class="line">0x0000000100700ea0
</span><span class="line">	(ObjectiveC.NSObject) = {}, myInt = 1)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如何让<code>po object</code>调用object的description方式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">expr -l objc++ -o -- 0x0000000100700ea0</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>出现了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Hello Swift subclass. myInt = 1</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Data Formatters for Swift Objects</li>
</ul>

<p>假设有以下struct</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Address {
</span><span class="line">	var name: String
</span><span class="line">	var city: String
</span><span class="line">	var zip: Int
</span><span class="line">	var state: State
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>假设有一个Address的对象enrico,如果 <code>po enrico</code>则显示 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">	Name = "Enrico Granata"
</span><span class="line">	City = "Mountain View"
</span><span class="line">	Zip = 94043
</span><span class="line">	State = California
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>可以按固定的格式显示，如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(lldb) type summary add -s "${var.name} \n ${var.city} \n ${var.zip}, ${var.state}"  projectname.Address</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意必须在类前加上module</code>
此时如果再<code>po enrico</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">"Enrico Granata"
</span><span class="line">"Mountain View"
</span><span class="line">94043, California</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>name uniqueness
假设有一个Module1.swift的文件,里面有一个<code>class MyClass {...}</code>,编译后命名为<code>_TtC7Module17MyClass</code>
如果你碰到了一个以上的mangled name(比如在碰到crash的时候控制台可能会出现此mangle name)该怎么办,可以用以下命令</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">xcrun swift-demangle _TF5MyApp6myFuncFTSiSi_TSS_</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>出现以下结果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">_TF5MyApp6myFuncFTSiSi_TSS_ ---&gt; MyApp.myFunc (Swift.Int, Swift.Int) -&gt; (Swift.String)</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>@objc的妙用</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@objc protocol WeeklyWeatherContainer {
	var dailyWeather: [DailyWeather] { get set }
}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This protocol includes the @objc attribute as required for runtime conformance checking – i.e. checking that a particular object adopts a protocol at runtime, as opposed to compile time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/08/12/swift/"/>
    <updated>2014-08-12T21:29:29+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/08/12/swift</id>
    <content type="html"><![CDATA[<h4 id="section">变量定义</h4>
<p>常量用let,变量用var</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var myVariable = 42
</span><span class="line">myVariable = 50
</span><span class="line">let myConstant = 42
</span><span class="line">let explicitDouble: Double = 70
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>变量的值不会自动转化为其他类型的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let label = "The width is "
</span><span class="line">let width = 94
</span><span class="line">let widthLabel = label+String(width)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>String内的值替换</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let apples = 3
</span><span class="line">let oranges = 5
</span><span class="line">let appleSummary = "I have \(apples) apples.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>数组和字典</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var shoppingList = ["catfish", "water", "tulips", "blue paint"]
</span><span class="line">
</span><span class="line">shoppingList[1] = "bottle of water"
</span><span class="line"> 
</span><span class="line">var occupations = [
</span><span class="line">
</span><span class="line">    "Malcolm": "Captain",
</span><span class="line">
</span><span class="line">    "Kaylee": "Mechanic",
</span><span class="line">]
</span><span class="line">occupations["Jayne"] = "Public Relations”
</span><span class="line">
</span><span class="line">let emptyArray = String[]()
</span><span class="line">let emptyDictionary = Dictionary&lt;String, Float&gt;()
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果类型是能推断的，可以用[]创建一个空数组，用[:]创建一个空字典
####条件语句
if…else…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let individualScores = [75, 43, 103, 87, 12]
</span><span class="line">var teamScore = 0
</span><span class="line">for score in individualScores {
</span><span class="line">    if score &gt; 50 {
</span><span class="line">        teamScore += 3
</span><span class="line">    } else {
</span><span class="line">        teamScore += 1
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">teamScore</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意，在if条件语句中，condition必须是bool表达式，所以类似<code>if score {...}</code>这样的代码是错误的
if和optional value组成的条件表达式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var optionalString: String? = "Hello"
</span><span class="line">optionalString == nil
</span><span class="line"> 
</span><span class="line">var optionalName: String? = "John Appleseed"
</span><span class="line">var greeting = "Hello!"
</span><span class="line">if let name = optionalName {
</span><span class="line">    greeting = "Hello, \(name)"
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>switch和case语句支持多种类型的比较,不限于integer</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let vegetable = "red pepper"
</span><span class="line">switch vegetable {
</span><span class="line">case "celery":
</span><span class="line">    let vegetableComment = "Add some raisins and make ants on a log."
</span><span class="line">case "cucumber", "watercress":
</span><span class="line">    let vegetableComment = "That would make a good tea sandwich."
</span><span class="line">case let x where x.hasSuffix("pepper"):
</span><span class="line">    let vegetableComment = "Is it a spicy \(x)?"
</span><span class="line">default:
</span><span class="line">    let vegetableComment = "Everything tastes good in soup."
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意:执行完case语句，程序就从switch语句里终止了，所以无需break!</p>

<p>遍历dictionary</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let interestingNumbers = [
</span><span class="line">    "Prime": [2, 3, 5, 7, 11, 13],
</span><span class="line">    "Fibonacci": [1, 1, 2, 3, 5, 8],
</span><span class="line">    "Square": [1, 4, 9, 16, 25],
</span><span class="line">]
</span><span class="line">var largest = 0
</span><span class="line">for (kind, numbers) in interestingNumbers {
</span><span class="line">    for number in numbers {
</span><span class="line">        if number &gt; largest {
</span><span class="line">            largest = number
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">largest</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>while语句</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var n = 2
</span><span class="line">while n &lt; 100 {
</span><span class="line">    n = n * 2
</span><span class="line">}
</span><span class="line">n
</span><span class="line"> 
</span><span class="line">var m = 2
</span><span class="line">do {
</span><span class="line">    m = m * 2
</span><span class="line">} while m &lt; 100
</span><span class="line">m</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>..</code>的妙用,以下两个循环是等价的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var firstForLoop = 0
</span><span class="line">for i in 0..3 {
</span><span class="line">    firstForLoop += i
</span><span class="line">}
</span><span class="line">firstForLoop
</span><span class="line"> 
</span><span class="line">var secondForLoop = 0
</span><span class="line">for var i = 0; i &lt; 3; ++i {
</span><span class="line">    secondForLoop += 1
</span><span class="line">}
</span><span class="line">secondForLoop</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####函数和闭包
函数的声明
用-&gt;将参数与返回值区分开来</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func greet(name: String, day: String) -&gt; String {
</span><span class="line">    return "Hello \(name), today is \(day)."
</span><span class="line">}
</span><span class="line">greet("Bob", "Tuesday")</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用tuple从函数中返回多个值
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">func getGasPrices() -&gt; (Double, Double, Double) {
</span><span class="line">    return (3.59, 3.69, 3.79)
</span><span class="line">}
</span><span class="line">getGasPrices()</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
函数也能接收不定数量的参数，将它们封成到一个数组里</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func sumOf(numbers: Int...) -&gt; Int {
</span><span class="line">    var sum = 0
</span><span class="line">    for number in numbers {
</span><span class="line">        sum += number
</span><span class="line">    }
</span><span class="line">    return sum
</span><span class="line">}
</span><span class="line">sumOf()
</span><span class="line">sumOf(42, 597, 12)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>函数也能嵌套，内嵌的函数能访问声明在外部函数的变量
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">func returnFifteen() -&gt; Int {
</span><span class="line">    var y = 10
</span><span class="line">    func add() {
</span><span class="line">        y += 5
</span><span class="line">    }
</span><span class="line">    add()
</span><span class="line">    return y
</span><span class="line">}
</span><span class="line">returnFifteen()</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
函数是first-class类型，这意味着函数也能返回另一个函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func makeIncrementer() -&gt; (Int -&gt; Int) {
</span><span class="line">    func addOne(number: Int) -&gt; Int {
</span><span class="line">        return 1 + number
</span><span class="line">    }
</span><span class="line">    return addOne
</span><span class="line">}
</span><span class="line">var increment = makeIncrementer()
</span><span class="line">increment(7)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>函数的参数也能是函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func hasAnyMatches(list: Int[], condition: Int -&gt; Bool) -&gt; Bool {
</span><span class="line">    for item in list {
</span><span class="line">        if condition(item) {
</span><span class="line">            return true
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    return false
</span><span class="line">}
</span><span class="line">func lessThanTen(number: Int) -&gt; Bool {
</span><span class="line">    return number &lt; 10
</span><span class="line">}
</span><span class="line">var numbers = [20, 19, 7, 12]
</span><span class="line">hasAnyMatches(numbers, lessThanTen)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>函数实际上是闭包的一种特殊形式，我们可以用{}来写一个匿名的闭包,用in来将参数和返回类型区分开来</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">numbers.map({
</span><span class="line">    (number: Int) -&gt; Int in
</span><span class="line">    let result = 3 * number
</span><span class="line">    return result
</span><span class="line">    })</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果一个closure的类型是已知的，比如已知一个delegate的回调，我们可以省略参数的类型，返回类型或两者都省略,以上可以改写成以下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">numbers.map({ number in 3 * number })</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们也可以用数字而不是名字来表示参数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sort([1, 5, 3, 12, 2]) { $0 &gt; $1 }</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####对象和类</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Shape {
</span><span class="line">    var numberOfSides = 0
</span><span class="line">    func simpleDescription() -&gt; String {
</span><span class="line">        return "A shape with \(numberOfSides) sides."
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var shape = Shape()
</span><span class="line">shape.numberOfSides = 7
</span><span class="line">var shapeDescription = shape.simpleDescription()</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>init</code>的使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class NamedShape {
</span><span class="line">    var numberOfSides: Int = 0
</span><span class="line">    var name: String
</span><span class="line">    
</span><span class="line">    init(name: String) {
</span><span class="line">        self.name = name
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    func simpleDescription() -&gt; String {
</span><span class="line">        return "A shape with \(numberOfSides) sides."
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>每一个property都需要赋值，可以在它声明的时候(如numberOfSlides)也可以在initializer里(如name)
定义deinit来创建一个deinitializer如果你需要在对象被释放前做一些清理工作的话
继承时，如果要重写superclass的方法，必须要在重写的方法前加override</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Square: NamedShape {
</span><span class="line">    var sideLength: Double
</span><span class="line">    
</span><span class="line">    init(sideLength: Double, name: String) {
</span><span class="line">        self.sideLength = sideLength
</span><span class="line">        super.init(name: name)
</span><span class="line">        numberOfSides = 4
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    func area() -&gt;  Double {
</span><span class="line">        return sideLength * sideLength
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    override func simpleDescription() -&gt; String {
</span><span class="line">        return "A square with sides of length \(sideLength)."
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let test = Square(sideLength: 5.2, name: "my test square")
</span><span class="line">test.area()
</span><span class="line">test.simpleDescription()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>为property定义getter和setter</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class EquilateralTriangle: NamedShape {
</span><span class="line">    var sideLength: Double = 0.0
</span><span class="line">    
</span><span class="line">    init(sideLength: Double, name: String) {
</span><span class="line">        self.sideLength = sideLength
</span><span class="line">        super.init(name: name)
</span><span class="line">        numberOfSides = 3
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    var perimeter: Double {
</span><span class="line">    get {
</span><span class="line">        return 3.0 * sideLength
</span><span class="line">    }
</span><span class="line">    set {
</span><span class="line">        sideLength = newValue / 3.0
</span><span class="line">    }
</span><span class="line"> }
</span><span class="line"> 
</span><span class="line"> override func simpleDescription() -&gt; String {
</span><span class="line">    	    return "An equilateral triagle with sides of length \(sideLength)."
</span><span class="line">	    }
</span><span class="line"> }
</span><span class="line">var triangle = EquilateralTriangle(sideLength: 3.1, name: "a triangle")
</span><span class="line">triangle.perimeter
</span><span class="line">triangle.perimeter = 9.9
</span><span class="line">triangle.sideLength</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在perimeter的setter方法中，新值有一个默认的名字newValue,我们可以在set后的括号里为这个值指定一个名字
如果你无需计算property的值，但需要在设置新值的前后做一些操作，可以用<code>willSet</code>和<code>didSet</code>,比如</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class TriangleAndSquare {
</span><span class="line">    var triangle: EquilateralTriangle {
</span><span class="line">	    willSet {
</span><span class="line">	        square.sideLength = newValue.sideLength
</span><span class="line">	    }
</span><span class="line">    }
</span><span class="line">    var square: Square {
</span><span class="line">	    willSet {
</span><span class="line">	        triangle.sideLength = newValue.sideLength
</span><span class="line">	    }
</span><span class="line">    }
</span><span class="line">    init(size: Double, name: String) {
</span><span class="line">        square = Square(sideLength: size, name: name)
</span><span class="line">        triangle = EquilateralTriangle(sideLength: size, name: name)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var triangleAndSquare = TriangleAndSquare(size: 10, name: "another test shape")
</span><span class="line">triangleAndSquare.square.sideLength
</span><span class="line">triangleAndSquare.triangle.sideLength
</span><span class="line">triangleAndSquare.square = Square(sideLength: 50, name: "larger square")
</span><span class="line">triangleAndSquare.triangle.sideLength</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>类方法与函数有一个很重要的区别，类方法里可以为参数指定一个别名,而函数不行，如下
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">class Counter {
</span><span class="line">    var count: Int = 0
</span><span class="line">    func incrementBy(amount: Int, numberOfTimes times: Int) {
</span><span class="line">        count += amount * times
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var counter = Counter()
</span><span class="line">counter.incrementBy(2, numberOfTimes: 7)</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
当与optional values工作时，你可以在有关方法，属性和[]操作前写一个<code>?</code>如果在?前的值为nil,则一切在？后的操作都被忽略了，整个表达式的值也就是nil了，否则optional value unwrapped,所有?后表达式对应的值为optional value,无论如何，整个表达式的值都是optional value</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let optionalSquare: Square? = Square(sideLength: 2.5, name: "optional square")
</span><span class="line">let sideLength = optionalSquare?.sideLength</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Enumerations and Structures
像类和其他类型一样,enumerations可以有方法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum Rank: Int {
</span><span class="line">    case Ace = 1  //也可以用字符串或符点型来指定枚举的类型
</span><span class="line">    case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten
</span><span class="line">    case Jack, Queen, King
</span><span class="line">    func simpleDescription() -&gt; String {
</span><span class="line">        switch self {
</span><span class="line">        case .Ace:
</span><span class="line">            return "ace"
</span><span class="line">        case .Jack:
</span><span class="line">            return "jack"
</span><span class="line">        case .Queen:
</span><span class="line">            return "queen"
</span><span class="line">        case .King:
</span><span class="line">            return "king"
</span><span class="line">        default:
</span><span class="line">            return String(self.toRaw())
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let ace = Rank.Ace
</span><span class="line">let aceRawValue = ace.toRaw()	//1</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用<code>toRaw</code>和<code>fromRaw</code>函数来对raw value和枚举值进行相互转换</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let convertedRank = Rank.fromRaw(3) {
</span><span class="line">    let threeDescription = convertedRank.simpleDescription()
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The member values of an enumeration are actual values, not just another way of writing their raw values.如果没有一个有意义的raw value，你不需要再指定它</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum Suit {
</span><span class="line">    case Spades, Hearts, Diamonds, Clubs
</span><span class="line">    func simpleDescription() -&gt; String {
</span><span class="line">        switch self {
</span><span class="line">        case .Spades:
</span><span class="line">            return "spades"
</span><span class="line">        case .Hearts:
</span><span class="line">            return "hearts"
</span><span class="line">        case .Diamonds:
</span><span class="line">            return "diamonds"
</span><span class="line">        case .Clubs:
</span><span class="line">            return "clubs"
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let hearts = Suit.Hearts
</span><span class="line">let heartsDescription = hearts.simpleDescription()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用struct来创建一个结构,struct支持类的很多方面，如方法和初始化，和类的最大区别是structures总量以copy的形式传递，而class则以引用的形式传递</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Card {
</span><span class="line">    var rank: Rank
</span><span class="line">    var suit: Suit
</span><span class="line">    func simpleDescription() -&gt; String {
</span><span class="line">        return "The \(rank.simpleDescription()) of \(suit.simpleDescription())"
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let threeOfSpades = Card(rank: .Three, suit: .Spades)
</span><span class="line">let threeOfSpadesDescription = threeOfSpades.simpleDescription()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Instances of the same enumeration member can have different values associated with them.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum ServerResponse {
</span><span class="line">    case Result(String, String)
</span><span class="line">    case Error(String)
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">let success = ServerResponse.Result("6:00 am", "8:09 pm")
</span><span class="line">let failure = ServerResponse.Error("Out of cheese.")
</span><span class="line"> 
</span><span class="line">switch success {
</span><span class="line">case let .Result(sunrise, sunset):
</span><span class="line">    let serverResponse = "Sunrise is at \(sunrise) and sunset is at \(sunset)."
</span><span class="line">case let .Error(error):
</span><span class="line">    let serverResponse = "Failure...  \(error)"
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意sunrise和sunset如何匹配switch中case的条件而从ServerResponse里值取出来的</p>

<h4 id="extensions">协议和Extensions</h4>
<p>用<code>protocol</code>来声明一个协议</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol ExampleProtocol {
</span><span class="line">    var simpleDescription: String { get }
</span><span class="line">    mutating func adjust()
</span><span class="line">}
</span><span class="line">
</span><span class="line">
</span><span class="line">class SimpleClass: ExampleProtocol {
</span><span class="line">    var simpleDescription: String = "A very simple class."
</span><span class="line">    var anotherProperty: Int = 69105
</span><span class="line">    func adjust() {
</span><span class="line">        simpleDescription += "  Now 100% adjusted."
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var a = SimpleClass()
</span><span class="line">a.adjust()
</span><span class="line">let aDescription = a.simpleDescription
</span><span class="line"> 
</span><span class="line">struct SimpleStructure: ExampleProtocol {
</span><span class="line">    var simpleDescription: String = "A simple structure"
</span><span class="line">    mutating func adjust() {
</span><span class="line">        simpleDescription += " (adjusted)"
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var b = SimpleStructure()
</span><span class="line">b.adjust()
</span><span class="line">let bDescription = b.simpleDescription</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意在struct中mutating的使用,class中的方法无需标记为mutating,因为类中的方法总是可以改变类的
用extensions来为一个已知的类型添加功能，比如新的方法和computed properties</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension Int: ExampleProtocol {
</span><span class="line">    var simpleDescription: String {
</span><span class="line">    return "The number \(self)"
</span><span class="line">    }
</span><span class="line">    mutating func adjust() {
</span><span class="line">        self += 42
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">7.simpleDescription</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can use an extension to add protocol conformance to a type that is declared elsewhere, or even to a type that you imported from a library or framework.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let protocolValue: ExampleProtocol = a
</span><span class="line">protocolValue.simpleDescription
</span><span class="line">// protocolValue.anotherProperty  // Uncomment to see the error”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>尽管protocolValue有一个运行时的类型SimpleClass,但编译器仍把它当作ExampleProtocol的一种类型，也就是说说了定义时协议对应的方法，你不能调用它实际所属类的方法，属性</p>

<h4 id="generics">Generics</h4>
<p>在尖括号里写一个名字来创建一个generic函数或类型</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func repeat&lt;ItemType&gt;(item: ItemType, times: Int) -&gt; ItemType[] {
</span><span class="line">    var result = ItemType[]()
</span><span class="line">    for i in 0..times {
</span><span class="line">        result += item
</span><span class="line">    }
</span><span class="line">    return result
</span><span class="line">}
</span><span class="line">repeat("knock", 4)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们既可以将这种形式用在函数和方法上，也可以用在类，枚举，结构体的定义上</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Reimplement the Swift standard library's optional type
</span><span class="line">enum OptionalValue&lt;T&gt; {
</span><span class="line">    case None
</span><span class="line">    case Some(T)
</span><span class="line">}
</span><span class="line">var possibleInteger: OptionalValue&lt;Int&gt; = .None
</span><span class="line">possibleInteger = .Some(100)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在类型名后加一个where来指定一些必须条件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func anyCommonElements &lt;T, U where T: Sequence, U: Sequence, T.GeneratorType.Element: Equatable, T.GeneratorType.Element == U.GeneratorType.Element&gt; (lhs: T, rhs: U) -&gt; Bool {
</span><span class="line">    for lhsItem in lhs {
</span><span class="line">        for rhsItem in rhs {
</span><span class="line">            if lhsItem == rhsItem {
</span><span class="line">                return true
</span><span class="line">            }
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    return false
</span><span class="line">}
</span><span class="line">anyCommonElements([1, 2, 3], [3])</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>练习
Modify the anyCommonElements function to make a function that returns an array of the elements that any two sequences have in common.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func anyCommonElements &lt;T, U where T: Sequence, U: Sequence, T.GeneratorType.Element:     Equatable, T.GeneratorType.Element == U.GeneratorType.Element&gt; (lhs: T, rhs: U) -&gt; Array&lt;T.GeneratorType.Element&gt; {
</span><span class="line">    var toReturn = Array&lt;T.GeneratorType.Element&gt;()
</span><span class="line">    for lhsItem in lhs {
</span><span class="line">        for rhsItem in rhs {
</span><span class="line">            if lhsItem == rhsItem {
</span><span class="line">                toReturn.append(lhsItem)
</span><span class="line">            }
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    return toReturn
</span><span class="line">}
</span><span class="line">anyCommonElements([1, 2, 3], [3])</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在一些简单的情况下，可以省略where，只在分号后写一个protocol或是类名，<t: equatable="">和<t where="" t:="" equatable="">是一样的
Swift是类型安全的语言,如果你的代码希望的是String类型，类型安全将阻止你赋Int值给它
####常量和变量的命名</t></t:></p>

<p>我们几乎可以用任何字符来命名常量和变量，包括Unicode字符</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let π = 3.14159
</span><span class="line">let 你好 = "你好世界"
</span><span class="line">let 🐶🐮 = "dogcow”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>一旦你声明了某种类型的常量和变量，你就不能为它赋予其他类型的变量
####打印
打印变量 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">println(friendlyWelcome)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>打印中包含字符替换</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">println("The current value of friendlyWelcome is \(friendlyWelcome)")</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####注释
不像C语言中的多行注释，Swift的多行注释是可以嵌套的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/* this is the start of the first multiline comment
</span><span class="line">/* this is the second, nested multiline comment */
</span><span class="line">this is the end of the first multiline comment */</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####分号的使用
如果一行中包含多条语句，就得用分号</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let cat = "🐱"; println(cat)
</span><span class="line">// prints "🐱”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####整型
* 整型范围</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8
</span><span class="line">let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8”</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Int型和UInt
在32位OS上，(U)Int和(U)Int32的大小一样
在64位OS上，(U)Int和(U)Int64的大小一样
只有在你确实需要和OS本身的字大小一样的非整形类型时才用UInt，否则尽量用Int
####浮点型 </li>
  <li>Double代表了64位的浮点数，有至少15位小数的精度</li>
  <li>Float代表了32位，只有6位小数的精度
####Numeric Literals
整型字面量可以写成以下形式</li>
  <li>10进制，无前缀</li>
  <li>二进度，0b前缀</li>
  <li>八进制，0o前缀</li>
  <li>十六进制，0x前缀</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let decimalInteger = 17
</span><span class="line">let binaryInteger = 0b10001       // 17 in binary notation
</span><span class="line">let octalInteger = 0o21           // 17 in octal notation
</span><span class="line">let hexadecimalInteger = 0x11     // 17 in hexadecimal notation”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>浮点型可以是十制的(无前缀),也可以是十六进制的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1.25e2 means 1.25 × 102, or 125.0.
</span><span class="line">1.25e-2 means 1.25 × 10-2, or 0.0125.
</span><span class="line">0xFp2 means 15 × 2*2, or 60.0.
</span><span class="line">0xFp-2 means 15 × (2的-2次方), or 3.75.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####整型转换
溢出会报错</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let cannotBeNegative: UInt8 = -1
</span><span class="line">// UInt8 cannot store negative numbers, and so this will report an error
</span><span class="line">let tooBig: Int8 = Int8.max + 1
</span><span class="line">// Int8 cannot store a number larger than its maximum value,
</span><span class="line">// and so this will also report an error</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来看以下例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let twoThousand: UInt16 = 2_000
</span><span class="line">let one: UInt8 = 1
</span><span class="line">let twoThousandAndOne = twoThousand + UInt16(one)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>以上的UInt16是必须的,因为两个变量的类型不同
####整形和浮点型的转换
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">let three = 3
</span><span class="line">let pointOneFourOneFiveNine = 0.14159
</span><span class="line">let pi = Double(three) + pointOneFourOneFiveNine</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
浮点型转为整型，只保留整数,不会出现四舍五入这种情况
####Type Aliases</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typealias AudioSample = UInt16
</span><span class="line">var maxAmplitudeFound = AudioSample.min</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Bool型
Swift的类型安全阻止了任何非bool型的值自动替换成Bool型的值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let i = 1
</span><span class="line">if i {
</span><span class="line">    // this example will not compile, and will report an error
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>不过，以下使用方式却是对的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let i = 1
</span><span class="line">if i == 1 {
</span><span class="line">    // this example will compile successfully
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Tuples
tuple将多个值组合一个复合的值，并且这些值可以是不同类型的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let http404Error = (404, "Not Found")
</span><span class="line">
</span><span class="line">let (statusCode, statusMessage) = http404Error
</span><span class="line">println("The status code is \(statusCode)")
</span><span class="line">// prints "The status code is 404"
</span><span class="line">println("The status message is \(statusMessage)")
</span><span class="line">// prints "The status message is Not Found</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果你只需要一部分tuple的值 ，你可以用_来忽略你不需要的值 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let (justTheStatusCode, _) = http404Error
</span><span class="line">println("The status code is \(justTheStatusCode)")
</span><span class="line">// prints "The status code is 404</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>也可以用以下方式来获取tuple里的值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">println("The status code is \(http404Error.0)")
</span><span class="line">// prints "The status code is 404"
</span><span class="line">println("The status message is \(http404Error.1)")
</span><span class="line">// prints "The status message is Not Found</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在定义tuple的时候可以为每个element赋值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let http200Status = (statusCode: 200, description: "OK")
</span><span class="line">println("The status code is \(http200Status.statusCode)")
</span><span class="line">// prints "The status code is 200"
</span><span class="line">println("The status message is \(http200Status.description)")
</span><span class="line">// prints "The status message is OK"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意:Tuples仅仅适用于临时的一组相关的数据,它并不适用于复杂数据类型的创建</p>

<h4 id="optionals">Optionals</h4>
<p>Swift’s optionals let you indicate the absence of a value for any type at all, without the need for special constants.</p>

<h4 id="forced-unwrapping">Forced Unwrapping</h4>
<p>当我们确定optional<code>确定</code>含有一个值时，我们可以在这个optional的名字后面加一个!来获取它的值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if convertedNumber {
</span><span class="line">    println("\(possibleNumber) has an integer value of \(convertedNumber!)")
</span><span class="line">} else {
</span><span class="line">    println("\(possibleNumber) could not be converted to an integer")
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Optional Binding</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let constantName = someOptional {
</span><span class="line">    statements
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们可以按如下方式重写之前的<code>possibleNumber</code>的例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let actualNumber = possibleNumber.toInt() {
</span><span class="line">    println("\(possibleNumber) has an integer value of \(actualNumber)")
</span><span class="line">} else {
</span><span class="line">    println("\(possibleNumber) could not be converted to an integer")
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>你可以赋予一个optional 值为nil,非optional的则不行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var serverResponseCode: Int? = 404
</span><span class="line">// serverResponseCode contains an actual Int value of 404
</span><span class="line">serverResponseCode = nil</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果在定义一个optional value时不提供一个默认值，则它为nil</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var surveyAnswer: String?
</span><span class="line">// surveyAnswer is automatically set to nil”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>需要注意的是swift的nil与oc中的nil不同,oc中的nil是一个指定不存在的对象的指针，而swift中的nil则不是指针，它只是表示某种类型的值不存在，任何类型的optional都能设置为nil，而不仅仅是对象</p>

<h4 id="implicitly-unwrapped-optional">Implicitly Unwrapped Optional</h4>
<p>也就是类型后加!,仔细看以下的区别</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let possibleString: String? = "An optional string."
</span><span class="line">println(possibleString!) // requires an exclamation mark to access its value
</span><span class="line">// prints "An optional string."
</span><span class="line"> 
</span><span class="line">let assumedString: String! = "An implicitly unwrapped optional string."
</span><span class="line">println(assumedString)  // no exclamation mark is needed to access its value
</span><span class="line">// prints "An implicitly unwrapped optional string.
</span><span class="line">
</span><span class="line">if assumedString {
</span><span class="line">    println(assumedString)
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####断言</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let age = -3
</span><span class="line">assert(age &gt;= 0, "A person's age cannot be less than zero")
</span><span class="line">// this causes the assertion to trigger, because age is not &gt;= 0</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>也可以不写string</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">assert(age &gt;= 0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意assert里的string不支持<code>\()</code>形式的替换
####基本操作
Swift允许你对浮点值进行%的运算
赋值 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let b = 10
</span><span class="line">var a = 5
</span><span class="line">a = b</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>不过不像C，赋值本身不返回值，所以以下是非法的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if x = y {
</span><span class="line">    // this is not valid, because x = y does not return a value
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>不像C，Swift默认情况下不允许进行算术运算时的值溢出
两个Character的值，或者一个Character和一个String的值，能相加组成一个新的String的值 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let dog: Character = "🐶"
</span><span class="line">let cow: Character = "🐮"
</span><span class="line">let dogCow = dog + cow
</span><span class="line">// dogCow is equal to "🐶🐮”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####求余运算符%</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-9 % 4   // equals -1</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>除数的符号是被忽略的，也就是说a % b和a % -b的值是一样的
浮点数的求余操作</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">8 % 2.5   // equals 0.5</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####比较操作符
<code>===</code>可以用来测试两个对象的引用是否指向同一个对象</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let name = "world"
</span><span class="line">if name == "world" {
</span><span class="line">    println("hello, world")
</span><span class="line">} else {
</span><span class="line">    println("I'm sorry \(name), but I don't recognize you")
</span><span class="line">}
</span><span class="line">// prints "hello, world", because name is indeed equal to "world"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Range操作
闭区间</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for index in 1...5 {
</span><span class="line">    println("\(index) times 5 is \(index * 5)")
</span><span class="line">}
</span><span class="line">// 1 times 5 is 5
</span><span class="line">// 2 times 5 is 10
</span><span class="line">// 3 times 5 is 15
</span><span class="line">// 4 times 5 is 20
</span><span class="line">// 5 times 5 is 25”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>开区间</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let names = ["Anna", "Alex", "Brian", "Jack"]
</span><span class="line">let count = names.count
</span><span class="line">for i in 0..count {
</span><span class="line">    println("Person \(i + 1) is called \(names[i])")
</span><span class="line">}
</span><span class="line">// Person 1 is called Anna
</span><span class="line">// Person 2 is called Alex
</span><span class="line">// Person 3 is called Brian
</span><span class="line">// Person 4 is called Jack</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####字符串和字符
Every string is composed of encoding-independent Unicode characters, and provides support for accessing those characters in various Unicode representations.
注意OC中的string相关的API，Swift都的String都能使用 
#####String Literals
* 转义字符\0(空字符),\(返斜杆),\t,\n,\r,&#8221;,`
* 单字节的Unicode scalars,\xnn,nn是两位十六进制的数字
* 两个字节的Unicode scalars,\unnnn,nnnn是一个四位十六进制的数字
* 四个字节的Unicode scalars,\Unnnnnnnn,nnnnnnnn是八位的十六进制的数字</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
</span><span class="line">// "Imagination is more important than knowledge" - Einstein
</span><span class="line">let dollarSign = "\x24"        // $,  Unicode scalar U+0024
</span><span class="line">let blackHeart = "\u2665"      // ♥,  Unicode scalar U+2665
</span><span class="line">let sparklingHeart = "\U0001F496"  // 💖, Unicode scalar U+1F496”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####初始化一个空字符串</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var emptyString = ""               // empty string literal
</span><span class="line">var anotherEmptyString = String()  // initializer syntax
</span><span class="line">// these two strings are both empty, and are equivalent to each other</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>判断一个String的值是否是空的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if emptyString.isEmpty {
</span><span class="line">    println("Nothing to see here")
</span><span class="line">}
</span><span class="line">// prints "Nothing to see here</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>你可以在定义一个字符串时用var和let来表示字符串是否可变</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var variableString = "Horse"
</span><span class="line">variableString += " and carriage"
</span><span class="line">// variableString is now "Horse and carriage"
</span><span class="line"> 
</span><span class="line">let constantString = "Highlander"
</span><span class="line">constantString += " and another Highlander"
</span><span class="line">// this reports a compile-time error - a constant string cannot be modified</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Strings是值类型
也就是说如果string的值被传入函数或方法，或被赋值时，它是被copy的！幕后，Swift的编译器优化了string的使用，所以copy只有在真正需要的时候才发生,这意味着你无需担心性能总量
#####遍历string中的字符</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for character in "Dog!🐶" {
</span><span class="line">    println(character)
</span><span class="line">}
</span><span class="line">// D
</span><span class="line">// o
</span><span class="line">// g
</span><span class="line">// !
</span><span class="line">// 🐶”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>创建一个character</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let yenSign: Character = "¥"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####计算Characters的个数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let unusualMenagerie = "Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪"
</span><span class="line">println("unusualMenagerie has \(countElements(unusualMenagerie)) characters")
</span><span class="line">// prints "unusualMenagerie has 40 characters”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>不同的Unicode字符或同一Unicode字符的不同表示形式在内存中占的空间不一样，基于此，swift中的字符并不占用同样的内存，所以要计算一个string的长度，我们必须逐个遍历字符</p>

<p><code>Note</code> also that the character count returned by countElements is not always the same as the length property of an NSString that contains the same characters. The length of an NSString is based on the number of 16-bit code units within the string’s UTF-16 representation and not the number of Unicode characters within the string. To reflect this fact, the length property from NSString is called utf16count when it is accessed on a Swift String value.
####连接字符串和字符</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let string1 = "hello"
</span><span class="line">let string2 = " there"
</span><span class="line">let character1: Character = "!"
</span><span class="line">let character2: Character = "?"
</span><span class="line"> 
</span><span class="line">let stringPlusCharacter = string1 + character1        // equals "hello!"
</span><span class="line">let stringPlusString = string1 + string2              // equals "hello there"
</span><span class="line">let characterPlusString = character1 + string1        // equals "!hello"
</span><span class="line">let characterPlusCharacter = character1 + character2  // equals "!?”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####比较字符串</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let quotation = "We're a lot alike, you and I."
</span><span class="line">let sameQuotation = "We're a lot alike, you and I."
</span><span class="line">if quotation == sameQuotation {
</span><span class="line">    println("These two strings are considered equal")
</span><span class="line">}
</span><span class="line">// prints "These two strings are considered equal</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####前缀和后缀的比较
hasPrefix和hasSuffix
前缀</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let romeoAndJuliet = [
</span><span class="line">    "Act 1 Scene 1: Verona, A public place",
</span><span class="line">    "Act 1 Scene 2: Capulet's mansion",
</span><span class="line">    "Act 1 Scene 3: A room in Capulet's mansion",
</span><span class="line">    "Act 1 Scene 4: A street outside Capulet's mansion",
</span><span class="line">    "Act 1 Scene 5: The Great Hall in Capulet's mansion",
</span><span class="line">    "Act 2 Scene 1: Outside Capulet's mansion",
</span><span class="line">    "Act 2 Scene 2: Capulet's orchard",
</span><span class="line">    "Act 2 Scene 3: Outside Friar Lawrence's cell",
</span><span class="line">    "Act 2 Scene 4: A street in Verona",
</span><span class="line">    "Act 2 Scene 5: Capulet's mansion",
</span><span class="line">    "Act 2 Scene 6: Friar Lawrence's cell"
</span><span class="line">]
</span><span class="line">
</span><span class="line">var act1SceneCount = 0
</span><span class="line">for scene in romeoAndJuliet {
</span><span class="line">    if scene.hasPrefix("Act 1 ") {
</span><span class="line">        ++act1SceneCount
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">println("There are \(act1SceneCount) scenes in Act 1")
</span><span class="line">// prints "There are 5 scenes in Act 1</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>后缀</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var mansionCount = 0
</span><span class="line">var cellCount = 0
</span><span class="line">for scene in romeoAndJuliet {
</span><span class="line">    if scene.hasSuffix("Capulet's mansion") {
</span><span class="line">        ++mansionCount
</span><span class="line">    } else if scene.hasSuffix("Friar Lawrence's cell") {
</span><span class="line">        ++cellCount
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">println("\(mansionCount) mansion scenes; \(cellCount) cell scenes")
</span><span class="line">// prints "6 mansion scenes; 2 cell scenes”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####大小写转换</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let normal = "Could you help me, please?""
</span><span class="line">let shouty = normal.uppercaseString
</span><span class="line">// shouty is equal to "COULD YOU HELP ME, PLEASE?"
</span><span class="line">let whispered = normal.lowercaseString
</span><span class="line">// whispered is equal to "could you help me, please?”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Unicode p118
####Collection 类型
#####Array
不同于OC中的array(可存储不同类型的对象)，array存储了同类型的对象，无需一定要存储对象，也可存储Int等类型
以下两个定义等价
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">var shoppingList: String[] = ["Eggs", "Milk"]
</span><span class="line">var shoppingList = ["Eggs", "Milk"]</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
#####访问或修改array
计算array的大小</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">“println("The shopping list contains \(shoppingList.count) items.")
</span><span class="line">// prints "The shopping list contains 2 items.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用isEmpty来判断coun得否为0
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">if shoppingList.isEmpty {
</span><span class="line">    println("The shopping list is empty.")
</span><span class="line">} else {
</span><span class="line">    println("The shopping list is not empty.")
</span><span class="line">}
</span><span class="line">// prints "The shopping list is not empty."</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
添加元素</p>

<ul>
  <li>用append</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">shoppingList.append("Flour")
</span><span class="line">// shoppingList now contains 3 items, and someone is making pancakes”</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>用+=</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">shoppingList += "Baking Powder"
</span><span class="line">// shoppingList now contains 4 items”
</span><span class="line">
</span><span class="line">shoppingList += ["Chocolate Spread", "Cheese", "Butter"]
</span><span class="line">// shoppingList now contains 7 items”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用Range来改变数组里一些元素的值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">shoppingList[4...6] = ["Bananas", "Apples"]
</span><span class="line">// shoppingList now contains 6 items”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在某位置插入元素</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">shoppingList.insert("Maple Syrup", atIndex: 0)
</span><span class="line">// shoppingList now contains 7 items
</span><span class="line">// "Maple Syrup" is now the first item in the list”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>移除元素</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let mapleSyrup = shoppingList.removeAtIndex(0)
</span><span class="line">let apples = shoppingList.removeLast()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>遍历</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for item in shoppingList {
</span><span class="line">    println(item)
</span><span class="line">}
</span><span class="line">// Six eggs
</span><span class="line">// Milk
</span><span class="line">// Flour
</span><span class="line">// Baking Powder
</span><span class="line">// Bananas”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果你在遍历时需要知道对应的index，可以用以下方式 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for (index, value) in enumerate(shoppingList) {
</span><span class="line">    println("Item \(index + 1): \(value)")
</span><span class="line">}
</span><span class="line">// Item 1: Six eggs
</span><span class="line">// Item 2: Milk
</span><span class="line">// Item 3: Flour
</span><span class="line">// Item 4: Baking Powder
</span><span class="line">// Item 5: Bananas</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####创建和初始化Array</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var someInts = Int[]()
</span><span class="line">println("someInts is of type Int[] with \(someInts.count) items.")
</span><span class="line">// prints "someInts is of type Int[] with 0 items.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意以下例子，虽然someInt=[]不指定任何类型，但从前段代码可知它的元素是Int类型的
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">someInts.append(3)
</span><span class="line">// someInts now contains 1 value of type Int
</span><span class="line">someInts = []
</span><span class="line">// someInts is now an empty array, but is still of type Int[]</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
指定default值和数目的初始化</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var threeDoubles = Double[](count: 3, repeatedValue: 0.0)
</span><span class="line">// threeDoubles is of type Double[], and equals [0.0, 0.0, 0.0]
</span><span class="line">
</span><span class="line">var anotherThreeDoubles = Array(count: 3, repeatedValue: 2.5)
</span><span class="line">// anotherThreeDoubles is inferred as Double[], and equals [2.5, 2.5, 2.5]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>最后我们能通过+来将两个数组连成一个</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var sixDoubles = threeDoubles + anotherThreeDoubles
</span><span class="line">// sixDoubles is inferred as Double[], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####字典
对key的唯一要求是hashable,Enumeration member values without associated values (as described in Enumerations) are also hashable by default.
以下两个定义是等价的，swift能推测出它的类型</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var airports: Dictionary&lt;String, String&gt; = ["TYO": "Tokyo", "DUB": "Dublin"]”
</span><span class="line">var airports: Dictionary&lt;String, String&gt; = ["TYO": "Tokyo", "DUB": "Dublin"]
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####访问和修改字典</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">println("The dictionary of airports contains \(airports.count) items.")
</span><span class="line">// prints "The dictionary of airports contains 2 items.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>方法updateValue(forKey:)的使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let oldValue = airports.updateValue("Dublin International", forKey: "DUB") {
</span><span class="line">    println("The old value for DUB was \(oldValue).")
</span><span class="line">}
</span><span class="line">// prints "The old value for DUB was Dublin.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意，此方法对应的是key对应的旧值，返回的是一个optional value
用[]获取的值也是optional vlaue</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let airportName = airports["DUB"] {
</span><span class="line">    println("The name of the airport is \(airportName).")
</span><span class="line">} else {
</span><span class="line">    println("That airport is not in the airports dictionary.")
</span><span class="line">}
</span><span class="line">// prints "The name of the airport is Dublin International.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们可以将nil赋予key对应的值来移除此key</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">airports["APL"] = "Apple International"
</span><span class="line">// "Apple International" is not the real airport for APL, so delete it
</span><span class="line">airports["APL"] = nil
</span><span class="line">// APL has now been removed from the dictionary</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>也可以用<code>removeValueForKey</code>方法
此方法返回的是key对应的旧值,或者nil(如果不存在的话)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let removedValue = airports.removeValueForKey("DUB") {
</span><span class="line">    println("The removed airport's name is \(removedValue).")
</span><span class="line">} else {
</span><span class="line">    println("The airports dictionary does not contain a value for DUB.")
</span><span class="line">}
</span><span class="line">// prints "The removed airport's name is Dublin International.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####遍历字典</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for (airportCode, airportName) in airports {
</span><span class="line">    println("\(airportCode): \(airportName)")
</span><span class="line">}
</span><span class="line">// TYO: Tokyo
</span><span class="line">// LHR: London Heathrow
</span><span class="line">
</span><span class="line">for airportCode in airports.keys {
</span><span class="line">    println("Airport code: \(airportCode)")
</span><span class="line">}
</span><span class="line">// Airport code: TYO
</span><span class="line">// Airport code: LHR
</span><span class="line"> 
</span><span class="line">for airportName in airports.values {
</span><span class="line">    println("Airport name: \(airportName)")
</span><span class="line">}
</span><span class="line">
</span><span class="line">//用keys或values创建一个数组
</span><span class="line">let airportCodes = Array(airports.keys)
</span><span class="line">// airportCodes is ["TYO", "LHR"]
</span><span class="line"> 
</span><span class="line">let airportNames = Array(airports.values)
</span><span class="line">// airportNames is ["Tokyo", "London Heathrow"]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####创建一个空的字典</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var namesOfIntegers = Dictionary&lt;Int, String&gt;()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意以下,namesIntegers能被推断出是&lt;Int,String&gt;</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">namesOfIntegers[16] = "sixteen"
</span><span class="line">// namesOfIntegers now contains 1 key-value pair
</span><span class="line">namesOfIntegers = [:]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code>Behind the scenes, Swift’s array and dictionary types are implemented as generic collections
####Mutability Of Collections
对字典来说,immutability意味着你不能改变一个key对应的值，而对数组来说，你只是不能改变它的大小，但仍然能改变某个index对应的值
####条件语句
注意,swift的switch中的case后无需跟着break，因为执行完case里的语句就自动break了，cases也能匹配不同的类型，包括range,tuples或转换为某一具体的类型
#####For Loops
* For-In</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for index in 1...5 {
</span><span class="line">    println("\(index) times 5 is \(index * 5)")
</span><span class="line">}
</span><span class="line">// 1 times 5 is 5
</span><span class="line">// 2 times 5 is 10
</span><span class="line">// 3 times 5 is 15
</span><span class="line">// 4 times 5 is 20
</span><span class="line">// 5 times 5 is 25”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果你不需要index，可以用<code>_</code>来忽略它</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let base = 3
</span><span class="line">let power = 10
</span><span class="line">var answer = 1
</span><span class="line">for _ in 1...power {
</span><span class="line">    answer *= base
</span><span class="line">}
</span><span class="line">println("\(base) to the power of \(power) is \(answer)")
</span><span class="line">// prints "3 to the power of 10 is 59049</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>array,dictionary,characters的for-in</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let names = ["Anna", "Alex", "Brian", "Jack"]
</span><span class="line">for name in names {
</span><span class="line">    println("Hello, \(name)!")
</span><span class="line">}
</span><span class="line">
</span><span class="line">let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
</span><span class="line">for (animalName, legCount) in numberOfLegs {
</span><span class="line">    println("\(animalName)s have \(legCount) legs")
</span><span class="line">}
</span><span class="line">// spiders have 8 legs
</span><span class="line">// ants have 6 legs
</span><span class="line">// cats have 4 legs
</span><span class="line">
</span><span class="line">for character in "Hello" {
</span><span class="line">    println(character)
</span><span class="line">}
</span><span class="line">// H
</span><span class="line">// e
</span><span class="line">// l
</span><span class="line">// l
</span><span class="line">// o</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####For-Condition-Increment</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for var index = 0; index &lt; 3; ++index {
</span><span class="line">    println("index is \(index)")
</span><span class="line">}
</span><span class="line">// index is 0
</span><span class="line">// index is 1
</span><span class="line">// index is 2</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意for后无需括号
#####条件语句</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var temperatureInFahrenheit = 30
</span><span class="line">if temperatureInFahrenheit &lt;= 32 {
</span><span class="line">    println("It's very cold. Consider wearing a scarf.")
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####switch语句</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let someCharacter: Character = "e"
</span><span class="line">switch someCharacter {
</span><span class="line">case "a", "e", "i", "o", "u":
</span><span class="line">    println("\(someCharacter) is a vowel")
</span><span class="line">case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
</span><span class="line">"n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
</span><span class="line">    println("\(someCharacter) is a consonant")
</span><span class="line">default:
</span><span class="line">    println("\(someCharacter) is not a vowel or a consonant")
</span><span class="line">}
</span><span class="line">// prints "e is a vowel”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意，以下方式不行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let anotherCharacter: Character = "a"
</span><span class="line">switch anotherCharacter {
</span><span class="line">case "a":
</span><span class="line">case "A":
</span><span class="line">    println("The letter A")
</span><span class="line">default:
</span><span class="line">    println("Not the letter A")
</span><span class="line">}
</span><span class="line">// this will report a compile-time error</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>每个case里必须对应相应的语句
#####Range Matching</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let count = 3_000_000_000_000
</span><span class="line">let countedThings = "stars in the Milky Way"
</span><span class="line">var naturalCount: String
</span><span class="line">switch count {
</span><span class="line">case 0:
</span><span class="line">    naturalCount = "no"
</span><span class="line">case 1...3:
</span><span class="line">    naturalCount = "a few"
</span><span class="line">case 4...9:
</span><span class="line">    naturalCount = "several"
</span><span class="line">case 10...99:
</span><span class="line">    naturalCount = "tens of"
</span><span class="line">case 100...999:
</span><span class="line">    naturalCount = "hundreds of"
</span><span class="line">case 1000...999_999:
</span><span class="line">    naturalCount = "thousands of"
</span><span class="line">default:
</span><span class="line">    naturalCount = "millions and millions of"
</span><span class="line">}
</span><span class="line">println("There are \(naturalCount) \(countedThings).")
</span><span class="line">// prints "There are millions and millions of stars in the Milky Way.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Tuples</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let somePoint = (1, 1)
</span><span class="line">switch somePoint {
</span><span class="line">case (0, 0):
</span><span class="line">    println("(0, 0) is at the origin")
</span><span class="line">case (_, 0):
</span><span class="line">    println("(\(somePoint.0), 0) is on the x-axis")
</span><span class="line">case (0, _):
</span><span class="line">    println("(0, \(somePoint.1)) is on the y-axis")
</span><span class="line">case (-2...2, -2...2):
</span><span class="line">    println("(\(somePoint.0), \(somePoint.1)) is inside the box")
</span><span class="line">default:
</span><span class="line">    println("(\(somePoint.0), \(somePoint.1)) is outside of the box")
</span><span class="line">}
</span><span class="line">// prints "(1, 1) is inside the box”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Value Bindings</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let anotherPoint = (2, 0)
</span><span class="line">switch anotherPoint {
</span><span class="line">case (let x, 0):
</span><span class="line">    println("on the x-axis with an x value of \(x)")
</span><span class="line">case (0, let y):
</span><span class="line">    println("on the y-axis with a y value of \(y)")
</span><span class="line">case let (x, y):
</span><span class="line">    println("somewhere else at (\(x), \(y))")
</span><span class="line">}
</span><span class="line">// prints "on the x-axis with an x value of 2”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####where的使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let yetAnotherPoint = (1, -1)
</span><span class="line">switch yetAnotherPoint {
</span><span class="line">case let (x, y) where x == y:
</span><span class="line">    println("(\(x), \(y)) is on the line x == y")
</span><span class="line">case let (x, y) where x == -y:
</span><span class="line">    println("(\(x), \(y)) is on the line x == -y")
</span><span class="line">case let (x, y):
</span><span class="line">    println("(\(x), \(y)) is just some arbitrary point")
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Control Transfer语句
注意FallThrough的使用,来看以下例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let integerToDescribe = 5
</span><span class="line">var description = "The number \(integerToDescribe) is"
</span><span class="line">switch integerToDescribe {
</span><span class="line">case 2, 3, 5, 7, 11, 13, 17, 19:
</span><span class="line">    description += " a prime number, and also"
</span><span class="line">    fallthrough
</span><span class="line">default:
</span><span class="line">    description += " an integer."
</span><span class="line">}
</span><span class="line">println(description)
</span><span class="line">// prints "The number 5 is a prime number, and also an integer.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Labeled语句</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gameLoop: while square != finalSquare {
</span><span class="line">    if ++diceRoll == 7 { diceRoll = 1 }
</span><span class="line">    switch square + diceRoll {
</span><span class="line">    case finalSquare:
</span><span class="line">        // diceRoll will move us to the final square, so the game is over
</span><span class="line">        break gameLoop
</span><span class="line">    case let newSquare where newSquare &gt; finalSquare:
</span><span class="line">        // diceRoll will move us beyond the final square, so roll again
</span><span class="line">        continue gameLoop
</span><span class="line">    default:
</span><span class="line">        // this is a valid move, so find out its effect
</span><span class="line">        square += diceRoll
</span><span class="line">        square += board[square]
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">println("Game over!")”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func sayHello(personName: String) -&gt; String {
</span><span class="line">    let greeting = "Hello, " + personName + "!"
</span><span class="line">    return greeting
</span><span class="line">}
</span><span class="line">
</span><span class="line">println(sayHello("Anna"))
</span><span class="line">// prints "Hello, Anna!"
</span><span class="line">println(sayHello("Brian"))
</span><span class="line">// prints "Hello, Brian!”
</span><span class="line">
</span><span class="line">func sayHelloWorld() -&gt; String {
</span><span class="line">    return "hello, world"
</span><span class="line">}
</span><span class="line">println(sayHelloWorld())
</span><span class="line">// prints "hello, world”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>无返回值的函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func sayGoodbye(personName: String) {
</span><span class="line">    println("Goodbye, \(personName)!")
</span><span class="line">}
</span><span class="line">sayGoodbye("Dave")
</span><span class="line">// prints "Goodbye, Dave!"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意，实际上，虽然函数没写返回值，但它返回的是一个空的tuple<code>()</code>
#####返回多个值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func count(string: String) -&gt; (vowels: Int, consonants: Int, others: Int) {
</span><span class="line">    var vowels = 0, consonants = 0, others = 0
</span><span class="line">    for character in string {
</span><span class="line">        switch String(character).lowercaseString {
</span><span class="line">        case "a", "e", "i", "o", "u":
</span><span class="line">            ++vowels
</span><span class="line">        case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
</span><span class="line">        "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
</span><span class="line">            ++consonants
</span><span class="line">        default:
</span><span class="line">            ++others
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    return (vowels, consonants, others)
</span><span class="line">}
</span><span class="line">
</span><span class="line">let total = count("some arbitrary string!")
</span><span class="line">println("\(total.vowels) vowels and \(total.consonants) consonants")
</span><span class="line">// prints "6 vowels and 13 consonants”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code>,.vowerls和.consonants依然可用!!!
#####External Parameter Names</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func someFunction(externalParameterName localParameterName: Int) {
</span><span class="line">    // function body goes here, and can use localParameterName
</span><span class="line">    // to refer to the argument value for that parameter
</span><span class="line">}
</span><span class="line">
</span><span class="line">func join(string s1: String, toString s2: String, withJoiner joiner: String)
</span><span class="line">    -&gt; String {
</span><span class="line">        return s1 + joiner + s2
</span><span class="line">}
</span><span class="line">
</span><span class="line">join(string: "hello", toString: "world", withJoiner: ", ")</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Shorthand External Parameter Names</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func containsCharacter(#string: String, #characterToFind: Character) -&gt; Bool {
</span><span class="line">    for character in string {
</span><span class="line">        if character == characterToFind {
</span><span class="line">            return true
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    return false
</span><span class="line">}
</span><span class="line">
</span><span class="line">let containsAVee = containsCharacter(string: "aardvark", characterToFind: "v")
</span><span class="line">// containsAVee equals true, because "aardvark" contains a "v”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####参数的默认值
将有默认值的参数放在最后</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func join(string s1: String, toString s2: String,
</span><span class="line">    withJoiner joiner: String = " ") -&gt; String {
</span><span class="line">        return s1 + joiner + s2
</span><span class="line">}
</span><span class="line">
</span><span class="line">join(string: "hello", toString: "world", withJoiner: "-")
</span><span class="line">// returns "hello-world"
</span><span class="line">
</span><span class="line">join(string: "hello", toString: "world")
</span><span class="line">// returns "hello world"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####External Names for Parameters with Default Values
Swift provides an automatic external name for any defaulted parameter you define
故可以像如下调用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">join("hello", "world", joiner: "-")</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Variadic Parameters</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func arithmeticMean(numbers: Double...) -&gt; Double {
</span><span class="line">    var total: Double = 0
</span><span class="line">    for number in numbers {
</span><span class="line">        total += number
</span><span class="line">    }
</span><span class="line">    return total / Double(numbers.count)
</span><span class="line">}
</span><span class="line">arithmeticMean(1, 2, 3, 4, 5)
</span><span class="line">// returns 3.0, which is the arithmetic mean of these five numbers
</span><span class="line">arithmeticMean(3, 8, 19)
</span><span class="line">// returns 10.0, which is the arithmetic mean of these three numbers</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>一个函数至多只能有一个variadic参数，它必须总是在所有参数的最后!</p>

<h5 id="constant--variable-">Constant 和 Variable 参数</h5>
<p>函数的参数默认是constant的,如果试图修改它将导致错误,我们可以在参数前加var来让它可修改</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func alignRight(var string: String, count: Int, pad: Character) -&gt; String {
</span><span class="line">    let amountToPad = count - countElements(string)
</span><span class="line">    for _ in 1...amountToPad {
</span><span class="line">        string = pad + string
</span><span class="line">    }
</span><span class="line">    return string
</span><span class="line">}
</span><span class="line">let originalString = "hello"
</span><span class="line">let paddedString = alignRight(originalString, 10, "-")
</span><span class="line">// paddedString is equal to "-----hello"
</span><span class="line">// originalString is still equal to "hello”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####In-Out参数 
来看个demo就明白In-Out是如何使用的了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func swapTwoInts(inout a: Int, inout b: Int) {
</span><span class="line">    let temporaryA = a
</span><span class="line">    a = b
</span><span class="line">    b = temporaryA
</span><span class="line">}
</span><span class="line">
</span><span class="line">var someInt = 3
</span><span class="line">var anotherInt = 107
</span><span class="line">swapTwoInts(&amp;someInt, &amp;anotherInt)
</span><span class="line">println("someInt is now \(someInt), and anotherInt is now \(anotherInt)")
</span><span class="line">// prints "someInt is now 107, and anotherInt is now 3”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>需要注意的是In-out参数不能有默认值,variadic参数不能与inout一起使用,let也不行
#####函数类型
可以像以下这么用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var mathFunction: (Int, Int) -&gt; Int = addTwoInts
</span><span class="line">println("Result: \(mathFunction(2, 3))")</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>同样的函数签名也可以赋值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mathFunction = multiplyTwoInts
</span><span class="line">println("Result: \(mathFunction(2, 3))")
</span><span class="line">// prints "Result: 6</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>也可以根据Swift的自动推断功能像以下方法使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let anotherMathFunction = addTwoInts</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####充当参数的函数类型</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func printMathResult(mathFunction: (Int, Int) -&gt; Int, a: Int, b: Int) {
</span><span class="line">    println("Result: \(mathFunction(a, b))")
</span><span class="line">}
</span><span class="line">printMathResult(addTwoInts, 3, 5)
</span><span class="line">// prints "Result: 8”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####作为返回类型的函数类型</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func stepForward(input: Int) -&gt; Int {
</span><span class="line">    return input + 1
</span><span class="line">}
</span><span class="line">func stepBackward(input: Int) -&gt; Int {
</span><span class="line">    return input - 1
</span><span class="line">}
</span><span class="line">
</span><span class="line">func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int {
</span><span class="line">    return backwards ? stepBackward : stepForward
</span><span class="line">}
</span><span class="line">
</span><span class="line">var currentValue = 3
</span><span class="line">let moveNearerToZero = chooseStepFunction(currentValue &gt; 0)
</span><span class="line">// moveNearerToZero now refers to the stepBackward() function
</span><span class="line">
</span><span class="line">println("Counting to zero:")
</span><span class="line">// Counting to zero:
</span><span class="line">while currentValue != 0 {
</span><span class="line">    println("\(currentValue)... ")
</span><span class="line">    currentValue = moveNearerToZero(currentValue)
</span><span class="line">}
</span><span class="line">println("zero!")
</span><span class="line">// 3...
</span><span class="line">// 2...
</span><span class="line">// 1...
</span><span class="line">// zero!</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####嵌套函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int {
</span><span class="line">    func stepForward(input: Int) -&gt; Int { return input + 1 }
</span><span class="line">    func stepBackward(input: Int) -&gt; Int { return input - 1 }
</span><span class="line">    return backwards ? stepBackward : stepForward
</span><span class="line">}
</span><span class="line">var currentValue = -4
</span><span class="line">let moveNearerToZero = chooseStepFunction(currentValue &gt; 0)
</span><span class="line">// moveNearerToZero now refers to the nested stepForward() function
</span><span class="line">while currentValue != 0 {
</span><span class="line">    println("\(currentValue)... ")
</span><span class="line">    currentValue = moveNearerToZero(currentValue)
</span><span class="line">}
</span><span class="line">println("zero!")
</span><span class="line">// -4...
</span><span class="line">// -3...
</span><span class="line">// -2...
</span><span class="line">// -1...
</span><span class="line">// zero!</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####闭包
类似OC中的block
#####Sort函数
第一种使用方式
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
</span><span class="line">//demo 1
</span><span class="line">func backwards(s1: String, s2: String) -&gt; Bool {
</span><span class="line">    return s1 &gt; s2
</span><span class="line">}
</span><span class="line">var reversed = sort(names, backwards)</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
第二种</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">reversed = sort(names, { (s1: String, s2: String) -&gt; Bool in
</span><span class="line">    return s1 &gt; s2
</span><span class="line">    })</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>closure的body和声明用in关键词分隔开来
#####Inferring Type From Context
由于sort的closure是以参数的形式传入函数，所以swift能从推测出闭包的参数类型和返回值类型,所以我们可以按以下方式来写</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">reversed = sort(names, { s1, s2 in return s1 &gt; s2 } )</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>也可以省略return,因为默认是有return这个关键字的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">reversed = sort(names, { s1, s2 in  s1 &gt; s2 } )</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Shorthand Argument Names
Swift默认为内联的参数名指定了诸如$0, $1等名字
If you use these shorthand argument names within your closure expression, you can omit the closure’s argument list from its definition, and the number and type of the shorthand argument names will be inferred from the expected function type. The in keyword can also be omitted, because the closure expression is made up entirely of its body:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">reversed = sort(names, { $0 &gt; $1 } )</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>以上的demo中,$0和$1分别指向了闭包的第一个和第二个String参数</p>

<h5 id="operators-function">Operators Function</h5>
<p>There’s actually an even shorter way to write the closure expression above. Swift’s String type defines its string-specific implementation of the greater-than operator (&gt;) as a function that has two parameters of type String, and returns a value of type Bool. This exactly matches the function type needed for the sort function’s second parameter. Therefore, you can simply pass in the greater-than operator, and Swift will infer that you want to use its string-specific implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">reversed = sort(names, &gt;)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Trailing Closures
如果你将一个闭包指定为一个函数的最后一个参数，并且这个闭包表达式很长，你可以将它作为一个trailing closure,它是一个写在函数的括号之外的closure</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func someFunctionThatTakesAClosure(closure: () -&gt; ()) {
</span><span class="line">    // function body goes here
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">// here's how you call this function without using a trailing closure:
</span><span class="line"> 
</span><span class="line">someFunctionThatTakesAClosure({
</span><span class="line">    // closure's body goes here
</span><span class="line">    })
</span><span class="line"> 
</span><span class="line">// here's how you call this function with a trailing closure instead:
</span><span class="line"> 
</span><span class="line">someFunctionThatTakesAClosure() {
</span><span class="line">    // trailing closure's body goes here
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code>:如果一个closure expression是一个函数的惟参数,则无需要括号，故以上也可以写成</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">someFunctionThatTakesAClosure {
</span><span class="line">    // trailing closure's body goes here
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来看一个Array中的map方法的例子，只有一个参数，也是一个closure</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let digitNames = [
</span><span class="line">    0: "Zero", 1: "One", 2: "Two",   3: "Three", 4: "Four",
</span><span class="line">    5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine"
</span><span class="line">]
</span><span class="line">let numbers = [16, 58, 510]
</span><span class="line">
</span><span class="line">let strings = numbers.map {
</span><span class="line">    (var number) -&gt; String in
</span><span class="line">    var output = ""
</span><span class="line">    while number &gt; 0 {
</span><span class="line">        output = digitNames[number % 10]! + output
</span><span class="line">        number /= 10
</span><span class="line">    }
</span><span class="line">    return output
</span><span class="line">}
</span><span class="line">// strings is inferred to be of type String[]
</span><span class="line">// its value is ["OneSix", "FiveEight", "FiveOneZero"]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Capturing Values
Swift中closure的最简单形式是一个内嵌的函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func makeIncrementor(forIncrement amount: Int) -&gt; () -&gt; Int {
</span><span class="line">    var runningTotal = 0
</span><span class="line">    func incrementor() -&gt; Int {
</span><span class="line">        runningTotal += amount
</span><span class="line">        return runningTotal
</span><span class="line">    }
</span><span class="line">    return incrementor
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>because it modifies the runningTotal variable each time it is called, incrementor captures a reference to the current runningTotal variable, and not just a copy of its initial value. Capturing a reference ensures sure that runningTotal does not disappear when the call to makeIncrementor ends, and ensures that runningTotal will continue to be available the next time that the incrementor function is called.
注意以下的调用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let incrementByTen = makeIncrementor(forIncrement: 10)
</span><span class="line">
</span><span class="line">incrementByTen()
</span><span class="line">// returns a value of 10
</span><span class="line">incrementByTen()
</span><span class="line">// returns a value of 20
</span><span class="line">incrementByTen()
</span><span class="line">// returns a value of 30</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If you create another incrementor, it will have its own stored reference to a new, separate runningTotal variable</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let incrementBySeven = makeIncrementor(forIncrement: 7)
</span><span class="line">incrementBySeven()
</span><span class="line">// returns a value of 7
</span><span class="line">incrementByTen()
</span><span class="line">// returns a value of 40</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>incrementByTen捕获的变量与incrementBySeven捕获的无关
#####Closure是引用类型
也就是说如果你将closure赋给两个不同的常量或变量，这两个常量或变量将指向一样的closure</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let alsoIncrementByTen = incrementByTen
</span><span class="line">alsoIncrementByTen()
</span><span class="line">// returns a value of 50</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Enumerations
Enumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes, such as computed properties to provide additional information about the enumeration’s current value, and instance methods to provide functionality related to the values the enumeration represents. Enumerations can also define initializers to provide an initial member value; can be extended to expand their functionality beyond their original implementation; and can conform to protocols to provide standard functionality.
#####Enumeration Syntax</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum CompassPoint {
</span><span class="line">    case North
</span><span class="line">    case South
</span><span class="line">    case East
</span><span class="line">    case West
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code></p>

<pre><code>	Unlike C and Objective-C, Swift enumeration members are not assigned a default integer value when they are created. In the CompassPoints example above, North, South, East and West do not implicitly equal 0, 1, 2 and 3. Instead, the different enumeration members are fully-fledged values in their own right, with an explicitly-defined type of CompassPoint.
</code></pre>

<p>多个成员值可以出现在同一行上，用<code>,</code>分开</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum Planet {
</span><span class="line">    case Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来看以下例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var directionToHead = CompassPoint.West
</span><span class="line">directionToHead = .East</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>一旦知道了directionToHead的类型，它的type(CompassPoint)可以省略
#####Switch..case</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">directionToHead = .South
</span><span class="line">switch directionToHead {
</span><span class="line">case .North:
</span><span class="line">    println("Lots of planets have a north")
</span><span class="line">case .South:
</span><span class="line">    println("Watch out for penguins")
</span><span class="line">case .East:
</span><span class="line">    println("Where the sun rises")
</span><span class="line">case .West:
</span><span class="line">    println("Where the skies are blue")
</span><span class="line">}
</span><span class="line">// prints "Watch out for penguins</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Associated Values</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum Barcode {
</span><span class="line">    case UPCA(Int, Int, Int)
</span><span class="line">    case QRCode(String)
</span><span class="line">}
</span><span class="line">
</span><span class="line">var productBarcode = Barcode.UPCA(8, 85909_51226, 3)
</span><span class="line">productBarcode = .QRCode("ABCDEFGHIJKLMNOP")
</span><span class="line">
</span><span class="line">switch productBarcode {
</span><span class="line">case .UPCA(let numberSystem, let identifier, let check):
</span><span class="line">    println("UPC-A with value of \(numberSystem), \(identifier), \(check).")
</span><span class="line">case .QRCode(let productCode):
</span><span class="line">    println("QR code with value of \(productCode).")
</span><span class="line">}
</span><span class="line">// prints "QR code with value of ABCDEFGHIJKLMNOP.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If all of the associated values for a enumeration member are extracted as constants, or if all are extracted as variables, you can place a single var or let annotation before the member name, for brevity:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">switch productBarcode {
</span><span class="line">case let .UPCA(numberSystem, identifier, check):
</span><span class="line">    println("UPC-A with value of \(numberSystem), \(identifier), \(check).")
</span><span class="line">case let .QRCode(productCode):
</span><span class="line">    println("QR code with value of \(productCode).")
</span><span class="line">}
</span><span class="line">// prints "QR code with value of ABCDEFGHIJKLMNOP.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Raw Values</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum ASCIIControlCharacter: Character {
</span><span class="line">    case Tab = "\t"
</span><span class="line">    case LineFeed = "\n"
</span><span class="line">    case CarriageReturn = "\r"
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The raw value for a particular enumeration member is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s members, and can be different each time you do so.
注意，如果整型被用来作为raw values,如果其他enumeration member无值，则其他的将会自动增长</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum Planet: Int {
</span><span class="line">    case Mercury = 1, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>.venus = 2,…依此类推
用toRaw方法来获取一个enumeration member的rawValue值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let earthsOrder = Planet.Earth.toRaw()
</span><span class="line">// earthsOrder is 3</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用fromRaw来获取拥有一个raw value的enumberation member</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let possiblePlanet = Planet.fromRaw(7)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意fromRaw返回的是optional value,所以可以像如下这个写</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let positionToFind = 9
</span><span class="line">if let somePlanet = Planet.fromRaw(positionToFind) {
</span><span class="line">    switch somePlanet {
</span><span class="line">    case .Earth:
</span><span class="line">        println("Mostly harmless")
</span><span class="line">    default:
</span><span class="line">        println("Not a safe place for humans")
</span><span class="line">    }
</span><span class="line">} else {
</span><span class="line">    println("There isn't a planet at position \(positionToFind)")
</span><span class="line">}
</span><span class="line">// prints "There isn't a planet at position 9”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Classes和Structures
Unlike other programming languages, Swift does not require you to create separate interface and implementation files for custom classes and structures. In Swift, you define a class or a structure in a single file, and the external interface to that class or structure is automatically made available for other code to use.
#####二者的比较
共同之处</p>

<ul>
  <li>Define properties to store values</li>
  <li>Define methods to provide functionality</li>
  <li>Define subscripts to provide access to their values using subscript syntax</li>
  <li>Define initializers to set up their initial state</li>
  <li>Be extended to expand their functionality beyond a default implementation</li>
  <li>
    <p>Conform to protocols to provide standard functionality of a certain kind
类有的，而Structure木有的</p>
  </li>
  <li>Inheritance enables one class to inherit the characteristics of another.</li>
  <li>Type casting enables you to check and interpret the type of a class instance at runtime.</li>
  <li>Deinitializers enable an instance of a class to free up any resources it has assigned.</li>
  <li>Reference counting allows more than one reference to a class instance.
<code>注意</code>Structures总是被copies的而不用引用计数
#####语法定义</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Resolution {
</span><span class="line">    var width = 0
</span><span class="line">    var height = 0
</span><span class="line">}
</span><span class="line">class VideoMode {
</span><span class="line">    var resolution = Resolution()
</span><span class="line">    var interlaced = false
</span><span class="line">    var frameRate = 0.0
</span><span class="line">    var name: String?
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Class and Structures Instances
创建对象实例</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let someResolution = Resolution()
</span><span class="line">let someVideoMode = VideoMode()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####访问属性
可以层层访问，注意以下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">println("The width of someVideoMode is \(someVideoMode.resolution.width)")
</span><span class="line">// prints "The width of someVideoMode is 0”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code>
Unlike Objective-C, Swift enables you to set sub-properties of a structure property directly. In the last example above, the width property of the resolution property of someVideoMode is set directly, without your needing to set the entire resolution property to a new value.
#####Memberwise Initializers for Structure Types</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let vga = Resolution(width: 640, height: 480)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>不过不像structures,类的对象初始化时没有这样默认的成员初始化
####Structus和Enumerations是值类型
也就是说当它赋给一个变量或专给函数时，它们是copy的
实际上,Swift中的所有基本类型，整型，浮点型，bool型，string，array和dictionary都是值类型，不过幕后都以structure的形式呈现
demo</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum CompassPoint {
</span><span class="line">    case North, South, East, West
</span><span class="line">}
</span><span class="line">var currentDirection = CompassPoint.West
</span><span class="line">let rememberedDirection = currentDirection
</span><span class="line">currentDirection = .East
</span><span class="line">if rememberedDirection == .West {
</span><span class="line">    println("The remembered direction is still .West")
</span><span class="line">}
</span><span class="line">// prints "The remembered direction is still .West”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####类是引用类型
我们可以判断两个变量是否指向同一个类的对象
可以用<code>===</code>
####选择类或是Structure
structure总是按值传递，class总是按引用传递
####Assignment and Copy Behavior for Collection Types</p>

<ul>
  <li>Assignment and Copy Behavior for Dictionaries 
当你将一个dictionary赋予一个常量或变量，或者将它传入函数时,dictionary就被copied了
如果keys/values是值类型,它们也在赋值或作为参数传入函数时也被copy了，不过如果它们是引用类型的话，只是引用copy了，对象并未被copy，这种copy规则与一个structure的properties一样，如果structure被copy的话</li>
  <li>Assignment and Copy Behavior for Arrays
array的copy规则与dictionary的大大不同!array的copy只发生在你所做的修改会改变array的大小的时候</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var a = [1, 2, 3]
</span><span class="line">var b = a
</span><span class="line">var c = a
</span><span class="line">
</span><span class="line">a[0] = 42
</span><span class="line">println(a[0])
</span><span class="line">// 42
</span><span class="line">println(b[0])
</span><span class="line">// 42
</span><span class="line">println(c[0])
</span><span class="line">// 42
</span><span class="line">
</span><span class="line">a.append(4)
</span><span class="line">a[0] = 777
</span><span class="line">println(a[0])
</span><span class="line">// 777
</span><span class="line">println(b[0])
</span><span class="line">// 42
</span><span class="line">println(c[0])
</span><span class="line">// 42</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####确保array是唯一的</p>

<p>通过对一个array的变量调用unshare方法，你能确保这个这个变量对这个array的唯一性，也就是说如果有多个变量指向同一个array,如果你对其中的某一个变量调用unshare方法，这个array就被copy了,所以这个变量有此array的独立拷贝,不过如果只有一个变量指向此array,则copy不会发生
在以上的例子中,假设我们调用了如下语句</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">b.unshare()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>则结果如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">b[0] = -105
</span><span class="line">println(a[0])
</span><span class="line">// 777
</span><span class="line">println(b[0])
</span><span class="line">// -105
</span><span class="line">println(c[0])
</span><span class="line">// 42</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Checking Whether Two Arrays Share the Same Elements
Check whether two arrays or subarrays share the same storage and elements by comparing them with the identity operators (=== and !==).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if b === c {
</span><span class="line">    println("b and c still share the same array elements.")
</span><span class="line">} else {
</span><span class="line">    println("b and c now refer to two independent sets of array elements.")
</span><span class="line">}
</span><span class="line">// prints "b and c now refer to two independent sets of array elements.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Alternatively, use the identity operators to check whether two subarrays share the same elements. The example below compares two identical subarrays from b and confirms that they refer to the same elements:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if b[0...1] === b[0...1] {
</span><span class="line">    println("These two subarrays share the same elements.")
</span><span class="line">} else {
</span><span class="line">    println("These two subarrays do not share the same elements.")
</span><span class="line">}
</span><span class="line">// prints "These two subarrays share the same elements.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####强制array的copy
调用array的copy方法,这个方法只是对array进行<code>浅复制</code>
####Properties
Properties associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures.</p>

<p>Stored and computed properties are usually associated with instances of a particular type. However, properties can also be associated with the type itself. Such properties are known as type properties.</p>

<p>In addition, you can define property observers to monitor changes in a property’s value, which you can respond to with custom actions. Property observers can be added to stored properties you define yourself, and also to properties that a subclass inherits from its superclass.</p>

<h5 id="stored-properties">Stored Properties</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct FixedLengthRange {
</span><span class="line">    var firstValue: Int
</span><span class="line">    let length: Int
</span><span class="line">}
</span><span class="line">var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)
</span><span class="line">// the range represents integer values 0, 1, and 2
</span><span class="line">rangeOfThreeItems.firstValue = 6
</span><span class="line">// the range now represents integer values 6, 7, and 8</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Stored Properties of Constant Structure Instances
如果你创建了一个structure的instance，并且将这个instance赋予一个常量,你不能通过这个常量修改这个instance的properties,即使它们被声明为variable properties</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)
</span><span class="line">// this range represents integer values 0, 1, 2, and 3
</span><span class="line">rangeOfFourItems.firstValue = 6
</span><span class="line">// this will report an error, even thought firstValue is a variable property</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这是因为structure是值类型的缘故,如果一个值类型的instance被标记为常量，则它的property也是
不过class与此不同，class照样可修改instance的variable properties，既然它被赋值为一个常量
#####Lazy Stored Properties
A lazy stored property is a property whose initial value is not calculated until the first time it is used. You indicate a lazy stored property by writing the @lazy attribute before its declaration.</p>

<p><code>注意</code>
You must always declare a lazy property as a variable (with the var keyword), because its initial value may not be retrieved until after instance initialization completes. Constant properties must always have a value before initialization completes, and therefore cannot be declared as lazy.</p>

<p>Lazy properties are useful when the initial value for a property is dependent on outside factors whose values are not known until after an instance’s initialization is complete. Lazy properties are also useful when the initial value for a property requires complex or computationally expensive setup that should not be performed unless or until it is needed.</p>

<p>The example below uses a lazy stored property to avoid unnecessary initialization of a complex class. This example defines two classes called DataImporter and DataManager, neither of which is shown in full:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class DataImporter {
</span><span class="line">    /*
</span><span class="line">    DataImporter is a class to import data from an external file.
</span><span class="line">    The class is assumed to take a non-trivial amount of time to initialize.
</span><span class="line">    */
</span><span class="line">    var fileName = "data.txt"
</span><span class="line">    // the DataImporter class would provide data importing functionality here
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">class DataManager {
</span><span class="line">    @lazy var importer = DataImporter()
</span><span class="line">    var data = String[]()
</span><span class="line">    // the DataManager class would provide data management functionality here
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">let manager = DataManager()
</span><span class="line">manager.data += "Some data"
</span><span class="line">manager.data += "Some more data"
</span><span class="line">// the DataImporter instance for the importer property has not yet been created</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>只有在importer的property首次被访问的时候，importer才被创建</p>

<h4 id="computed-properties">Computed Properties</h4>
<p>主要用来计算，而非存储，主要提供了一个getter和一个可选的setter</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Point {
</span><span class="line">    var x = 0.0, y = 0.0
</span><span class="line">}
</span><span class="line">
</span><span class="line">struct Size {
</span><span class="line">    var width = 0.0, height = 0.0
</span><span class="line">}
</span><span class="line">struct Rect {
</span><span class="line">    var origin = Point()
</span><span class="line">    var size = Size()
</span><span class="line">    var center: Point {
</span><span class="line">    get {
</span><span class="line">        let centerX = origin.x + (size.width / 2)
</span><span class="line">        let centerY = origin.y + (size.height / 2)
</span><span class="line">        return Point(x: centerX, y: centerY)
</span><span class="line">    }
</span><span class="line">    set(newCenter) {
</span><span class="line">        origin.x = newCenter.x - (size.width / 2)
</span><span class="line">        origin.y = newCenter.y - (size.height / 2)
</span><span class="line">    }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var square = Rect(origin: Point(x: 0.0, y: 0.0),
</span><span class="line">    size: Size(width: 10.0, height: 10.0))
</span><span class="line">let initialSquareCenter = square.center
</span><span class="line">square.center = Point(x: 15.0, y: 15.0)
</span><span class="line">println("square.origin is now at (\(square.origin.x), \(square.origin.y))")
</span><span class="line">// prints "square.origin is now at (10.0, 10.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Shorthand Setter Declaration
如果一个computed property的setter并不为新值定义一个名字,则新值的默认名为newValue</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct AlternativeRect {
</span><span class="line">    var origin = Point()
</span><span class="line">    var size = Size()
</span><span class="line">    var center: Point {
</span><span class="line">    get {
</span><span class="line">        let centerX = origin.x + (size.width / 2)
</span><span class="line">        let centerY = origin.y + (size.height / 2)
</span><span class="line">        return Point(x: centerX, y: centerY)
</span><span class="line">    }
</span><span class="line">    set {
</span><span class="line">        origin.x = newValue.x - (size.width / 2)
</span><span class="line">        origin.y = newValue.y - (size.height / 2)
</span><span class="line">    }
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>只读的Computed Properties
一个computed property如果只有一个getter，而没有setter，则它被称为read-only computed property,它只能返回一个值(通过.)而不能赋值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Cuboid {
</span><span class="line">    var width = 0.0, height = 0.0, depth = 0.0
</span><span class="line">    var volume: Double {
</span><span class="line">    return width * height * depth
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)
</span><span class="line">println("the volume of fourByFiveByTwo is \(fourByFiveByTwo.volume)")
</span><span class="line">// prints "the volume of fourByFiveByTwo is 40.0”</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>注意</code>你必须用var来声明computed properties(即使是只读的也一样),let只用于constant properties</p>

<p>#####Property Observer
Property observers observe and respond to changes in a property’s value. Property observers are called every time a property’s value is set, even if the new value is the same as the property’s current value.</p>

<p>You can add property observers to any stored properties you define, apart from lazy stored properties. You can also add property observers to any inherited property (whether stored or computed) by overriding the property within a subclass</p>

<p><code>注意</code>
You don’t need to define property observers for non-overridden computed properties, because you can observe and respond to changes to their value from directly within the computed property’s setter.</p>

<p>you have the option to define either or both of these observers on a property:</p>

<ul>
  <li>willSet is called just before the value is stored.</li>
  <li>didSet is called immediately after the new value is stored.</li>
</ul>

<p>If you implement a willSet observer, it is passed the new property value as a constant parameter. You can specify a name for this parameter as part of your willSet implementation. If you choose not to write the parameter name and parentheses within your implementation, the parameter will still be made available with a default parameter name of newValue.</p>

<p>Similarly, if you implement a didSet observer, it will be passed a constant parameter containing the old property value. You can name the parameter if you wish, or use the default parameter name of oldValue.</p>

<p><code>注意</code>
willSet and didSet observers are not called when a property is first initialized. They are only called when the property’s value is set outside of an initialization context.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class StepCounter {
</span><span class="line">    var totalSteps: Int = 0 {
</span><span class="line">    willSet(newTotalSteps) {
</span><span class="line">        println("About to set totalSteps to \(newTotalSteps)")
</span><span class="line">    }
</span><span class="line">    didSet {
</span><span class="line">        if totalSteps &gt; oldValue  {
</span><span class="line">            println("Added \(totalSteps - oldValue) steps")
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let stepCounter = StepCounter()
</span><span class="line">stepCounter.totalSteps = 200
</span><span class="line">// About to set totalSteps to 200
</span><span class="line">// Added 200 steps
</span><span class="line">stepCounter.totalSteps = 360
</span><span class="line">// About to set totalSteps to 360
</span><span class="line">// Added 160 steps
</span><span class="line">stepCounter.totalSteps = 896
</span><span class="line">// About to set totalSteps to 896
</span><span class="line">// Added 536 steps</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code>
If you assign a value to a property within its own didSet observer, the new value that you assign will replace the one that was just set</p>

<h4 id="section-1">全局和局部变量</h4>
<p>The capabilities described above for computing and observing properties are also available to global variables and local variables. </p>

<p>The global and local variables you have encountered in previous chapters have all been stored variables. Stored variables, like stored properties, provide storage for a value of a certain type and allow that value to be set and retrieved.</p>

<p>However, you can also define computed variables and define observers for stored variables, in either a global or local scope. Computed variables calculate rather than store a value, and are written in the same way as computed properties.</p>

<p><code>注意</code>
Global constants and variables are always computed lazily, in a similar manner to Lazy Stored Properties. Unlike lazy stored properties, global constants and variables do not need to be marked with the @lazy attribute.</p>

<p>Local constants and variables are never computed lazily.
####Type Properties
For value types (that is, structures and enumerations), you can define stored and computed type properties. For classes, you can define computed type properties only.</p>

<p>Stored type properties for value types can be variables or constants. Computed type properties are always declared as variable properties, in the same way as 
computed instance properties.</p>

<p><code>注意</code>
Unlike stored instance properties, you must always give stored type properties a default value. This is because the type itself does not have an initializer that can assign a value to a stored type property at initialization time.</p>

<h5 id="type-property">Type property语法</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct SomeStructure {
</span><span class="line">    static var storedTypeProperty = "Some value."
</span><span class="line">    static var computedTypeProperty: Int {
</span><span class="line">    // return an Int value here
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">enum SomeEnumeration {
</span><span class="line">    static var storedTypeProperty = "Some value."
</span><span class="line">    static var computedTypeProperty: Int {
</span><span class="line">    // return an Int value here
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">class SomeClass {
</span><span class="line">    class var computedTypeProperty: Int {
</span><span class="line">    // return an Int value here
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Querying and Setting Type Properties</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">println(SomeClass.computedTypeProperty)
</span><span class="line">// prints "42"
</span><span class="line"> 
</span><span class="line">println(SomeStructure.storedTypeProperty)
</span><span class="line">// prints "Some value."
</span><span class="line">SomeStructure.storedTypeProperty = "Another value."
</span><span class="line">println(SomeStructure.storedTypeProperty)
</span><span class="line">// prints "Another value."</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>再来看一个例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct AudioChannel {
</span><span class="line">    static let thresholdLevel = 10
</span><span class="line">    static var maxInputLevelForAllChannels = 0
</span><span class="line">    var currentLevel: Int = 0 {
</span><span class="line">    didSet {
</span><span class="line">        if currentLevel &gt; AudioChannel.thresholdLevel {
</span><span class="line">            // cap the new audio level to the threshold level
</span><span class="line">            currentLevel = AudioChannel.thresholdLevel
</span><span class="line">        }
</span><span class="line">        if currentLevel &gt; AudioChannel.maxInputLevelForAllChannels {
</span><span class="line">            // store this as the new overall maximum input level
</span><span class="line">            AudioChannel.maxInputLevelForAllChannels = currentLevel
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code>
In the first of these two checks, the didSet observer sets currentLevel to a different value. This does not, however, cause the observer to be called again.
####方法
与C不同,Swift中的Structure和enumerations能定义方法
#####Instance Methods</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Counter {
</span><span class="line">    var count = 0
</span><span class="line">    func increment() {
</span><span class="line">        count++
</span><span class="line">    }
</span><span class="line">    func incrementBy(amount: Int) {
</span><span class="line">        count += amount
</span><span class="line">    }
</span><span class="line">    func reset() {
</span><span class="line">        count = 0
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let counter = Counter()
</span><span class="line">// the initial counter value is 0
</span><span class="line">counter.increment()
</span><span class="line">// the counter's value is now 1
</span><span class="line">counter.incrementBy(5)
</span><span class="line">// the counter's value is now 6
</span><span class="line">counter.reset()
</span><span class="line">// the counter's value is now 0</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Local and External Parameter Names for Methods
Function parameters can have both a local name (for use within the function’s body) and an external name (for use when calling the function)</p>

<p>The same is true for method parameters, because methods are just functions that are associated with a type. However, the default behavior of local names and external names is <code>different</code> for functions and methods.</p>

<p>Specifically, Swift gives the first parameter name in a method a local parameter name by default, and gives the second and subsequent parameter names both local and external parameter names by default. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Counter {
</span><span class="line">    var count: Int = 0
</span><span class="line">    func incrementBy(amount: Int, numberOfTimes: Int) {
</span><span class="line">        count += amount * numberOfTimes
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let counter = Counter()
</span><span class="line">counter.incrementBy(5, numberOfTimes: 3)
</span><span class="line">// counter value is now 15</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This default behavior effectively treats the method as if you had written a hash symbol (#) before the numberOfTimes parameter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func incrementBy(amount: Int, #numberOfTimes: Int) {
</span><span class="line">    count += amount * numberOfTimes
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Modifying External Parameter Name Behavior for Methods
Sometimes it’s useful to provide an external parameter name for a method’s first parameter, even though this is not the default behavior. You can either add an explicit external name yourself, or you can prefix the first parameter’s name with a hash symbol to use the local name as an external name too.</p>

<p>Conversely, if you do not want to provide an external name for the second or subsequent parameter of a method, override the default behavior by using an underscore character (_) as an explicit external parameter name for that parameter.</p>

<h5 id="the-self-property">The self Property</h5>
<p>以上的可以改成以下的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func increment() {
</span><span class="line">    self.count++
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Swift assumes that you are referring to a property or method of the current instance whenever you use a known property or method name within a method.</p>

<p>The main exception to this rule occurs when a parameter name for an instance method has the same name as a property of that instance. In this situation, the parameter name takes precedence, and it becomes necessary to refer to the property in a more qualified way. You use the implicit self property to distinguish between the parameter name and the property name.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Point {
</span><span class="line">    var x = 0.0, y = 0.0
</span><span class="line">    func isToTheRightOfX(x: Double) -&gt; Bool {
</span><span class="line">        return self.x &gt; x
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let somePoint = Point(x: 4.0, y: 5.0)
</span><span class="line">if somePoint.isToTheRightOfX(1.0) {
</span><span class="line">    println("This point is to the right of the line where x == 1.0")
</span><span class="line">}
</span><span class="line">// prints "This point is to the right of the line where x == 1.0”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Modifying Value Types from Within Instance Methods
Structures 和 enumerations都是值类型,值类型的属性是不能在它的instance方法里修改的,不过你可以在方法名前加mutating来对property进行修改</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Point {
</span><span class="line">    var x = 0.0, y = 0.0
</span><span class="line">    mutating func moveByX(deltaX: Double, y deltaY: Double) {
</span><span class="line">        x += deltaX
</span><span class="line">        y += deltaY
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var somePoint = Point(x: 1.0, y: 1.0)
</span><span class="line">somePoint.moveByX(2.0, y: 3.0)
</span><span class="line">println("The point is now at (\(somePoint.x), \(somePoint.y))")
</span><span class="line">// prints "The point is now at (3.0, 4.0)”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The method can also assign a completely new instance to its implicit self property, and this new instance will replace the existing one when the method ends.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Point {
</span><span class="line">    var x = 0.0, y = 0.0
</span><span class="line">    mutating func moveByX(deltaX: Double, y deltaY: Double) {
</span><span class="line">        self = Point(x: x + deltaX, y: y + deltaY)
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Mutating methods for enumerations can set the implicit self parameter to be a different member from the same enumeration:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum TriStateSwitch {
</span><span class="line">    case Off, Low, High
</span><span class="line">    mutating func next() {
</span><span class="line">        switch self {
</span><span class="line">        case Off:
</span><span class="line">            self = Low
</span><span class="line">        case Low:
</span><span class="line">            self = High
</span><span class="line">        case High:
</span><span class="line">            self = Off
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var ovenLight = TriStateSwitch.Low
</span><span class="line">ovenLight.next()
</span><span class="line">// ovenLight is now equal to .High
</span><span class="line">ovenLight.next()
</span><span class="line">// ovenLight is now equal to .Off</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Type Methods
 对class,在方法的func关键字前加class,对structure和enumeration,在func前加static</p>

<p><code>注意</code>:In Objective-C, you can define type-level methods only for Objective-C classes. In Swift, you can define type-level methods for all classes, structures, and enumerations. Each type method is explicitly scoped to the type it supports.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//对类而言
</span><span class="line">class SomeClass {
</span><span class="line">    class func someTypeMethod() {
</span><span class="line">        // type method implementation goes here
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">SomeClass.someTypeMethod()
</span><span class="line">//对structure和enumeration而言
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在一个type方法的方法体里,self指的是type本身</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct LevelTracker {
</span><span class="line">    static var highestUnlockedLevel = 1
</span><span class="line">    static func unlockLevel(level: Int) {
</span><span class="line">        if level &gt; highestUnlockedLevel { highestUnlockedLevel = level }
</span><span class="line">    }
</span><span class="line">    static func levelIsUnlocked(level: Int) -&gt; Bool {
</span><span class="line">        return level &lt;= highestUnlockedLevel
</span><span class="line">    }
</span><span class="line">    var currentLevel = 1
</span><span class="line">    mutating func advanceToLevel(level: Int) -&gt; Bool {
</span><span class="line">        if LevelTracker.levelIsUnlocked(level) {
</span><span class="line">            currentLevel = level
</span><span class="line">            return true
</span><span class="line">        } else {
</span><span class="line">            return false
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>与Player类的结合使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Player {
</span><span class="line">    var tracker = LevelTracker()
</span><span class="line">    let playerName: String
</span><span class="line">    func completedLevel(level: Int) {
</span><span class="line">        LevelTracker.unlockLevel(level + 1)
</span><span class="line">        tracker.advanceToLevel(level + 1)
</span><span class="line">    }
</span><span class="line">    init(name: String) {
</span><span class="line">        playerName = name
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Subscripts
You can define multiple subscripts for a single type, and the appropriate subscript overload to use is selected based on the type of index value you pass to the subscript. Subscripts are not limited to a single dimension, and you can define subscripts with multiple input parameters to suit your custom type’s needs.
#####Subscript Syntax
不像其他的instance方法,subscripts可以是读写的或是只读的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">subscript(index: Int) -&gt; Int {
</span><span class="line">    get {
</span><span class="line">        // return an appropriate subscript value here
</span><span class="line">    }
</span><span class="line">    set(newValue) {
</span><span class="line">        // perform a suitable setting action here
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>对于只读的computed property,对只读的subscripts,我们可以去掉get关键字</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">subscript(index: Int) -&gt; Int {
</span><span class="line">    // return an appropriate subscript value here
</span><span class="line">}
</span><span class="line">
</span><span class="line">struct TimesTable {
</span><span class="line">    let multiplier: Int
</span><span class="line">    subscript(index: Int) -&gt; Int {
</span><span class="line">        return multiplier * index
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let threeTimesTable = TimesTable(multiplier: 3)
</span><span class="line">println("six times three is \(threeTimesTable[6])")
</span><span class="line">// prints "six times three is 18”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Subscript Options
Subscripts能接收任意数量的参数，并且这些参数可以是任意类型的
Subscripts能接收variable 参数 和 variadic 参数,但不能使用in-out参数或是为参数提供默认值</p>

<p>A class or structure can provide as many subscript implementations as it needs, and the appropriate subscript to be used will be inferred based on the types of the value or values that are contained within the subscript braces at the point that the subscript is used. This definition of multiple subscripts is known as subscript overloading.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Matrix {
</span><span class="line">    let rows: Int, columns: Int
</span><span class="line">    var grid: Double[]
</span><span class="line">    init(rows: Int, columns: Int) {
</span><span class="line">        self.rows = rows
</span><span class="line">        self.columns = columns
</span><span class="line">        grid = Array(count: rows * columns, repeatedValue: 0.0)
</span><span class="line">    }
</span><span class="line">    func indexIsValidForRow(row: Int, column: Int) -&gt; Bool {
</span><span class="line">        return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns
</span><span class="line">    }
</span><span class="line">    subscript(row: Int, column: Int) -&gt; Double {
</span><span class="line">        get {
</span><span class="line">            assert(indexIsValidForRow(row, column: column), "Index out of range")
</span><span class="line">            return grid[(row * columns) + column]
</span><span class="line">        }
</span><span class="line">        set {
</span><span class="line">            assert(indexIsValidForRow(row, column: column), "Index out of range")
</span><span class="line">            grid[(row * columns) + column] = newValue
</span><span class="line">        }
</span><span class="line">     }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var matrix = Matrix(rows: 2, columns: 2)
</span><span class="line">
</span><span class="line">matrix[0, 1] = 1.5
</span><span class="line">matrix[1, 0] = 3.2
</span><span class="line">
</span><span class="line">let someValue = matrix[2, 2]
</span><span class="line">// this triggers an assert, because [2, 2] is outside of the matrix bounds
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####继承
只有类能继承
Classes can also add property observers to inherited properties in order to be notified when the value of a property changes. Property observers can be added to any property, regardless of whether it was originally defined as a stored or computed property.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Vehicle {
</span><span class="line">    var numberOfWheels: Int
</span><span class="line">    var maxPassengers: Int
</span><span class="line">    func description() -&gt; String {
</span><span class="line">        return "\(numberOfWheels) wheels; up to \(maxPassengers) passengers"
</span><span class="line">    }
</span><span class="line">    init() {
</span><span class="line">        numberOfWheels = 0
</span><span class="line">        maxPassengers = 1
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let someVehicle = Vehicle()
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Subclassing</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Bicycle: Vehicle {
</span><span class="line">    init() {
</span><span class="line">        super.init()
</span><span class="line">        numberOfWheels = 2
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let bicycle = Bicycle()
</span><span class="line">println("Bicycle: \(bicycle.description())")
</span><span class="line">// Bicycle: 2 wheels; up to 1 passengers</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The Bicycle class also defines an initializer to set up its tailored characteristics. The initializer for Bicycle calls super.init(), the initializer for the Bicycle class’s superclass, Vehicle, and ensures that all of the inherited properties are initialized by Vehicle before Bicycle tries to modify them.</p>

<p><code>注意</code>:initializers are not inherited by default in Swift</p>

<h4 id="overriding">Overriding</h4>
<p>A subclass can provide its own custom implementation of an instance method, class method, instance property, or subscript that it would otherwise inherit from a superclass. This is known as overriding.
子类重写父类的方法必须加override</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Car: Vehicle {
</span><span class="line">    var speed: Double = 0.0
</span><span class="line">    init() {
</span><span class="line">        super.init()
</span><span class="line">        maxPassengers = 5
</span><span class="line">        numberOfWheels = 4
</span><span class="line">    }
</span><span class="line">    override func description() -&gt; String {
</span><span class="line">        return super.description() + "; "
</span><span class="line">            + "traveling at \(speed) mph"
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let car = Car()
</span><span class="line">println("Car: \(car.description())")
</span><span class="line">// Car: 4 wheels; up to 5 passengers; traveling at 0.0 mph</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="overriding-properties">Overriding Properties</h5>
<p>You can override an inherited instance or class property to provide your own custom getter and setter for that property, or to add property observers to enable the overriding property to observe when the underlying property value changes</p>

<p>You can present an inherited read-only property as a read-write property by providing both a getter and a setter in your subclass property override. You cannot, however, present an inherited read-write property as a read-only property.</p>

<p>You can present an inherited read-only property as a read-write property by providing both a getter and a setter in your subclass property override. You cannot, however, present an inherited read-write property as a read-only property.</p>

<p><code>注意</code>
If you provide a setter as part of a property override, you must also provide a getter for that override. If you don’t want to modify the inherited property’s value within the overriding getter, you can simply pass through the inherited value by returning super.someProperty from the getter, as in the SpeedLimitedCar example below.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class SpeedLimitedCar: Car {
</span><span class="line">    override var speed: Double  {
</span><span class="line">    get {
</span><span class="line">        return super.speed
</span><span class="line">    }
</span><span class="line">    set {
</span><span class="line">        super.speed = min(newValue, 40.0)
</span><span class="line">    }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let limitedCar = SpeedLimitedCar()
</span><span class="line">limitedCar.speed = 60.0
</span><span class="line">println("SpeedLimitedCar: \(limitedCar.description())")
</span><span class="line">// SpeedLimitedCar: 4 wheels; up to 5 passengers; traveling at 40.0 mph</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Overriding Property Observers
You can use property overriding to add property observers to an inherited property. This enables you to be notified when the value of the inherited property changes, regardless of how that property was originally implemented</p>

<p><code>注意</code></p>

<p>You cannot add property observers to inherited constant stored properties or inherited read-only computed properties. The value of these properties cannot be set, and so it is not appropriate to provide a willSet or didSet implementation as part of an override.</p>

<p>Note also that you cannot provide both an overriding setter and an overriding property observer. If you want to observe changes to a property’s value, and you are already providing a custom setter for that property, you can simply observe any value changes from within the custom setter</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class AutomaticCar: Car {
</span><span class="line">    var gear = 1
</span><span class="line">    override var speed: Double {
</span><span class="line">    didSet {
</span><span class="line">        gear = Int(speed / 10.0) + 1
</span><span class="line">    }
</span><span class="line">    }
</span><span class="line">    override func description() -&gt; String {
</span><span class="line">        return super.description() + " in gear \(gear)"
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let automatic = AutomaticCar()
</span><span class="line">automatic.speed = 35.0
</span><span class="line">println("AutomaticCar: \(automatic.description())")
</span><span class="line">// AutomaticCar: 4 wheels; up to 5 passengers; traveling at 35.0 mph in gear 4</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Preventing Overrides
我们可以在方法，属性或subscript前加@final来阻止它们被继承</p>

<p>Methods, properties or subscripts that you add to a class in an extension can also be marked as final within the extension’s definition.</p>

<p>你也可以用@final来阻止类被继承
####初始化
#####Setting Initial Values for Stored Properties
Classes and structures must set all of their stored properties to an appropriate initial value by the time an instance of that class or structure is created. Stored properties cannot be left in an indeterminate state.</p>

<p>我们可以在initializer内为一个stored property设置一个初始值,或在它的定义中为其指定一个默认值
Stored properties cannot be left in an indeterminate state.</p>

<p><code>注意</code>
When you assign a default value to a stored property, or set its initial value within an initializer, the value of that property is set directly, without calling any property observers.
#####Initializers</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Fahrenheit {
</span><span class="line">    var temperature: Double
</span><span class="line">    init() {
</span><span class="line">        temperature = 32.0
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var f = Fahrenheit()
</span><span class="line">println("The default temperature is \(f.temperature)° Fahrenheit")
</span><span class="line">// prints "The default temperature is 32.0° Fahrenheit"</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="default-property-values">Default Property Values</h5>
<p><code>注意</code>
If a property always takes the same initial value, provide a default value rather than setting a value within an initializer. The end result is the same, but the default value ties the property’s initialization more closely to its declaration. It makes for shorter, clearer initializers and <code>enables you to infer the type of the property from its default value</code>. The default value also makes it easier for you to take advantage of default initializers and initializer inheritance, as described later in this chapter.</p>

<p>之前的demo可以换成以下形式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Fahrenheit {
</span><span class="line">    var temperature = 32.0
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Customizing Initialization
You can customize the initialization process with input parameters and optional property types,or by modifying constant properties during initialization</p>

<ul>
  <li>Initialization Parameters
You can provide initialization parameters as part of an initializer’s definition, to define the types and names of values that customize the initialization process.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Celsius {
</span><span class="line">    var temperatureInCelsius: Double = 0.0
</span><span class="line">    init(fromFahrenheit fahrenheit: Double) {
</span><span class="line">        temperatureInCelsius = (fahrenheit - 32.0) / 1.8
</span><span class="line">    }
</span><span class="line">    init(fromKelvin kelvin: Double) {
</span><span class="line">        temperatureInCelsius = kelvin - 273.15
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)
</span><span class="line">// boilingPointOfWater.temperatureInCelsius is 100.0
</span><span class="line">let freezingPointOfWater = Celsius(fromKelvin: 273.15)
</span><span class="line">// freezingPointOfWater.temperatureInCelsius is 0.0</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Local and External Parameter Names
As with function and method parameters, initialization parameters can have both a local name for use within the initializer’s body and an external name for use when calling the initializer.</li>
</ul>

<p>However, initializers do not have an identifying function name before their parentheses in the way that functions and methods do. Therefore, the names and types of an initializer’s parameters play a particularly important role in identifying which initializer should be called. Because of this,<code>Swift provides an automatic external name for every parameter in an initializer if you don’t provide an external name yourself</code>.</p>

<p><code>注意</code>
If you do not want to provide an external name for a parameter in an initializer, provide an underscore (_) as an explicit external name for that parameter to override the default behavior described above.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Color {
</span><span class="line">    let red = 0.0, green = 0.0, blue = 0.0
</span><span class="line">    init(red: Double, green: Double, blue: Double) {
</span><span class="line">        self.red   = red
</span><span class="line">        self.green = green
</span><span class="line">        self.blue  = blue
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let magenta = Color(red: 1.0, green: 0.0, blue: 1.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code>
It is not possible to call this initializer without using the external names. External names must always be used in an intializer if they are defined, and omitting them is a compile-time error:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let veryGreen = Color(0.0, 1.0, 0.0)
</span><span class="line">// this reports a compile-time error - external names are required</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Optional Property Types
Properties of optional type are automatically initialized with a value of nil, indicating that the property is deliberately intended to have “no value yet” during initialization.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class SurveyQuestion {
</span><span class="line">    var text: String
</span><span class="line">    var response: String?
</span><span class="line">    init(text: String) {
</span><span class="line">        self.text = text
</span><span class="line">    }
</span><span class="line">    func ask() {
</span><span class="line">        println(text)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let cheeseQuestion = SurveyQuestion(text: "Do you like cheese?")
</span><span class="line">cheeseQuestion.ask()
</span><span class="line">// prints "Do you like cheese?"
</span><span class="line">cheeseQuestion.response = "Yes, I do like cheese.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Modifying Constant Properties During Initialization
You can modify the value of a constant property at any point during initialization, as long as it is set to a definite value by the time initialization finishes.</p>

<p><code>注意</code>
For class instances, a constant property can only be modified during initialization by the class that introduces it. It cannot be modified by a subclass.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class SurveyQuestion {
</span><span class="line">    let text: String
</span><span class="line">    var response: String?
</span><span class="line">    init(text: String) {
</span><span class="line">        self.text = text
</span><span class="line">    }
</span><span class="line">    func ask() {
</span><span class="line">        println(text)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let beetsQuestion = SurveyQuestion(text: "How about beets?")
</span><span class="line">beetsQuestion.ask()
</span><span class="line">// prints "How about beets?"
</span><span class="line">beetsQuestion.response = "I also like beets. (But not with cheese.)”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Default Initializers
Swift provides a default initializer for any structure or base class that provides default values for all of its properties and does not provide at least one initializer itself. The default initializer simply creates a new instance with all of its properties set to their default values.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class ShoppingListItem {
</span><span class="line">    var name: String?
</span><span class="line">    var quantity = 1
</span><span class="line">    var purchased = false
</span><span class="line">}
</span><span class="line">var item = ShoppingListItem()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Memberwise Initializers for Structure Types
In addition to the default initializers mentioned above, structure types automatically receive a memberwise initializer if they provide default values for all of their stored properties and do not define any of their own custom initializers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Size {
</span><span class="line">    var width = 0.0, height = 0.0
</span><span class="line">}
</span><span class="line">let twoByTwo = Size(width: 2.0, height: 2.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Initializer Delegation for Value Types
Initializers can call other initializers to perform part of an instance’s initialization. This process, known as initializer delegation, avoids duplicating code across multiple initializers.</p>

<p>对于值类型而言,它们的initializer delegation相对比较简单,because they can only delegate to another initializer that they provide themselves.
而类则可以继承,This means that classes have additional responsibilities for ensuring that all stored properties they inherit are assigned a suitable value during initialization.</p>

<p>For value types, you use self.init to refer to other initializers from the same value type when writing your own custom initializers. You can only call self.init from within an initializer.</p>

<p>Note that if you define a custom initializer for a value type, you will no longer have access to the default initializer (or the memberwise structure initializer, if it is a structure) for that type. </p>

<p><code>注意</code>
If you want your custom value type to be initializable with the default initializer and memberwise initializer, and also with your own custom initializers, write your custom initializers in an extension rather than as part of the value type’s original implementation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Size {
</span><span class="line">    var width = 0.0, height = 0.0
</span><span class="line">}
</span><span class="line">struct Point {
</span><span class="line">    var x = 0.0, y = 0.0
</span><span class="line">}
</span><span class="line">
</span><span class="line">struct Rect {
</span><span class="line">    var origin = Point()
</span><span class="line">    var size = Size()
</span><span class="line">    init() {}
</span><span class="line">    init(origin: Point, size: Size) {
</span><span class="line">        self.origin = origin
</span><span class="line">        self.size = size
</span><span class="line">    }
</span><span class="line">    init(center: Point, size: Size) {
</span><span class="line">        let originX = center.x - (size.width / 2)
</span><span class="line">        let originY = center.y - (size.height / 2)
</span><span class="line">        self.init(origin: Point(x: originX, y: originY), size: size)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let basicRect = Rect()
</span><span class="line">// basicRect's origin is (0.0, 0.0) and its size is (0.0, 0.0)
</span><span class="line">
</span><span class="line">let originRect = Rect(origin: Point(x: 2.0, y: 2.0),
</span><span class="line">    size: Size(width: 5.0, height: 5.0))
</span><span class="line">// originRect's origin is (2.0, 2.0) and its size is (5.0, 5.0)
</span><span class="line">
</span><span class="line">let centerRect = Rect(center: Point(x: 4.0, y: 4.0),
</span><span class="line">    size: Size(width: 3.0, height: 3.0))
</span><span class="line">// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The init(center:size:) initializer could have assigned the new values of origin and size to the appropriate properties itself. However, it is more convenient (and clearer in intent) for the init(center:size:) initializer to take advantage of an existing initializer that already provides exactly that functionality.</p>

<h4 id="section-2">类继承和初始化</h4>
<p>All of a class’s stored properties—including any properties the class inherits from its superclass—must be assigned an initial value during initialization.</p>

<p>Swift defines two kinds of initializers for class types to help ensure all stored properties receive an initial value. These are known as designated initializers and convenience initializers</p>

<h5 id="designated-initializers-and-convenience-initializers">Designated Initializers and Convenience Initializers</h5>
<p>Designated initializers are the primary initializers for a class. A designated initializer fully initializes all properties introduced by that class and calls an appropriate superclass initializer to continue the initialization process up the superclass chain.</p>

<p>Classes tend to have very few designated initializers, and it is quite common for a class to have only one. Designated initializers are “funnel” points through which initialization takes place, and through which the initialization process continues up the superclass chain.</p>

<p>Every class must have at least one designated initializer. In some cases, this requirement is satisfied by inheriting one or more designated initializers from a superclass</p>

<p>Convenience initializers are secondary, supporting initializers for a class. You can define a convenience initializer to call a designated initializer from the same class as the convenience initializer with some of the designated initializer’s parameters set to default values. You can also define a convenience initializer to create an instance of that class for a specific use case or input value type.</p>

<p>You do not have to provide convenience initializers if your class does not require them. Create convenience initializers whenever a shortcut to a common initialization pattern will save time or make initialization of the class clearer in intent</p>

<h5 id="initializer-chaining">Initializer Chaining</h5>
<p>To simplify the relationships between designated and convenience initializers, Swift applies the following three rules for delegation calls between initializers:</p>

<ul>
  <li>规则1
Designated initializers must call a designated initializer from their immediate superclass.</li>
  <li>规则2
Convenience initializers must call another initializer available in the same class.</li>
  <li>规则3
Convenience initializers must ultimately end up calling a designated initializer.</li>
</ul>

<p>A simple way to remember this is:</p>

<ul>
  <li>Designated initializers must always delegate up.</li>
  <li>Convenience initializers must always delegate across.
关系可以用以下两张图表示
<img src="http://xiekunRonaldo.github.io/images/2014/8/initialize.png" />
<img src="http://xiekunRonaldo.github.io/images/2014/8/complex_initialize.png" /></li>
</ul>

<h5 id="two-phase-initialization">Two-Phase Initialization</h5>
<p>Class initialization in Swift is a two-phase process. In the first phase, each stored property is assigned an initial value by the class that introduced it. Once the initial state for every stored property has been determined, the second phase begins, and each class is given the opportunity to customize its stored properties further before the new instance is considered ready for use.</p>

<p>Two-phase initialization prevents property values from being accessed before they are initialized, and prevents property values from being set to a different value by another initializer unexpectedly.</p>

<p>Swift’s compiler performs four helpful safety-checks to make sure that two-phase initialization is completed without error:</p>

<ul>
  <li>
    <p>Safety check 1
A designated initializer must ensure that all of the properties introduced by its class are initialized before it delegates up to a superclass initializer.</p>
  </li>
  <li>Safety check 2
A designated initializer must delegate up to a superclass initializer before assigning a value to an inherited property. If it doesn’t, the new value the designated initializer assigns will be overwritten by the superclass as part of its own initialization.</li>
  <li>Safety check 3
A convenience initializer must delegate to another initializer before assigning a value to any property (including properties defined by the same class). If it doesn’t, the new value the convenience initializer assigns will be overwritten by its own class’s designated initializer.</li>
  <li>Safety check 4
An initializer cannot call any instance methods, read the values of any instance properties, or refer to self as a value until after the first phase of initialization is complete.</li>
</ul>

<p>The class instance is not fully valid until the first phase ends. Properties can only be accessed, and methods can only be called, once the class instance is known to be valid at the end of the first phase.</p>

<p>Here’s how two-phase initialization plays out, based on the four safety checks above:</p>

<ol>
  <li>Phase 1
    <ul>
      <li>A designated or convenience initializer is called on a class.</li>
      <li>Memory for a new instance of that class is allocated. The memory is not yet initialized.</li>
      <li>A designated initializer for that class confirms that all stored properties introduced by that class have a value. The memory for these stored properties is now initialized.</li>
      <li>The designated initializer hands off to a superclass initializer to perform the same task for its own stored properties.</li>
      <li>This continues up the class inheritance chain until the top of the chain is reached.</li>
      <li>Once the top of the chain is reached, and the final class in the chain has ensured that all of its stored properties have a value, the instance’s memory is considered to be fully initialized, and phase 1 is complete.</li>
    </ul>
  </li>
  <li>Phase 2
    <ul>
      <li>Working back down from the top of the chain, each designated initializer in the chain has the option to customize the instance further. Initializers are now able to access self and can modify its properties, call its instance methods, and so on.</li>
      <li>Finally, any convenience initializers in the chain have the option to customize the instance and to work with self.
####Initializer Inheritance and Overriding
Unlike subclasses in Objective-C, Swift subclasses do not not inherit their superclass initializers by default.</li>
    </ul>
  </li>
</ol>

<p>If you want your custom subclass to present one or more of the same initializers as its superclass—perhaps to perform some customization during initialization—you can provide an overriding implementation of the same initializer within your custom subclass.</p>

<p>If the initializer you are overriding is a designated initializer, you can override its implementation in your subclass and call the superclass version of the initializer from within your overriding version.</p>

<p>If the initializer you are overriding is a convenience initializer, your override must call another designated initializer from its own subclass</p>

<p><code>注意</code></p>

<pre><code>Unlike methods, properties, and subscripts, you do not need to write the override keyword when overriding an initializer.
</code></pre>

<h5 id="automatic-initializer-inheritance">Automatic Initializer Inheritance</h5>
<p>Subclasses do not not inherit their superclass initializers by default. However, superclass initializers are automatically inherited if certain conditions are met. In practice, this means that you do not need to write initializer overrides in many common scenarios, and can inherit your superclass initializers with minimal effort whenever it is safe to do so.</p>

<p>Assuming that you provide default values for <code>any</code> new properties you introduce in a subclass, the following two rules apply:</p>

<ul>
  <li>
    <p>Rule 1</p>

    <p>If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers.</p>
  </li>
  <li>
    <p>Rule 2</p>

    <p>If your subclass provides an implementation of <code>all</code> of its superclass designated initializers—either by inheriting them as per rule 1, or by providing a custom implementation as part of its definition—then it automatically inherits all of the superclass convenience initializers.</p>
  </li>
</ul>

<p>These rules apply even if your subclass adds further convenience initializers.</p>

<p><code>注意</code></p>

<pre><code>A subclass can implement a superclass designated initializer as a subclass convenience initializer as part of satisfying rule 2.
</code></pre>

<h5 id="syntax-for-designated-and-convenience-initializers">Syntax for Designated and Convenience Initializers</h5>
<ul>
  <li>Designated initializers </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">init(parameters) {
</span><span class="line">	statements
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Convenience initializers</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">convenience init(parameters) {
</span><span class="line">    statements
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Designated and Convenience Initializers in Action
以下显示了designated initializers, convenience initializers, and automatic initializer inheritance in action,定义了三个类Food,RecipeIngredient,ShoppingListItem的继承关系</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//Food
</span><span class="line">class Food {
</span><span class="line">    var name: String
</span><span class="line">    init(name: String) {
</span><span class="line">        self.name = name
</span><span class="line">    }
</span><span class="line">    convenience init() {
</span><span class="line">        self.init(name: "[Unnamed]")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">//Designated initializer
</span><span class="line">let namedMeat = Food(name: "Bacon")
</span><span class="line">// namedMeat's name is "Bacon”
</span><span class="line">
</span><span class="line">let mysteryMeat = Food()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Food的initializer chain图</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/8/initialize.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class RecipeIngredient: Food {
</span><span class="line">    var quantity: Int
</span><span class="line">    init(name: String, quantity: Int) {
</span><span class="line">        self.quantity = quantity
</span><span class="line">        super.init(name: name)
</span><span class="line">    }
</span><span class="line">    convenience init(name: String) {
</span><span class="line">        self.init(name: name, quantity: 1)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let oneMysteryItem = RecipeIngredient()
</span><span class="line">let oneBacon = RecipeIngredient(name: "Bacon")
</span><span class="line">let sixEggs = RecipeIngredient(name: "Eggs", quantity: 6)
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>图示如下</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/8/recipeIngredient.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class ShoppingListItem: RecipeIngredient {
</span><span class="line">    var purchased = false
</span><span class="line">    var description: String {
</span><span class="line">    var output = "\(quantity) x \(name.lowercaseString)"
</span><span class="line">        output += purchased ? " ✔" : " ✘"
</span><span class="line">        return output
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>以上三个类的继承图</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/8/foodchaining.png" />
You can use all three of the inherited initializers to create a new ShoppingListItem instance:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">“var breakfastList = [
</span><span class="line">    ShoppingListItem(),
</span><span class="line">    ShoppingListItem(name: "Bacon"),
</span><span class="line">    ShoppingListItem(name: "Eggs", quantity: 6),
</span><span class="line">]
</span><span class="line">breakfastList[0].name = "Orange juice"
</span><span class="line">breakfastList[0].purchased = true
</span><span class="line">for item in breakfastList {
</span><span class="line">    println(item.description)
</span><span class="line">}
</span><span class="line">// 1 x orange juice ✔
</span><span class="line">// 1 x bacon ✘
</span><span class="line">// 6 x eggs ✘”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####用closure或是函数来设置一个默认值
If a stored property’s default value requires some customization or setup, you can use a closure or global function to provide a customized default value for that property，Whenever a new instance of the type that the property belongs to is initialized, the closure or function is called, and its return value is assigned as the property’s default value.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class SomeClass {
</span><span class="line">    let someProperty: SomeType = {
</span><span class="line">        // create a default value for someProperty inside this closure
</span><span class="line">        // someValue must be of the same type as SomeType
</span><span class="line">        return someValue
</span><span class="line">        }()
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Note that the closure’s end curly brace is followed by an empty pair of parentheses. This tells Swift to execute the closure immediately</p>

<p><code>注意</code></p>

<pre><code>If you use a closure to initialize a property, remember that the rest of the instance has not yet been initialized at the point that the closure is executed. This means that you cannot access any other property values from within your closure, even if those properties have default values. You also cannot use the implicit self property, or call any of the instance’s methods.
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Checkerboard {
</span><span class="line">    let boardColors: Bool[] = {
</span><span class="line">        var temporaryBoard = Bool[]()
</span><span class="line">        var isBlack = false
</span><span class="line">        for i in 1...10 {
</span><span class="line">            for j in 1...10 {
</span><span class="line">                temporaryBoard.append(isBlack)
</span><span class="line">                isBlack = !isBlack
</span><span class="line">            }
</span><span class="line">            isBlack = !isBlack
</span><span class="line">        }
</span><span class="line">        return temporaryBoard
</span><span class="line">        }()
</span><span class="line">    func squareIsBlackAtRow(row: Int, column: Int) -&gt; Bool {
</span><span class="line">        return boardColors[(row * 10) + column]
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let board = Checkerboard()
</span><span class="line">println(board.squareIsBlackAtRow(0, column: 1))
</span><span class="line">// prints "true"
</span><span class="line">println(board.squareIsBlackAtRow(9, column: 9))
</span><span class="line">// prints "false”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Deinitialization</p>

<p>A deinitializer is called immediately before a class instance is deallocated. You write deinitializers with the <code>deinit</code> keyword, similar to how intializers are written with the init keyword. <code>Deinitializers are only available on class types</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">deinit {
</span><span class="line">    // perform the deinitialization
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来看一个demo</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Bank {
</span><span class="line">    static var coinsInBank = 10_000
</span><span class="line">    static func vendCoins(var numberOfCoinsToVend: Int) -&gt; Int {
</span><span class="line">        numberOfCoinsToVend = min(numberOfCoinsToVend, coinsInBank)
</span><span class="line">        coinsInBank -= numberOfCoinsToVend
</span><span class="line">        return numberOfCoinsToVend
</span><span class="line">    }
</span><span class="line">    static func receiveCoins(coins: Int) {
</span><span class="line">        coinsInBank += coins
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">class Player {
</span><span class="line">    var coinsInPurse: Int
</span><span class="line">    init(coins: Int) {
</span><span class="line">        coinsInPurse = Bank.vendCoins(coins)
</span><span class="line">    }
</span><span class="line">    func winCoins(coins: Int) {
</span><span class="line">        coinsInPurse += Bank.vendCoins(coins)
</span><span class="line">    }
</span><span class="line">    deinit {
</span><span class="line">        Bank.receiveCoins(coinsInPurse)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var playerOne: Player? = Player(coins: 100)
</span><span class="line">println("A new player has joined the game with \(playerOne!.coinsInPurse) coins")
</span><span class="line">// prints "A new player has joined the game with 100 coins"
</span><span class="line">println("There are now \(Bank.coinsInBank) coins left in the bank")
</span><span class="line">// prints "There are now 9900 coins left in the bank”
</span><span class="line">
</span><span class="line">playerOne!.winCoins(2_000)
</span><span class="line">println("PlayerOne won 2000 coins &amp; now has \(playerOne!.coinsInPurse) coins")
</span><span class="line">// prints "PlayerOne won 2000 coins &amp; now has 2100 coins"
</span><span class="line">println("The bank now only has \(Bank.coinsInBank) coins left")
</span><span class="line">// prints "The bank now only has 7900 coins left”
</span><span class="line">
</span><span class="line">playerOne = nil
</span><span class="line">println("PlayerOne has left the game")
</span><span class="line">// prints "PlayerOne has left the game"
</span><span class="line">println("The bank now has \(Bank.coinsInBank) coins")
</span><span class="line">// prints "The bank now has 10000 coins”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####ARC
Swift也用arc,不过，需要注意的是arc只适用于类对象,不适用于Structure和enumeration这类值类型</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Person {
</span><span class="line">    let name: String
</span><span class="line">    init(name: String) {
</span><span class="line">        self.name = name
</span><span class="line">        println("\(name) is being initialized")
</span><span class="line">    }
</span><span class="line">    deinit {
</span><span class="line">        println("\(name) is being deinitialized")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">reference1 = Person(name: "John Appleseed")
</span><span class="line">// prints "John Appleseed is being initialized"
</span><span class="line">
</span><span class="line">reference2 = reference1
</span><span class="line">reference3 = reference1
</span><span class="line">reference1 = nil
</span><span class="line">reference2 = nil
</span><span class="line">
</span><span class="line">reference3 = nil
</span><span class="line">// prints "John Appleseed is being deinitialized”
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>类对象之间的循环引用
You resolve strong reference cycles by defining some of the relationships between classes as weak or unowned references instead of as strong references
我们来看看循环引用是如何造成的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Person {
</span><span class="line">    let name: String
</span><span class="line">    init(name: String) { self.name = name }
</span><span class="line">    var apartment: Apartment?
</span><span class="line">    deinit { println("\(name) is being deinitialized") }
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">class Apartment {
</span><span class="line">    let number: Int
</span><span class="line">    init(number: Int) { self.number = number }
</span><span class="line">    var tenant: Person?
</span><span class="line">    deinit { println("Apartment #\(number) is being deinitialized") }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var john: Person?
</span><span class="line">var number73: Apartment?
</span><span class="line">
</span><span class="line">john = Person(name: "John Appleseed")
</span><span class="line">number73 = Apartment(number: 73)
</span><span class="line">
</span><span class="line">john!.apartment = number73
</span><span class="line">number73!.tenant = john
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>现在我们来看看 cycle retain图</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/8/cycleretain.png" /></p>

<h4 id="section-3">如何解决</h4>
<p>Swift provides two ways to resolve strong reference cycles when you work with properties of class type: weak references and unowned references.</p>

<p>Use a weak reference whenever it is valid for that reference to become nil at some point during its lifetime. Conversely, use an unowned reference when you know that the reference will never be nil once it has been set during initialization.</p>

<ul>
  <li>Weak References</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Person {
</span><span class="line">    let name: String
</span><span class="line">    init(name: String) { self.name = name }
</span><span class="line">    var apartment: Apartment?
</span><span class="line">    deinit { println("\(name) is being deinitialized") }
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">class Apartment {
</span><span class="line">    let number: Int
</span><span class="line">    init(number: Int) { self.number = number }
</span><span class="line">    weak var tenant: Person?
</span><span class="line">    deinit { println("Apartment #\(number) is being deinitialized") }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var john: Person?
</span><span class="line">var number73: Apartment?
</span><span class="line"> 
</span><span class="line">john = Person(name: "John Appleseed")
</span><span class="line">number73 = Apartment(number: 73)
</span><span class="line"> 
</span><span class="line">john!.apartment = number73
</span><span class="line">number73!.tenant = john
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们来看看引用图</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/8/weakref.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">john = nil
</span><span class="line">// prints "John Appleseed is being deinitialized”
</span><span class="line">number73 = nil
</span><span class="line">// prints "Apartment #73 is being deinitialized”
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Unowned References
Unlike a weak reference, an unowned reference is assumed to always have a value, Because of this, an unowned reference is always defined as a non-optional type.</li>
</ul>

<p>ARC cannot set the reference to nil when the instance it refers to is deallocated, <code>because variables of a non-optional type cannot be set to nil.</code></p>

<p>来看一个例子，这个例子中，我们定义了两个类,Customer和CreditCard,与之前不同，CreditCard肯定对应着一个Customer,故用unowned</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Customer {
</span><span class="line">    let name: String
</span><span class="line">    var card: CreditCard?
</span><span class="line">    init(name: String) {
</span><span class="line">        self.name = name
</span><span class="line">    }
</span><span class="line">    deinit { println("\(name) is being deinitialized") }
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">class CreditCard {
</span><span class="line">    let number: Int
</span><span class="line">    unowned let customer: Customer
</span><span class="line">    init(number: Int, customer: Customer) {
</span><span class="line">        self.number = number
</span><span class="line">        self.customer = customer
</span><span class="line">    }
</span><span class="line">    deinit { println("Card #\(number) is being deinitialized") }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var john: Customer?
</span><span class="line">john = Customer(name: "John Appleseed")
</span><span class="line">john!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/8/unowned.png" /></p>

<h5 id="unowned-references-and-implicitly-unwrapped-optional-properties">Unowned References and Implicitly Unwrapped Optional Properties</h5>
<p>in two classes ,both properties should always have a value, and neither property should ever be nil once initialization is complete. In this scenario, it is useful to combine an unowned property on one class with an implicitly unwrapped optional property on the other class.</p>

<p>This enables both properties to be accessed directly (without optional unwrapping) once initialization is complete, while still avoiding a reference cycle. This section shows you how to set up such a relationship.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Country {
</span><span class="line">    let name: String
</span><span class="line">    let capitalCity: City!
</span><span class="line">    init(name: String, capitalName: String) {
</span><span class="line">        self.name = name
</span><span class="line">        self.capitalCity = City(name: capitalName, country: self)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">class City {
</span><span class="line">    let name: String
</span><span class="line">    unowned let country: Country
</span><span class="line">    init(name: String, country: Country) {
</span><span class="line">        self.name = name
</span><span class="line">        self.country = country
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The initializer for City is called from within the initializer for Country. However, the initializer for Country cannot pass self to the City initializer until a new Country instance is fully initialized, as described in Two-Phase Initialization.</p>

<p>To cope with this requirement, you declare the capitalCity property of Country as an implicitly unwrapped optional property, indicated by the exclamation mark at the end of its type annotation (City!). This means that the capitalCity property has a default value of nil, like any other optional, but can be accessed without the need to unwrap its value as described in Implicitly Unwrapped Optionals.</p>

<p>Because capitalCity has a default nil value, a new Country instance is considered fully initialized as soon as the Country instance sets its name property within its initializer</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var country = Country(name: "Canada", capitalName: "Ottawa")
</span><span class="line">println("\(country.name)'s capital city is called \(country.capitalCity.name)")
</span><span class="line">// prints "Canada's capital city is called Ottawa”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Strong Reference Cycles for Closures
closure有可能导致循环引用，因为closure也是引用类型,Swift提供了一个叫做<code>closure capture list</code>的方式来解决此类问题
我们先看看closure引用的循环引用是如何产生的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class HTMLElement {
</span><span class="line">    
</span><span class="line">    let name: String
</span><span class="line">    let text: String?
</span><span class="line">    
</span><span class="line">    @lazy var asHTML: () -&gt; String = {
</span><span class="line">        if let text = self.text {
</span><span class="line">            return "&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;"
</span><span class="line">        } else {
</span><span class="line">            return "&lt;\(self.name) /&gt;"
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    init(name: String, text: String? = nil) {
</span><span class="line">        self.name = name
</span><span class="line">        self.text = text
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    deinit {
</span><span class="line">        println("\(name) is being deinitialized")
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">}
</span><span class="line">
</span><span class="line">var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")
</span><span class="line">println(paragraph!.asHTML())
</span><span class="line">// prints "&lt;p&gt;hello, world&lt;/p&gt;"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The asHTML property is named and used somewhat like an instance method. However, because asHTML is a closure property rather than an instance method, you can replace the default value of the asHTML property with a custom closure, if you want to change the HTML rendering for a particular HTML element.</p>

<p><code>注意</code></p>

<pre><code>The asHTML property is declared as a lazy property, because it is only needed if and when the element actually needs to be rendered as a string value for some HTML output target. The fact that asHTML is a lazy property means that you can refer to self within the default closure, because the lazy property will not be accessed until after initialization has been completed and self is known to exist.

Even though the closure refers to self multiple times, it only captures one strong reference to the HTMLElement instance.
</code></pre>

<h5 id="closure">解决closure导致的引用循环</h5>
<p>You resolve a strong reference cycle between a closure and a class instance by defining a capture list as part of the closure’s definition</p>

<p>A capture list defines the rules to use when capturing one or more reference types within the closure’s body. As with strong reference cycles between two class instances, you declare each captured reference to be a weak or unowned reference rather than a strong reference</p>

<p><code>注意</code></p>

<pre><code>Swift requires you to write self.someProperty or self.someMethod (rather than just someProperty or someMethod) whenever you refer to a member of self within a closure. This helps you remember that it’s possible to capture self by accident.
</code></pre>

<h5 id="cature-list">定义一个Cature List</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@lazy var someClosure: (Int, String) -&gt; String = {
</span><span class="line">    [unowned self] (index: Int, stringToProcess: String) -&gt; String in
</span><span class="line">    // closure body goes here
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果closure不指定参数列表或返回型(因为它们能从上下文中推测出,则可用以下形式代替</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@lazy var someClosure: () -&gt; String = {
</span><span class="line">    [unowned self] in
</span><span class="line">    // closure body goes here
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Weak and Unowned References
Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, and will always be deallocated at the same time.</p>

<p>Weak references are <code>always</code> of an <code>optional type</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class HTMLElement {
</span><span class="line">    
</span><span class="line">    let name: String
</span><span class="line">    let text: String?
</span><span class="line">    
</span><span class="line">    @lazy var asHTML: () -&gt; String = {
</span><span class="line">        [unowned self] in
</span><span class="line">        if let text = self.text {
</span><span class="line">            return "&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;"
</span><span class="line">        } else {
</span><span class="line">            return "&lt;\(self.name) /&gt;"
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    init(name: String, text: String? = nil) {
</span><span class="line">        self.name = name
</span><span class="line">        self.text = text
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    deinit {
</span><span class="line">        println("\(name) is being deinitialized")
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">}
</span><span class="line">
</span><span class="line">var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")
</span><span class="line">println(paragraph!.asHTML())
</span><span class="line">// prints "&lt;p&gt;hello, world&lt;/p&gt;”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://xiekunRonaldo.github.io/images/2014/8/unownedblock.png" /></p>

<h5 id="optional-chaining">Optional Chaining</h5>
<p>If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.</p>

<p><code>注意</code></p>

<pre><code>Optional chaining in Swift is similar to messaging nil in Objective-C, but in a way that works for any type, and that can be checked for success or failure. #####Optional Chaining as an Alternative to Forced Unwrapping To reflect the fact that optional chaining can be called on a nil value, the result of an optional chaining call is always an optional value,even if the property, method, or subscript you are querying returns a non-optional value
</code></pre>

<p>Specifically, the result of an optional chaining call is of the same type as the expected return value, but wrapped in an optional,A property that normally returns an Int will return an Int? when accessed through optional chaining.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Person {
</span><span class="line">    var residence: Residence?
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">class Residence {
</span><span class="line">    var numberOfRooms = 1
</span><span class="line">}
</span><span class="line">
</span><span class="line">let john = Person()
</span><span class="line">
</span><span class="line">let roomCount = john.residence!.numberOfRooms
</span><span class="line">// this triggers a runtime error
</span><span class="line">
</span><span class="line">if let roomCount = john.residence?.numberOfRooms {
</span><span class="line">    println("John's residence has \(roomCount) room(s).")
</span><span class="line">} else {
</span><span class="line">    println("Unable to retrieve the number of rooms.")
</span><span class="line">}
</span><span class="line">// prints "Unable to retrieve the number of rooms.”
</span><span class="line">
</span><span class="line">john.residence = Residence()
</span><span class="line">
</span><span class="line">if let roomCount = john.residence?.numberOfRooms {
</span><span class="line">    println("John's residence has \(roomCount) room(s).")
</span><span class="line">} else {
</span><span class="line">    println("Unable to retrieve the number of rooms.")
</span><span class="line">}
</span><span class="line">// prints "John's residence has 1 room(s).”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Defining Model Classes for Optional Chaining</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Person {
</span><span class="line">    var residence: Residence?
</span><span class="line">}
</span><span class="line">
</span><span class="line">class Residence {
</span><span class="line">    var rooms = Room[]()
</span><span class="line">    var numberOfRooms: Int {
</span><span class="line">    return rooms.count
</span><span class="line">    }
</span><span class="line">    subscript(i: Int) -&gt; Room {
</span><span class="line">        return rooms[i]
</span><span class="line">    }
</span><span class="line">    func printNumberOfRooms() {
</span><span class="line">        println("The number of rooms is \(numberOfRooms)")
</span><span class="line">    }
</span><span class="line">    var address: Address?
</span><span class="line">}
</span><span class="line">
</span><span class="line">class Room {
</span><span class="line">    let name: String
</span><span class="line">    init(name: String) { self.name = name }
</span><span class="line">}
</span><span class="line">
</span><span class="line">class Address {
</span><span class="line">    var buildingName: String?
</span><span class="line">    var buildingNumber: String?
</span><span class="line">    var street: String?
</span><span class="line">    func buildingIdentifier() -&gt; String? {
</span><span class="line">        if buildingName {
</span><span class="line">            return buildingName
</span><span class="line">        } else if buildingNumber {
</span><span class="line">            return buildingNumber
</span><span class="line">        } else {
</span><span class="line">            return nil
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Calling Properties Through Optional Chaining
you can use optional chaining to access a property on an optional value, and to check if that property access is successful. You cannot, however, set a property’s value through optional chaining.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let john = Person()
</span><span class="line">if let roomCount = john.residence?.numberOfRooms {
</span><span class="line">    println("John's residence has \(roomCount) room(s).")
</span><span class="line">} else {
</span><span class="line">    println("Unable to retrieve the number of rooms.")
</span><span class="line">}
</span><span class="line">// prints "Unable to retrieve the number of rooms.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Calling Methods Through Optional Chaining</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if john.residence?.printNumberOfRooms() {
</span><span class="line">    println("It was possible to print the number of rooms.")
</span><span class="line">} else {
</span><span class="line">    println("It was not possible to print the number of rooms.")
</span><span class="line">}
</span><span class="line">// prints "It was not possible to print the number of rooms.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Calling Subscripts Through Optional Chaining
<code>注意</code></p>

<p>When you access a subscript on an optional value through optional chaining, you place the question mark before the subscript’s braces, not after. The optional chaining question mark always follows immediately after the part of the expression that is optional.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let firstRoomName = john.residence?[0].name {
</span><span class="line">    println("The first room name is \(firstRoomName).")
</span><span class="line">} else {
</span><span class="line">    println("Unable to retrieve the first room name.")
</span><span class="line">}
</span><span class="line">// prints "Unable to retrieve the first room name.”
</span><span class="line">
</span><span class="line">let johnsHouse = Residence()
</span><span class="line">johnsHouse.rooms += Room(name: "Living Room")
</span><span class="line">johnsHouse.rooms += Room(name: "Kitchen")
</span><span class="line">john.residence = johnsHouse
</span><span class="line"> 
</span><span class="line">if let firstRoomName = john.residence?[0].name {
</span><span class="line">    println("The first room name is \(firstRoomName).")
</span><span class="line">} else {
</span><span class="line">    println("Unable to retrieve the first room name.")
</span><span class="line">}
</span><span class="line">// prints "The first room name is Living Room."</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Linking Multiple Levels of Chaining
multiple levels of optional chaining do not add more levels of optionality to the returned value.</p>

<p>也就是说</p>

<ul>
  <li>If the type you are trying to retrieve is not optional, it will become optional because of the optional chaining.</li>
  <li>If the type you are trying to retrieve is already optional, it will not become more optional because of the chaining.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let johnsStreet = john.residence?.address?.street {
</span><span class="line">    println("John's street name is \(johnsStreet).")
</span><span class="line">} else {
</span><span class="line">    println("Unable to retrieve the address.")
</span><span class="line">}
</span><span class="line">// prints "Unable to retrieve the address."
</span><span class="line">
</span><span class="line">let johnsAddress = Address()
</span><span class="line">johnsAddress.buildingName = "The Larches"
</span><span class="line">johnsAddress.street = "Laurel Street"
</span><span class="line">john.residence!.address = johnsAddress
</span><span class="line"> 
</span><span class="line">if let johnsStreet = john.residence?.address?.street {
</span><span class="line">    println("John's street name is \(johnsStreet).")
</span><span class="line">} else {
</span><span class="line">    println("Unable to retrieve the address.")
</span><span class="line">}
</span><span class="line">// prints "John's street name is Laurel Street.”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Chaining on Methods With Optional Return Values</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {
</span><span class="line">    println("John's building identifier is \(buildingIdentifier).")
</span><span class="line">}
</span><span class="line">// prints "John's building identifier is The Larches.”
</span><span class="line">
</span><span class="line">if let upper = john.residence?.address?.buildingIdentifier()?.uppercaseString {
</span><span class="line">    println("John's uppercase building identifier is \(upper).")
</span><span class="line">}
</span><span class="line">// prints "John's uppercase building identifier is THE LARCHES."</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Type Casting
Type casting is a way to check the type of an instance, and/or to treat that instance as if it is a different superclass or subclass from somewhere else in its own class hierarchy.</p>

<p>Type casting in Swift is implemented with the <code>is</code> and <code>as</code> operators.</p>

<p>You can also use type casting to check whether a type conforms to a protocol
#####Defining a Class Hierarchy for Type Casting
Defining a Class Hierarchy for Type Casting</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class MediaItem {
</span><span class="line">    var name: String
</span><span class="line">    init(name: String) {
</span><span class="line">        self.name = name
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">class Movie: MediaItem {
</span><span class="line">    var director: String
</span><span class="line">    init(name: String, director: String) {
</span><span class="line">        self.director = director
</span><span class="line">        super.init(name: name)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">class Song: MediaItem {
</span><span class="line">    var artist: String
</span><span class="line">    init(name: String, artist: String) {
</span><span class="line">        self.artist = artist
</span><span class="line">        super.init(name: name)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let library = [
</span><span class="line">    Movie(name: "Casablanca", director: "Michael Curtiz"),
</span><span class="line">    Song(name: "Blue Suede Shoes", artist: "Elvis Presley"),
</span><span class="line">    Movie(name: "Citizen Kane", director: "Orson Welles"),
</span><span class="line">    Song(name: "The One And Only", artist: "Chesney Hawkes"),
</span><span class="line">    Song(name: "Never Gonna Give You Up", artist: "Rick Astley")
</span><span class="line">]
</span><span class="line">// the type of "library" is inferred to be MediaItem[]”
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Checking Type</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var movieCount = 0
</span><span class="line">var songCount = 0
</span><span class="line"> 
</span><span class="line">for item in library {
</span><span class="line">    if item is Movie {
</span><span class="line">        ++movieCount
</span><span class="line">    } else if item is Song {
</span><span class="line">        ++songCount
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">println("Media library contains \(movieCount) movies and \(songCount) songs")
</span><span class="line">// prints "Media library contains 2 movies and 3 songs”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Downcasting
Because downcasting can fail, the type cast operator comes in two different forms. The optional form, as?, returns an optional value of the type you are trying to downcast to. The forced form, as, attempts the downcast and force-unwraps the result as a single compound action.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for item in library {
</span><span class="line">    if let movie = item as? Movie {
</span><span class="line">        println("Movie: '\(movie.name)', dir. \(movie.director)")
</span><span class="line">    } else if let song = item as? Song {
</span><span class="line">        println("Song: '\(song.name)', by \(song.artist)")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">// Movie: 'Casablanca', dir. Michael Curtiz
</span><span class="line">// Song: 'Blue Suede Shoes', by Elvis Presley
</span><span class="line">// Movie: 'Citizen Kane', dir. Orson Welles
</span><span class="line">// Song: 'The One And Only', by Chesney Hawkes
</span><span class="line">// Song: 'Never Gonna Give You Up', by Rick Astley”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Type Casting for Any and AnyObject
Swift provides two special type aliases for working with non-specific types:</p>

<ul>
  <li>AnyObject can represent an instance of any class type.</li>
  <li>Any can represent an instance of any type at all, apart from function types.</li>
</ul>

<p><code>注意</code></p>

<p>Use Any and AnyObject only when you explicitly need the behavior and capabilities they provide. It is always better to be specific about the types you expect to work with in your code.
#####AnyObject
When working with Cocoa APIs, it is common to receive an array with a type of AnyObject[], or “an array of values of any object type”. This is because Objective-C does not have explicitly typed arrays</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let someObjects: AnyObject[] = [
</span><span class="line">    Movie(name: "2001: A Space Odyssey", director: "Stanley Kubrick"),
</span><span class="line">    Movie(name: "Moon", director: "Duncan Jones"),
</span><span class="line">    Movie(name: "Alien", director: "Ridley Scott")
</span><span class="line">]
</span><span class="line">
</span><span class="line">for object in someObjects {
</span><span class="line">    let movie = object as Movie
</span><span class="line">    println("Movie: '\(movie.name)', dir. \(movie.director)")
</span><span class="line">}
</span><span class="line">// Movie: '2001: A Space Odyssey', dir. Stanley Kubrick
</span><span class="line">// Movie: 'Moon', dir. Duncan Jones
</span><span class="line">// Movie: 'Alien', dir. Ridley Scott”
</span><span class="line">
</span><span class="line">//或者 
</span><span class="line">
</span><span class="line">for movie in someObjects as Movie[] {
</span><span class="line">    println("Movie: '\(movie.name)', dir. \(movie.director)")
</span><span class="line">}
</span><span class="line">// Movie: '2001: A Space Odyssey', dir. Stanley Kubrick
</span><span class="line">// Movie: 'Moon', dir. Duncan Jones
</span><span class="line">// Movie: 'Alien', dir. Ridley Scott”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Any
Here’s an example of using Any to work with a mix of different types, including non-class types</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var things = Any[]()
</span><span class="line"> 
</span><span class="line">things.append(0)
</span><span class="line">things.append(0.0)
</span><span class="line">things.append(42)
</span><span class="line">things.append(3.14159)
</span><span class="line">things.append("hello")
</span><span class="line">things.append((3.0, 5.0))
</span><span class="line">things.append(Movie(name: "Ghostbusters", director: "Ivan Reitman"))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can use the is and as operators in a switch statement’s cases to discover the specific type of a constant or variable that is known <code>only</code> to be of type <code>Any</code> or <code>AnyObject</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for thing in things {
</span><span class="line">    switch thing {
</span><span class="line">    case 0 as Int:
</span><span class="line">        println("zero as an Int")
</span><span class="line">    case 0 as Double:
</span><span class="line">        println("zero as a Double")
</span><span class="line">    case let someInt as Int:
</span><span class="line">        println("an integer value of \(someInt)")
</span><span class="line">    case let someDouble as Double where someDouble &gt; 0:
</span><span class="line">        println("a positive double value of \(someDouble)")
</span><span class="line">    case is Double:
</span><span class="line">        println("some other double value that I don't want to print")
</span><span class="line">    case let someString as String:
</span><span class="line">        println("a string value of \"\(someString)\"")
</span><span class="line">    case let (x, y) as (Double, Double):
</span><span class="line">    
</span><span class="line">println("an (x, y) point at \(x), \(y)")
</span><span class="line">    case let movie as Movie:
</span><span class="line">        println("a movie called '\(movie.name)', dir. \(movie.director)")
</span><span class="line">    default:
</span><span class="line">        println("something else")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">// zero as an Int
</span><span class="line">// zero as a Double
</span><span class="line">// an integer value of 42
</span><span class="line">// a positive double value of 3.14159
</span><span class="line">// a string value of "hello"
</span><span class="line">// an (x, y) point at 3.0, 5.0
</span><span class="line">// a movie called 'Ghostbusters', dir. Ivan Reitman</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code></p>

<pre><code>The cases of a switch statement use the forced version of the type cast operator (as, not as?) to check and cast to a specific type. This check is always safe within the context of a switch case statement. #####Nested Types Nest supporting enumerations, classes, and structures within the definition of the type they support.
</code></pre>

<p>To nest a type within another type, write its definition within the outer braces of the type it supports. Types can be nested to <code>as many levels as are required</code>.</p>

<h5 id="nested-types-in-action">Nested Types in Action</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct BlackjackCard {
</span><span class="line">// nested Suit enumeration
</span><span class="line">    enum Suit: Character {
</span><span class="line">        case Spades = "♠", Hearts = "♡", Diamonds = "♢", Clubs = "♣"
</span><span class="line">    }
</span><span class="line">    
</span><span class="line">    // nested Rank enumeration
</span><span class="line">    enum Rank: Int {
</span><span class="line">        case Two = 2, Three, Four, Five, Six, Seven, Eight, Nine, Ten
</span><span class="line">        case Jack, Queen, King, Ace
</span><span class="line">        struct Values {
</span><span class="line">            let first: Int, second: Int?
</span><span class="line">        }
</span><span class="line">        var values: Values {
</span><span class="line">        switch self {
</span><span class="line">        case .Ace:
</span><span class="line">            return Values(first: 1, second: 11)
</span><span class="line">        case .Jack, .Queen, .King:
</span><span class="line">            return Values(first: 10, second: nil)
</span><span class="line">        default:
</span><span class="line">            return Values(first: self.toRaw(), second: nil)
</span><span class="line">            }
</span><span class="line">        }
</span><span class="line">	}
</span><span class="line">    
</span><span class="line">    // BlackjackCard properties and methods
</span><span class="line">    let rank: Rank, suit: Suit
</span><span class="line">    var description: String {
</span><span class="line">    var output = "suit is \(suit.toRaw()),"
</span><span class="line">        output += " value is \(rank.values.first)"
</span><span class="line">        if let second = rank.values.second {
</span><span class="line">            output += " or \(second)"
</span><span class="line">        }
</span><span class="line">        return output
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let theAceOfSpades = BlackjackCard(rank: .Ace, suit: .Spades)
</span><span class="line">println("theAceOfSpades: \(theAceOfSpades.description)")
</span><span class="line">// prints "theAceOfSpades: suit is ♠, value is 1 or 11”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Even though Rank and Suit are nested within BlackjackCard, their type can be inferred from context,“\and so the initialization of this instance is able to refer to the enumeration members by their member names (.Ace and .Spades) alone.</p>

<h5 id="referring-to-nested-types">Referring to Nested Types</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let heartsSymbol = BlackjackCard.Suit.Hearts.toRaw()
</span><span class="line">// heartsSymbol is "♡”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Extensions
Extensions add new functionality to an existing class, structure, or enumeration type,类似OC中的类别,Unlike Objective-C categories, Swift extensions do not have names
Swift中的Extensions能做以下事情</p>

<ul>
  <li>添加computed properties和computed static properties</li>
  <li>定义instance methods和type methods</li>
  <li>提供新的initializers</li>
  <li>定义subscripts</li>
  <li>定义并使用nested types</li>
  <li>让一个已存在的type遵循某个协议</li>
</ul>

<p><code>注意</code></p>

<pre><code>If you define an extension to add new functionality to an existing type, the new functionality will be available on all existing instances of that type, even if they were created before the extension was defined.
</code></pre>

<h5 id="section-4">语法</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension SomeType {
</span><span class="line">    // new functionality to add to SomeType goes here
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>An extension can extend an existing type to make it adopt one or more protocols.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension SomeType: SomeProtocol, AnotherProtocol {
</span><span class="line">    // implementation of protocol requirements goes here
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Computed Properties
Extensions can add computed instance properties and computed type properties to existing types</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension Double {
</span><span class="line">    var km: Double { return self * 1_000.0 }
</span><span class="line">    var m: Double { return self }
</span><span class="line">    var cm: Double { return self / 100.0 }
</span><span class="line">    var mm: Double { return self / 1_000.0 }
</span><span class="line">    var ft: Double { return self / 3.28084 }
</span><span class="line">}
</span><span class="line">let oneInch = 25.4.mm
</span><span class="line">println("One inch is \(oneInch) meters")
</span><span class="line">// prints "One inch is 0.0254 meters"
</span><span class="line">let threeFeet = 3.ft
</span><span class="line">println("Three feet is \(threeFeet) meters")
</span><span class="line">// prints "Three feet is 0.914399970739201 meters”
</span><span class="line">
</span><span class="line">let aMarathon = 42.km + 195.m
</span><span class="line">println("A marathon is \(aMarathon) meters long")
</span><span class="line">// prints "A marathon is 42195.0 meters long”</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>注意</code></p>

<pre><code>Extensions can add new computed properties, but they cannot add stored properties, or add property observers to existing properties.
</code></pre>

<h5 id="initializers">Initializers</h5>
<p>Extensions can add new initializers to existing types. This enables you to extend other types to accept your own custom types as initializer parameters, or to provide additional initialization options that were not included as part of the type’s original implementation.</p>

<p><code>Extensions can add new convenience initializers to a class, but they cannot add new designated initializers or deinitializers to a class</code>. Designated initializers and deinitializers must always be provided by the original class implementation.</p>

<p><code>注意</code></p>

<pre><code>If you use an extension to add an initializer to a value type that provides default values for all of its stored properties and does not define any custom initializers, you can call the default initializer and memberwise initializer for that value type from within your extension’s initializer.

This would not be the case if you had written the initializer as part of the value type’s original implementation
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Size {
</span><span class="line">    var width = 0.0, height = 0.0
</span><span class="line">}
</span><span class="line">struct Point {
</span><span class="line">    var x = 0.0, y = 0.0
</span><span class="line">}
</span><span class="line">struct Rect {
</span><span class="line">    var origin = Point()
</span><span class="line">    var size = Size()
</span><span class="line">}
</span><span class="line">
</span><span class="line">let defaultRect = Rect()
</span><span class="line">let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),
</span><span class="line">    size: Size(width: 5.0, height: 5.0))
</span><span class="line">    
</span><span class="line">extension Rect {
</span><span class="line">    init(center: Point, size: Size) {
</span><span class="line">        let originX = center.x - (size.width / 2)
</span><span class="line">        let originY = center.y - (size.height / 2)
</span><span class="line">        self.init(origin: Point(x: originX, y: originY), size: size)
</span><span class="line">    }
</span><span class="line">}    
</span><span class="line">
</span><span class="line">let centerRect = Rect(center: Point(x: 4.0, y: 4.0),
</span><span class="line">    size: Size(width: 3.0, height: 3.0))
</span><span class="line">// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code></p>

<pre><code>If you provide a new initializer with an extension, you are still responsible for making sure that each instance is fully initialized once the initializer completes. #####Methods Extensions can add new instance methods and type methods to existing types.
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension Int {
</span><span class="line">    func repetitions(task: () -&gt; ()) {
</span><span class="line">        for i in 0..self {
</span><span class="line">            task()
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">3.repetitions({
</span><span class="line">    println("Hello!")
</span><span class="line">    })
</span><span class="line">// Hello!
</span><span class="line">// Hello!
</span><span class="line">// Hello!
</span><span class="line">
</span><span class="line">//或者
</span><span class="line">3.repetitions {
</span><span class="line">    println("Goodbye!")
</span><span class="line">}
</span><span class="line">// Goodbye!
</span><span class="line">// Goodbye!
</span><span class="line">// Goodbye!</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Mutating Instance Methods</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension Int {
</span><span class="line">    mutating func square() {
</span><span class="line">        self = self * self
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var someInt = 3
</span><span class="line">someInt.square()
</span><span class="line">// someInt is now 9</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Subscripts
Extensions can add new subscripts to an existing type.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">“extension Int {
</span><span class="line">    subscript(digitIndex: Int) -&gt; Int {
</span><span class="line">        var decimalBase = 1
</span><span class="line">            for _ in 1...digitIndex {
</span><span class="line">                decimalBase *= 10
</span><span class="line">            }
</span><span class="line">            return (self / decimalBase) % 10
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">746381295[0]
</span><span class="line">// returns 5
</span><span class="line">746381295[1]
</span><span class="line">// returns 9
</span><span class="line">746381295[2]
</span><span class="line">// returns 2
</span><span class="line">746381295[8]
</span><span class="line">// returns 7</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Nested Types
Extensions can add new nested types to existing classes, structures and enumerations:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension Character {
</span><span class="line">    enum Kind {
</span><span class="line">        case Vowel, Consonant, Other
</span><span class="line">    }
</span><span class="line">    var kind: Kind {
</span><span class="line">    switch String(self).lowercaseString {
</span><span class="line">    case "a", "e", "i", "o", "u":
</span><span class="line">        return .Vowel
</span><span class="line">    case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
</span><span class="line">    "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
</span><span class="line">        return .Consonant
</span><span class="line">    default:
</span><span class="line">        return .Other
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">func printLetterKinds(word: String) {
</span><span class="line">    println("'\(word)' is made up of the following kinds of letters:")
</span><span class="line">    for character in word {
</span><span class="line">        switch character.kind {
</span><span class="line">        case .Vowel:
</span><span class="line">            print("vowel ")
</span><span class="line">        case .Consonant:
</span><span class="line">            print("consonant ")
</span><span class="line">        case .Other:
</span><span class="line">            print("other ")
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    print("\n")
</span><span class="line">}
</span><span class="line">printLetterKinds("Hello")
</span><span class="line">// 'Hello' is made up of the following kinds of letters:
</span><span class="line">// consonant vowel consonant consonant vowel</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Protocol
A protocol defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality.</p>

<p>Protocols can <code>require</code> that conforming types have specific instance properties, instance methods, type methods, operators, and subscripts.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol SomeProtocol {
</span><span class="line">    // protocol definition goes here
</span><span class="line">}
</span><span class="line">
</span><span class="line">struct SomeStructure: FirstProtocol, AnotherProtocol {
</span><span class="line">    // structure definition goes here
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If a class has a <code>superclass</code>, list the superclass name before any protocols it adopts, followed by a comma:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {
</span><span class="line">    // class definition goes here
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Property Requirements
A protocol can require any conforming type to provide an instance property or type property with a particular name and type.</p>

<p>The protocol doesn’t specify whether the property should be a stored property or a computed property—it only specifies the required property name and type. The protocol also specifies whether each property must be gettable or gettable and settable.</p>

<p>If a protocol requires a property to be gettable and settable, that property requirement cannot be fulfilled by a constant stored property or a read-only computed property.</p>

<p>Property requirements are always declared as variable properties, prefixed with the var keyword.</p>

<p>Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol SomeProtocol {
</span><span class="line">    var mustBeSettable: Int { get set }
</span><span class="line">    var doesNotNeedToBeSettable: Int { get }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>注意</code></p>

<pre><code>Always prefix type property requirements with the class keyword when you define them in a protocol. This is true even though type property requirements are prefixed with the static keyword when implemented by a structure or enumeration:
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol AnotherProtocol {
</span><span class="line">    class var someTypeProperty: Int { get set }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Here’s an example of a protocol with a single instance property requirement:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol FullyNamed {
</span><span class="line">    var fullName: String { get }
</span><span class="line">}
</span><span class="line">
</span><span class="line">struct Person: FullyNamed {
</span><span class="line">    var fullName: String
</span><span class="line">}
</span><span class="line">let john = Person(fullName: "John Appleseed")
</span><span class="line">// john.fullName is "John Appleseed”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Swift reports an error at compile-time if a protocol requirement is not fulfilled.</p>

<p>Here’s a more complex class, which also adopts and conforms to the FullyNamed 
protocol:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Starship: FullyNamed {
</span><span class="line">    var prefix: String?
</span><span class="line">    var name: String
</span><span class="line">    init(name: String, prefix: String? = nil) {
</span><span class="line">        self.name = name
</span><span class="line">        self.prefix = prefix
</span><span class="line">    }
</span><span class="line">    var fullName: String {
</span><span class="line">    return (prefix ? prefix! + " " : "") + name
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var ncc1701 = Starship(name: "Enterprise", prefix: "USS")
</span><span class="line">// ncc1701.fullName is "USS Enterprise”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Method Requirements
Protocols can require specific instance methods and type methods to be implemented by conforming types. These methods are written as part of the protocol’s definition in exactly the same way as for normal instance and type methods, but without curly braces or a method body. Variadic parameters are allowed, subject to the same rules as for normal methods.</p>

<p><code>注意</code></p>

<p>Protocols use the same syntax as normal methods, but are not allowed to specify default values for method parameters.</p>

<p>As with type property requirements, you always prefix type method requirements with the class keyword when they are defined in a protocol. This is true even though type method requirements are prefixed with the static keyword when implemented by a structure or enumeration:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol SomeProtocol {
</span><span class="line">    class func someTypeMethod()
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来看一个demo</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol RandomNumberGenerator {
</span><span class="line">    func random() -&gt; Double
</span><span class="line">}
</span><span class="line">
</span><span class="line">class LinearCongruentialGenerator: RandomNumberGenerator {
</span><span class="line">    var lastRandom = 42.0
</span><span class="line">    let m = 139968.0
</span><span class="line">    let a = 3877.0
</span><span class="line">    let c = 29573.0
</span><span class="line">    func random() -&gt; Double {
</span><span class="line">        lastRandom = ((lastRandom * a + c) % m)
</span><span class="line">        return lastRandom / m
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let generator = LinearCongruentialGenerator()
</span><span class="line">println("Here's a random number: \(generator.random())")
</span><span class="line">// prints "Here's a random number: 0.37464991998171"
</span><span class="line">println("And another one: \(generator.random())")
</span><span class="line">// prints "And another one: 0.729023776863283”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Mutating Method Requirements</p>

<p>It is sometimes necessary for a method to modify (or mutate) the instance it belongs to</p>

<p><code>注意</code></p>

<p>If you mark a protocol instance method requirement as mutating, you do not need to write the mutating keyword when writing an implementation of that method for a class. The mutating keyword is only used by structures and enumerations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol Togglable {
</span><span class="line">    mutating func toggle()
</span><span class="line">}
</span><span class="line">
</span><span class="line">enum OnOffSwitch: Togglable {
</span><span class="line">    case Off, On
</span><span class="line">    mutating func toggle() {
</span><span class="line">        switch self {
</span><span class="line">        case Off:
</span><span class="line">            self = On
</span><span class="line">        case On:
</span><span class="line">            self = Off
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">var lightSwitch = OnOffSwitch.Off
</span><span class="line">lightSwitch.toggle()
</span><span class="line">// lightSwitch is now equal to .On”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Protocols as Types
Protocols do not actually implement any functionality themselves. Nonetheless, any protocol you create will become a fully-fledged type for use in your code.
Because it is a type, you can use a protocol in many places where other types are allowed, including:</p>

<ul>
  <li>As a parameter type or return type in a function, method, or initializer</li>
  <li>As the type of a constant, variable, or property</li>
  <li>As the type of items in an array, dictionary, or other container</li>
</ul>

<p>Here’s an example of a protocol used as a type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Dice {
</span><span class="line">    let sides: Int
</span><span class="line">    let generator: RandomNumberGenerator
</span><span class="line">    init(sides: Int, generator: RandomNumberGenerator) {
</span><span class="line">        self.sides = sides
</span><span class="line">        self.generator = generator
</span><span class="line">    }
</span><span class="line">    func roll() -&gt; Int {
</span><span class="line">        return Int(generator.random() * Double(sides)) + 1
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var d6 = Dice(sides: 6, generator: LinearCongruentialGenerator())
</span><span class="line">for _ in 1...5 {
</span><span class="line">    println("Random dice roll is \(d6.roll())")
</span><span class="line">}
</span><span class="line">// Random dice roll is 3
</span><span class="line">// Random dice roll is 5
</span><span class="line">// Random dice roll is 4
</span><span class="line">// Random dice roll is 5
</span><span class="line">// Random dice roll is 4</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Delegation</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol DiceGame {
</span><span class="line">    var dice: Dice { get }
</span><span class="line">    func play()
</span><span class="line">}
</span><span class="line">
</span><span class="line">protocol DiceGameDelegate {
</span><span class="line">    func gameDidStart(game: DiceGame)
</span><span class="line">    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)
</span><span class="line">    func gameDidEnd(game: DiceGame)
</span><span class="line">}
</span><span class="line">
</span><span class="line">class SnakesAndLadders: DiceGame {
</span><span class="line">    let finalSquare = 25
</span><span class="line">    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())
</span><span class="line">    var square = 0
</span><span class="line">    var board: Int[]
</span><span class="line">    init() {
</span><span class="line">        board = Int[](count: finalSquare + 1, repeatedValue: 0)
</span><span class="line">        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
</span><span class="line">        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
</span><span class="line">    }
</span><span class="line">    var delegate: DiceGameDelegate?
</span><span class="line">    func play() {
</span><span class="line">        square = 0
</span><span class="line">        delegate?.gameDidStart(self)
</span><span class="line">        gameLoop: while square != finalSquare {
</span><span class="line">            let diceRoll = dice.roll()
</span><span class="line">            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)
</span><span class="line">            switch square + diceRoll {
</span><span class="line">            case finalSquare:
</span><span class="line">                break gameLoop
</span><span class="line">            case let newSquare where newSquare &gt; finalSquare:
</span><span class="line">                continue gameLoop
</span><span class="line">            default:
</span><span class="line">                square += diceRoll
</span><span class="line">                square += board[square]
</span><span class="line">            }
</span><span class="line">        }
</span><span class="line">        delegate?.gameDidEnd(self)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">class DiceGameTracker: DiceGameDelegate {
</span><span class="line">    var numberOfTurns = 0
</span><span class="line">    func gameDidStart(game: DiceGame) {
</span><span class="line">        numberOfTurns = 0
</span><span class="line">        if game is SnakesAndLadders {
</span><span class="line">            println("Started a new game of Snakes and Ladders")
</span><span class="line">        }
</span><span class="line">        println("The game is using a \(game.dice.sides)-sided dice")
</span><span class="line">    }
</span><span class="line">    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {
</span><span class="line">        ++numberOfTurns
</span><span class="line">        println("Rolled a \(diceRoll)")
</span><span class="line">    }
</span><span class="line">    func gameDidEnd(game: DiceGame) {
</span><span class="line">        println("The game lasted for \(numberOfTurns) turns")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let tracker = DiceGameTracker()
</span><span class="line">let game = SnakesAndLadders()
</span><span class="line">game.delegate = tracker
</span><span class="line">game.play()
</span><span class="line">// Started a new game of Snakes and Ladders
</span><span class="line">// The game is using a 6-sided dice
</span><span class="line">// Rolled a 3
</span><span class="line">// Rolled a 5
</span><span class="line">// Rolled a 4
</span><span class="line">// Rolled a 5
</span><span class="line">// The game lasted for 4 turns</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Adding Protocol Conformance with an Extension
<code>注意</code></p>

<p>Existing instances of a type automatically adopt and conform to a protocol when that conformance is added to the instance’s type in an extension.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol TextRepresentable {
</span><span class="line">    func asText() -&gt; String
</span><span class="line">}
</span><span class="line">
</span><span class="line">extension Dice: TextRepresentable {
</span><span class="line">    func asText() -&gt; String {
</span><span class="line">        return "A \(sides)-sided dice"
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let d12 = Dice(sides: 12, generator: LinearCongruentialGenerator())
</span><span class="line">println(d12.asText())
</span><span class="line">// prints "A 12-sided dice”
</span><span class="line">
</span><span class="line">extension SnakesAndLadders: TextRepresentable {
</span><span class="line">    func asText() -&gt; String {
</span><span class="line">        return "A game of Snakes and Ladders with \(finalSquare) squares"
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">println(game.asText())
</span><span class="line">// prints "A game of Snakes and Ladders with 25 squares”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Declaring Protocol Adoption with an Extension</p>

<p>If a type already conforms to all of the requirements of a protocol, but has not yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Hamster {
</span><span class="line">    var name: String
</span><span class="line">    func asText() -&gt; String {
</span><span class="line">        return "A hamster named \(name)"
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">extension Hamster: TextRepresentable {}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code></p>

<p>Instances of Hamster can now be used wherever TextRepresentable is the required type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let simonTheHamster = Hamster(name: "Simon")
</span><span class="line">let somethingTextRepresentable: TextRepresentable = simonTheHamster
</span><span class="line">println(somethingTextRepresentable.asText())
</span><span class="line">// prints "A hamster named Simon”</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code></p>

<pre><code>Types do not automatically adopt a protocol just by satisfying its requirements. They must always explicitly declare their adoption of the protocol.
</code></pre>

<h5 id="collections-of-protocol-types">Collections of Protocol Types</h5>
<p>A protocol can be used as the type to be stored in a collection such as an array or a dictionary</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let things: TextRepresentable[] = [game, d12, simonTheHamster]
</span><span class="line">
</span><span class="line">for thing in things {
</span><span class="line">    println(thing.asText())
</span><span class="line">}
</span><span class="line">// A game of Snakes and Ladders with 25 squares
</span><span class="line">// A 12-sided dice
</span><span class="line">// A hamster named Simon
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Protocol Inheritance
A protocol can inherit one or more other protocols and can add further requirements on top of the requirements it inherits</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol InheritingProtocol: SomeProtocol, AnotherProtocol {
</span><span class="line">    // protocol definition goes here
</span><span class="line">}
</span><span class="line">
</span><span class="line">protocol PrettyTextRepresentable: TextRepresentable {
</span><span class="line">    func asPrettyText() -&gt; String
</span><span class="line">}
</span><span class="line">
</span><span class="line">extension SnakesAndLadders: PrettyTextRepresentable {
</span><span class="line">    func asPrettyText() -&gt; String {
</span><span class="line">        var output = asText() + ":\n"
</span><span class="line">        for index in 1...finalSquare {
</span><span class="line">            switch board[index] {
</span><span class="line">            case let ladder where ladder &gt; 0:
</span><span class="line">                output += "▲ "
</span><span class="line">            case let snake where snake &lt; 0:
</span><span class="line">                output += "▼ "
</span><span class="line">            default:
</span><span class="line">                output += "○ "
</span><span class="line">            }
</span><span class="line">        }
</span><span class="line">        return output
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">println(game.asPrettyText())
</span><span class="line">// A game of Snakes and Ladders with 25 squares:
</span><span class="line">// ○ ○ ▲ ○ ○ ▲ ○ ○ ▲ ▲ ○ ○ ○ ▼ ○ ○ ○ ○ ▼ ○ ○ ▼ ○ ▼ ○</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="protocol-composition">Protocol Composition</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol Named {
</span><span class="line">    var name: String { get }
</span><span class="line">}
</span><span class="line">protocol Aged {
</span><span class="line">    var age: Int { get }
</span><span class="line">}
</span><span class="line">struct Person: Named, Aged {
</span><span class="line">    var name: String
</span><span class="line">    var age: Int
</span><span class="line">}
</span><span class="line">func wishHappyBirthday(celebrator: protocol&lt;Named, Aged&gt;) {
</span><span class="line">    println("Happy birthday \(celebrator.name) - you're \(celebrator.age)!")
</span><span class="line">}
</span><span class="line">let birthdayPerson = Person(name: "Malcolm", age: 21)
</span><span class="line">wishHappyBirthday(birthdayPerson)
</span><span class="line">// prints "Happy birthday Malcolm - you're 21!"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Checking for Protocol Conformance</p>

<p>You can use the is and as operators described in Type Casting to check for protocol conformance, and to cast to a specific protocol.</p>

<ul>
  <li>The is operator returns true if an instance conforms to a protocol and returns false if it does not.</li>
  <li>The as? version of the downcast operator returns an optional value of the protocol’s type, and this value is nil if the instance does not conform to that protocol.</li>
  <li>The as version of the downcast operator forces the downcast to the protocol type and triggers a runtime error if the downcast does not succeed.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@objc protocol HasArea {
</span><span class="line">    var area: Double { get }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code></p>

<p>You can check for protocol conformance <code>only if your protocol is marked with the @objc attribute</code>, as seen for the HasArea protocol above. This attribute indicates that the protocol should be exposed to Objective-C code and is described in Using Swift with Cocoa and Objective-C. Even if you are not interoperating with Objective-C, you need to mark your protocols with the @objc attribute if you want to be able to check for protocol conformance.</p>

<p>Note also that @objc protocols can be adopted <code>only by classes</code>, and not by structures or enumerations. If you mark your protocol as @objc in order to check for conformance, you will be able to apply that protocol only to class types.</p>

<p>Here are two classes, Circle and Country, both of which conform to the HasArea protocol:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Circle: HasArea {
</span><span class="line">    let pi = 3.1415927
</span><span class="line">    var radius: Double
</span><span class="line">    var area: Double { return pi * radius * radius }
</span><span class="line">    init(radius: Double) { self.radius = radius }
</span><span class="line">}
</span><span class="line">class Country: HasArea {
</span><span class="line">    var area: Double
</span><span class="line">    init(area: Double) { self.area = area }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Animal Class</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Animal {
</span><span class="line">    var legs: Int
</span><span class="line">    init(legs: Int) { self.legs = legs }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let objects: AnyObject[] = [
</span><span class="line">    Circle(radius: 2.0),
</span><span class="line">    Country(area: 243_610),
</span><span class="line">    Animal(legs: 4)
</span><span class="line">]
</span><span class="line">
</span><span class="line">for object in objects {
</span><span class="line">    if let objectWithArea = object as? HasArea {
</span><span class="line">        println("Area is \(objectWithArea.area)")
</span><span class="line">    } else {
</span><span class="line">        println("Something that doesn't have an area")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">// Area is 12.5663708
</span><span class="line">// Area is 243610.0
</span><span class="line">// Something that doesn't have an area</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Optional Protocol Requirements
You can define optional requirements for protocols
Optional property requirements, and optional method requirements that return a value, will always return an optional value of the appropriate type when they are accessed or called</p>

<p>You check for an implementation of an optional requirement by writing a question mark after the name of the requirement when it is called, such as someOptionalMethod?(someArgument). </p>

<p><code>注意</code></p>

<pre><code>Optional protocol requirements can only be specified if your protocol is marked with the @objc attribute. Even if you are not interoperating with Objective-C, you need to mark your protocols with the @objc attribute if you want to specify optional requirements.
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@objc protocol CounterDataSource {
</span><span class="line">    @optional func incrementForCount(count: Int) -&gt; Int
</span><span class="line">    @optional var fixedIncrement: Int { get }
</span><span class="line">}
</span><span class="line">
</span><span class="line">@objc class Counter {
</span><span class="line">    var count = 0
</span><span class="line">    var dataSource: CounterDataSource?
</span><span class="line">    func increment() {
</span><span class="line">        if let amount = dataSource?.incrementForCount?(count) {
</span><span class="line">            count += amount
</span><span class="line">        } else if let amount = dataSource?.fixedIncrement? {
</span><span class="line">            count += amount
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">class ThreeSource: CounterDataSource {
</span><span class="line">    let fixedIncrement = 3
</span><span class="line">}
</span><span class="line">
</span><span class="line">var counter = Counter()
</span><span class="line">counter.dataSource = ThreeSource()
</span><span class="line">for _ in 1...4 {
</span><span class="line">    counter.increment()
</span><span class="line">    println(counter.count)
</span><span class="line">}
</span><span class="line">// 3
</span><span class="line">// 6
</span><span class="line">// 9
</span><span class="line">// 12
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>另一个例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class TowardsZeroSource: CounterDataSource {
</span><span class="line">    func incrementForCount(count: Int) -&gt; Int {
</span><span class="line">        if count == 0 {
</span><span class="line">            return 0
</span><span class="line">        } else if count &lt; 0 {
</span><span class="line">            return 1
</span><span class="line">        } else {
</span><span class="line">            return -1
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">counter.count = -4
</span><span class="line">counter.dataSource = TowardsZeroSource()
</span><span class="line">for _ in 1...5 {
</span><span class="line">    counter.increment()
</span><span class="line">    println(counter.count)
</span><span class="line">}
</span><span class="line">// -3
</span><span class="line">// -2
</span><span class="line">// -1
</span><span class="line">// 0
</span><span class="line">// 0</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Generics
交换两个值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func swapTwoValues&lt;T&gt;(inout a: T, inout b: T) {
</span><span class="line">    let temporaryA = a
</span><span class="line">    a = b
</span><span class="line">    b = temporaryA
</span><span class="line">}
</span><span class="line">
</span><span class="line">var someInt = 3
</span><span class="line">var anotherInt = 107
</span><span class="line">swapTwoValues(&amp;someInt, &amp;anotherInt)
</span><span class="line">// someInt is now 107, and anotherInt is now 3
</span><span class="line"> 
</span><span class="line">var someString = "hello"
</span><span class="line">var anotherString = "world"
</span><span class="line">swapTwoValues(&amp;someString, &amp;anotherString)
</span><span class="line">// someString is now "world", and anotherString is now "hello”
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code></p>

<pre><code>You can use Swift’s existing swap function rather than providing your own implementation.
</code></pre>

<h5 id="type-parameters">Type Parameters</h5>
<p>Type parameters specify and name a placeholder type, and are written immediately after the function’s name, between a pair of matching angle brackets (such as <t>).</t></p>

<p>You can provide more than one type parameter by writing multiple type parameter names within the angle brackets, separated by commas.</p>

<h5 id="naming-type-parameters">Naming Type Parameters</h5>
<p>It is traditional to use the single-character name T for the type parameter. However, you are can use any valid identifier as the type parameter name.</p>

<p><code>注意</code></p>

<pre><code>Always give type parameters UpperCamelCase names (such as T and KeyType) to indicate that they are a placeholder for a type, not a value. #####Generic Types
</code></pre>

<p>In addition to generic functions, Swift enables you to define your own generic types. These are custom classes, structures, and enumerations that can work with any type, in a similar way to Array and Dictionary.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Stack&lt;T&gt; {
</span><span class="line">    var items = T[]()
</span><span class="line">    mutating func push(item: T) {
</span><span class="line">        items.append(item)
</span><span class="line">    }
</span><span class="line">    mutating func pop() -&gt; T {
</span><span class="line">        return items.removeLast()
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var stackOfStrings = Stack&lt;String&gt;()
</span><span class="line">stackOfStrings.push("uno")
</span><span class="line">stackOfStrings.push("dos")
</span><span class="line">stackOfStrings.push("tres")
</span><span class="line">stackOfStrings.push("cuatro")
</span><span class="line">// the stack now contains 4 strings”
</span><span class="line">
</span><span class="line">let fromTheTop = stackOfStrings.pop()
</span><span class="line">// fromTheTop is equal to "cuatro", and the stack now contains 3 strings</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Type Constraints</p>

<p>It is sometimes useful to enforce certain type constraints on the types that can be used with generic functions and generic types. <code>Type constraints specify that a type parameter must inherit from a specific class, or conform to a particular protocol or protocol composition.</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func someFunction&lt;T: SomeClass, U: SomeProtocol&gt;(someT: T, someU: U) {
</span><span class="line">    // function body goes here
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Type Constraints in Action</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func findIndex&lt;T&gt;(array: T[], valueToFind: T) -&gt; Int? {
</span><span class="line">    for (index, value) in enumerate(array) {
</span><span class="line">        if value == valueToFind {
</span><span class="line">            return index
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    return nil
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>需要注意的是这个函数编译失败!问题出在以下</p>

<pre><code>if value == valueToFind Not every type in Swift can be compared with the equal to operator (==). 我们可以写成如下方式
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func findIndex&lt;T: Equatable&gt;(array: T[], valueToFind: T) -&gt; Int? {
</span><span class="line">    for (index, value) in enumerate(array) {
</span><span class="line">        if value == valueToFind {
</span><span class="line">            return index
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    return nil
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Equatable表示类型必须遵循Equatable协议,这样编译就能顺利通过了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let doubleIndex = findIndex([3.14159, 0.1, 0.25], 9.3)
</span><span class="line">// doubleIndex is an optional Int with no value, because 9.3 is not in the array
</span><span class="line">let stringIndex = findIndex(["Mike", "Malcolm", "Andrea"], "Andrea")
</span><span class="line">// stringIndex is an optional Int containing a value of 2</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Associated Types
When defining a protocol, it is sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name (or alias) to a type that is used as part of the protocol. The actual type to use for that associated type is not specified until the protocol is adopted. Associated types are specified with the typealias keyword.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">protocol Container {
</span><span class="line">    typealias ItemType
</span><span class="line">    mutating func append(item: ItemType)
</span><span class="line">    var count: Int { get }
</span><span class="line">    subscript(i: Int) -&gt; ItemType { get }
</span><span class="line">}
</span><span class="line">
</span><span class="line">struct IntStack: Container {
</span><span class="line">    // original IntStack implementation
</span><span class="line">    var items = Int[]()
</span><span class="line">    mutating func push(item: Int) {
</span><span class="line">        items.append(item)
</span><span class="line">    }
</span><span class="line">    mutating func pop() -&gt; Int {
</span><span class="line">        return items.removeLast()
</span><span class="line">    }
</span><span class="line">    // conformance to the Container protocol
</span><span class="line">    typealias ItemType = Int
</span><span class="line">    mutating func append(item: Int) {
</span><span class="line">        self.push(item)
</span><span class="line">    }
</span><span class="line">    var count: Int {
</span><span class="line">    return items.count
</span><span class="line">    }
</span><span class="line">    subscript(i: Int) -&gt; Int {
</span><span class="line">        return items[i]
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If you delete the typealias ItemType = Int line from the code above, everything still works, because it is clear what type should be used for ItemType.</p>

<p>You can also make the generic Stack type conform to the Container protocol:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Stack&lt;T&gt;: Container {
</span><span class="line">    // original Stack&lt;T&gt; implementation
</span><span class="line">    var items = T[]()
</span><span class="line">    mutating func push(item: T) {
</span><span class="line">        items.append(item)
</span><span class="line">    }
</span><span class="line">    mutating func pop() -&gt; T {
</span><span class="line">        return items.removeLast()
</span><span class="line">    }
</span><span class="line">    // conformance to the Container protocol
</span><span class="line">    mutating func append(item: T) {
</span><span class="line">        self.push(item)
</span><span class="line">    }
</span><span class="line">    var count: Int {
</span><span class="line">    return items.count
</span><span class="line">    }
</span><span class="line">    subscript(i: Int) -&gt; T {
</span><span class="line">        return items[i]
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="extending-an-existing-type-to-specify-an-associated-type">Extending an Existing Type to Specify an Associated Type</h5>
<p>Extending an Existing Type to Specify an Associated Type</p>

<p>Swift’s Array type already provides an append method, a count property, and a subscript with an Int index to retrieve its elements. These three capabilities match the requirements of the Container protocol. This means that you can extend Array to conform to the Container protocol simply by declaring that Array adopts the protocol. You do this with an empty extension</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension Array: Container {}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Array’s existing append method and subscript enable Swift to infer the appropriate type to use for ItemType, just as for the generic Stack type above. After defining this extension, you can use any Array as a Container.</p>

<h5 id="where-clauses">Where Clauses</h5>

<p>The example below defines a generic function called allItemsMatch</p>

<p>The two containers to be checked <code>do not have to be the same type of container</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func allItemsMatch&lt;
</span><span class="line">    C1: Container, C2: Container
</span><span class="line">    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable&gt;
</span><span class="line">    (someContainer: C1, anotherContainer: C2) -&gt; Bool {
</span><span class="line">        
</span><span class="line">        // check that both containers contain the same number of items
</span><span class="line">        if someContainer.count != anotherContainer.count {
</span><span class="line">            return false
</span><span class="line">        }
</span><span class="line">        
</span><span class="line">        // check each pair of items to see if they are equivalent
</span><span class="line">        for i in 0..someContainer.count {
</span><span class="line">            if someContainer[i] != anotherContainer[i] {
</span><span class="line">                return false
</span><span class="line">            }
</span><span class="line">        }
</span><span class="line">        
</span><span class="line">        // all items match, so return true
</span><span class="line">        return true
</span><span class="line">        
</span><span class="line">}
</span><span class="line">
</span><span class="line">var stackOfStrings = Stack&lt;String&gt;()
</span><span class="line">stackOfStrings.push("uno")
</span><span class="line">stackOfStrings.push("dos")
</span><span class="line">stackOfStrings.push("tres")
</span><span class="line"> 
</span><span class="line">var arrayOfStrings = ["uno", "dos", "tres"]
</span><span class="line"> 
</span><span class="line">if allItemsMatch(stackOfStrings, arrayOfStrings) {
</span><span class="line">    println("All items match.")
</span><span class="line">} else {
</span><span class="line">    println("Not all items match.")
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Advanced Operators
These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C.</p>

<p>Unlike arithmetic operators in C, arithmetic operators in Swift do not overflow by default. Overflow behavior is trapped and reported as an error</p>

<p>To opt in to overflow behavior, use Swift’s second set of arithmetic operators that overflow by default, such as the overflow addition operator (&amp;+). All of these overflow operators begin with an ampersand (&amp;).</p>

<p>When you define your own structures, classes, and enumerations, it can be useful to provide your own implementations of the standard Swift operators for these custom types. Swift makes it easy to provide tailored implementations of these operators and to determine exactly what their behavior should be for each type you create</p>

<p>You’re not just limited to the predefined operators. Swift gives you the freedom to define your own custom infix, prefix, postfix, and assignment operators, with custom precedence and associativity values. These operators can be used and adopted in your code just like any of the predefined operators, and you can even extend existing types to support the custom operators you define.</p>

<h5 id="bitwise-operators">Bitwise Operators</h5>

<ul>
  <li>Bitwise NOT Operator</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let initialBits: UInt8 = 0b00001111
</span><span class="line">let invertedBits = ~initialBits  // equals 11110000</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Bitwise AND Operator</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let firstSixBits: UInt8 = 0b11111100
</span><span class="line">let lastSixBits: UInt8  = 0b00111111
</span><span class="line">let middleFourBits = firstSixBits &amp; lastSixBits  // equals 00111100</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Bitwise OR Operator</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let someBits: UInt8 = 0b10110010
</span><span class="line">let moreBits: UInt8 = 0b01011110
</span><span class="line">let combinedbits = someBits | moreBits  // equals 11111110</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Bitwise XOR Operator</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">“let firstBits: UInt8 = 0b00010100
</span><span class="line">let otherBits: UInt8 = 0b00000101
</span><span class="line">let outputBits = firstBits ^ otherBits  // equals 00010001</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Bitwise Left and Right Shift Operators
    <ul>
      <li>Shifting Behavior for Unsigned Integers</li>
      <li>Any bits that are moved beyond the bounds of the integer’s storage are discarded.</li>
      <li>Zeroes are inserted in the spaces left behind after the original bits are moved to the left or right.</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let shiftBits: UInt8 = 4   // 00000100 in binary
</span><span class="line">shiftBits &lt;&lt; 1             // 00001000
</span><span class="line">shiftBits &lt;&lt; 2             // 00010000
</span><span class="line">shiftBits &lt;&lt; 5             // 10000000
</span><span class="line">shiftBits &lt;&lt; 6             // 00000000
</span><span class="line">shiftBits &gt;&gt; 2             // 00000001</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can use bit shifting to encode and decode values within other data types:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let pink: UInt32 = 0xCC6699
</span><span class="line">let redComponent = (pink &amp; 0xFF0000) &gt;&gt; 16    // redComponent is 0xCC, or 204
</span><span class="line">let greenComponent = (pink &amp; 0x00FF00) &gt;&gt; 8   // greenComponent is 0x66, or 102
</span><span class="line">let blueComponent = pink &amp; 0x0000FF           // blueComponent is 0x99, or 153</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Shifting Behavior for Signed Integers</p>

<ul>
  <li>When you shift signed integers to the right, apply the same rules as for unsigned integers, but fill any empty bits on the left with the sign bit, rather than with a zero.
##### Overflow Operators</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var willOverflow = UInt8.max
</span><span class="line">// willOverflow equals 255, which is the largest value a UInt8 can hold
</span><span class="line">willOverflow = willOverflow &amp;+ 1
</span><span class="line">// willOverflow is now equal to 0</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Value Underflow</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var willUnderflow = UInt8.min
</span><span class="line">// willUnderflow equals 0, which is the smallest value a UInt8 can hold
</span><span class="line">willUnderflow = willUnderflow &amp;- 1
</span><span class="line">// willUnderflow is now equal to 255</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="division-by-zero">Division by Zero</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let x = 1
</span><span class="line">let y = x &amp;/ 0
</span><span class="line">// y is equal to 0</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="operator-functions">Operator Functions</h5>

<p>Classes and structures can provide their own implementations of existing operators. This is known as <code>overloading</code> the existing operators.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Vector2D {
</span><span class="line">    var x = 0.0, y = 0.0
</span><span class="line">}
</span><span class="line">@infix func + (left: Vector2D, right: Vector2D) -&gt; Vector2D {
</span><span class="line">    return Vector2D(x: left.x + right.x, y: left.y + right.y)
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The example above shows how to implement the arithmetic addition operator (+) for a custom structure. The arithmetic addition operator is a binary operator because it operates on two targets and is said to be <code>infix</code> because it appears in between those two targets.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let vector = Vector2D(x: 3.0, y: 1.0)
</span><span class="line">let anotherVector = Vector2D(x: 2.0, y: 4.0)
</span><span class="line">let combinedVector = vector + anotherVector
</span><span class="line">// combinedVector is a Vector2D instance with values of (5.0, 5.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Prefix and Postfix Operators</p>

<p>Classes and structures can also provide implementations of the standard unary operators.You implement a prefix or postfix unary operator by writing the @prefix or @postfix attribute before the func keyword when declaring the operator function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@prefix func - (vector: Vector2D) -&gt; Vector2D {
</span><span class="line">    return Vector2D(x: -vector.x, y: -vector.y)
</span><span class="line">}
</span><span class="line">
</span><span class="line">let positive = Vector2D(x: 3.0, y: 4.0)
</span><span class="line">let negative = -positive
</span><span class="line">// negative is a Vector2D instance with values of (-3.0, -4.0)
</span><span class="line">let alsoPositive = -negative
</span><span class="line">// alsoPositive is a Vector2D instance with values of (3.0, 4.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Compound Assignment Operators</p>

<p>You must  mark a compound assignment operator’s left input parameter as <code>inout</code>, because the parameter’s value will be modified directly from within the operator function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@assignment func += (inout left: Vector2D, right: Vector2D) {
</span><span class="line">    left = left + right
</span><span class="line">}
</span><span class="line">
</span><span class="line">var original = Vector2D(x: 1.0, y: 2.0)
</span><span class="line">let vectorToAdd = Vector2D(x: 3.0, y: 4.0)
</span><span class="line">original += vectorToAdd
</span><span class="line">// original now has values of (4.0, 6.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can combine the @assignment attribute with either the @prefix or @postfix attribute, as in this implementation of the prefix increment operator (++a) for Vector2D instances:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@prefix @assignment func ++ (inout vector: Vector2D) -&gt; Vector2D {
</span><span class="line">    vector += Vector2D(x: 1.0, y: 1.0)
</span><span class="line">    return vector
</span><span class="line">}
</span><span class="line">
</span><span class="line">var toIncrement = Vector2D(x: 3.0, y: 4.0)
</span><span class="line">let afterIncrement = ++toIncrement
</span><span class="line">// toIncrement now has values of (4.0, 5.0)
</span><span class="line">// afterIncrement also has values of (4.0, 5.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>注意</code></p>

<pre><code>It is not possible to overload the default assignment operator (=). Only the compound assignment operators can be overloaded. Similarly, the ternary conditional operator (a ? b : c) cannot be overloaded. #####Equivalence Operators
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@infix func == (left: Vector2D, right: Vector2D) -&gt; Bool {
</span><span class="line">    return (left.x == right.x) &amp;&amp; (left.y == right.y)
</span><span class="line">}
</span><span class="line">@infix func != (left: Vector2D, right: Vector2D) -&gt; Bool {
</span><span class="line">    return !(left == right)
</span><span class="line">}
</span><span class="line">
</span><span class="line">let twoThree = Vector2D(x: 2.0, y: 3.0)
</span><span class="line">let anotherTwoThree = Vector2D(x: 2.0, y: 3.0)
</span><span class="line">if twoThree == anotherTwoThree {
</span><span class="line">    println("These two vectors are equivalent.")
</span><span class="line">}
</span><span class="line">// prints "These two vectors are equivalent.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Custom Operators
New operators are declared at a global level using the operator keyword, and can 
be declared as prefix, infix or postfix:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">operator prefix +++ {}
</span><span class="line">
</span><span class="line">@prefix @assignment func +++ (inout vector: Vector2D) -&gt; Vector2D {
</span><span class="line">    vector += vector
</span><span class="line">    return vector
</span><span class="line">}
</span><span class="line">
</span><span class="line">var toBeDoubled = Vector2D(x: 1.0, y: 4.0)
</span><span class="line">let afterDoubling = +++toBeDoubled
</span><span class="line">// toBeDoubled now has values of (2.0, 8.0)
</span><span class="line">// afterDoubling also has values of (2.0, 8.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Precedence and Associativity for Custom Infix Operators
Custom infix operators can also specify a precedence and an associativity. 
The possible values for associativity are left, right, and none.</p>

<p>The possible values for associativity are left, right, and none. Left-associative operators associate to the left if written next to other left-associative operators of the same precedence. Similarly, right-associative operators associate to the right if written next to other right-associative operators of the same precedence. Non-associative operators cannot be written next to other operators with the same precedence.</p>

<p>The associativity value defaults to none if it is not specified. The precedence value defaults to 100 if it is not specified.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">operator infix +- { associativity left precedence 140 }
</span><span class="line">func +- (left: Vector2D, right: Vector2D) -&gt; Vector2D {
</span><span class="line">    return Vector2D(x: left.x + right.x, y: left.y - right.y)
</span><span class="line">}
</span><span class="line">let firstVector = Vector2D(x: 1.0, y: 2.0)
</span><span class="line">let secondVector = Vector2D(x: 3.0, y: 4.0)
</span><span class="line">let plusMinusVector = firstVector +- secondVector
</span><span class="line">// plusMinusVector is a Vector2D instance with values of (4.0, -2.0)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####总结
#####Type Identifier</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var someValue: ExampleModule.MyType</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Tuple Type</p>

<p>Void is a typealias for the the empty tuple type, ()</p>

<h5 id="function-type">Function Type</h5>

<p>You can apply the auto_closure attribute to a function type that has a parameter type of () and that returns the type of an expression (see Type Attributes). An autoclosure function captures an <code>implicit closure over the specified expression</code>, instead of the expression itself. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func simpleAssert(condition: @auto_closure () -&gt; Bool, message: String) {
</span><span class="line">    if !condition() {
</span><span class="line">        println(message)
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let testNumber = 5
</span><span class="line">simpleAssert(testNumber % 2 == 0, "testNumber isn't an even number.")
</span><span class="line">// prints "testNumber isn't an even number.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can’t mark a variadic parameter or a return type with the inout keyword.</p>

<p>The type of a curried function is equivalent to a nested function type. For example, the type of the curried function addTwoNumbers()() below is Int -&gt; Int -&gt; Int:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func addTwoNumbers(a: Int)(b: Int) -&gt; Int {
</span><span class="line">    return a + b
</span><span class="line">}
</span><span class="line">addTwoNumbers(4)(5) // Returns 9</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The function types of a curried function are grouped from right to left. For instance, the function type Int -&gt; Int -&gt; Int is understood as Int -&gt; (Int -&gt; Int)—that is, a function that takes an Int and returns another function that takes and return an Int</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func addTwoNumbers(a: Int) -&gt; (Int -&gt; Int) {
</span><span class="line">    func addTheSecondNumber(b: Int) -&gt; Int {
</span><span class="line">        return a + b
</span><span class="line">    }
</span><span class="line">    return addTheSecondNumber
</span><span class="line">}
</span><span class="line">addTwoNumbers(4)(5) // Returns 9</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="array">Array</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let someArray: String[] = ["Alex", "Brian", "Dave"]
</span><span class="line">let someArray: Array&lt;String&gt; = ["Alex", "Brian", "Dave"]
</span><span class="line">
</span><span class="line">var array3D: Int[][][] = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Optional Type</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var optionalInteger: Int?
</span><span class="line">var optionalInteger: Optional&lt;Int&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>When declaring an optional type, be sure to use parentheses to properly scope the ? operator. As an example, to declare an optional array of integers, write the type annotation as (Int[])?; writing Int[]? produces an error.</p>

<h5 id="implicitly-unwrapped-optional-type">Implicitly Unwrapped Optional Type</h5>

<p>if you try to use an implicitly unwrapped optional that has a value of nil, you’ll get a runtime error.</p>

<h5 id="metatype-type">Metatype Type</h5>

<p>A metatype type refers to the type of any type, including class types, structure types, enumeration types, and protocol types.</p>

<p>The metatype of a class, structure, or enumeration type is the name of that type followed by .Type. The metatype of a protocol type—not the concrete type that conforms to the protocol at runtime—is the name of that protocol followed by .Protocol. For example, the metatype of the class type SomeClass is SomeClass.Type and the metatype of the protocol SomeProtocol is SomeProtocol.Protocol.</p>

<p>You can use the postfix self expression to access a type as a value. For example, SomeClass.self returns SomeClass itself, not an instance of SomeClass. And SomeProtocol.self returns SomeProtocol itself, not an instance of a type that conforms to SomeProtocol at runtime. You can use a dynamicType expression with an instance of a type to access that instance’s runtime type as a value</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class SomeBaseClass {
</span><span class="line">    class func printClassName() {
</span><span class="line">        println("SomeBaseClass")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">class SomeSubClass: SomeBaseClass {
</span><span class="line">    override class func printClassName() {
</span><span class="line">        println("SomeSubClass")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">let someInstance: SomeBaseClass = SomeSubClass()
</span><span class="line">// someInstance is of type SomeBaseClass at compile time, but
</span><span class="line">// someInstance is of type SomeSubClass at runtime
</span><span class="line">someInstance.dynamicType.printClassName()
</span><span class="line">// prints "SomeSubClass"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Type Inheritance Clause
When defining a class, the name of the superclass must appear first in the list of type identifiers, followed by any number of protocols the class must conform to.</p>

<h5 id="assignment-operator">Assignment Operator</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(a, _, (b, c)) = ("test", 9.45, (12, 3))</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Self Expression</p>

<p>In a mutating method of value type, you can assign a new instance of that value type to self.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct Point {
</span><span class="line">    var x = 0.0, y = 0.0
</span><span class="line">    mutating func moveByX(deltaX: Double, y deltaY: Double) {
</span><span class="line">        self = Point(x: x + deltaX, y: y + deltaY)
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Closure Expression</p>

<p>A closure expression can explicitly specify the values that it captures from the surrounding scope using a capture list. A capture list is written as a comma separated list surrounded by square brackets, before the list of parameters</p>

<p>Each entry in the capture list can be marked as weak or unowned to capture a weak or unowned reference to the value.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">myFunction { print(self.title) }                    // strong capture
</span><span class="line">myFunction { [weak self] in print(self!.title) }    // weak capture
</span><span class="line">myFunction { [unowned self] in print(self.title) }  // unowned capture</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can also bind arbitrary expression to named values in the capture list. The expression is evaluated when the closure is formed, and captured with the specified strength</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Weak capture of "self.parent" as "parent"
</span><span class="line">myFunction { [weak parent = self.parent] in print(parent!.title) }</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="initializer-expression">Initializer Expression</h5>

<p>Unlike functions, an initializer can’t be used as a value. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var x = SomeClass.someClassFunction // ok
</span><span class="line">var y = SomeClass.init              // error</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You also use an initializer expression to delegate to the initializer of a superclass.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class SomeSubClass: SomeSuperClass {
</span><span class="line">    init() {
</span><span class="line">        // subclass initialization goes here
</span><span class="line">        super.init()
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="explicit-member-expression">Explicit Member Expression</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var t = (10, 20, 30)
</span><span class="line">t.0 = t.1
</span><span class="line">// Now t is (20, 20, 30)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>A <code>fallthrough</code> statement can appear anywhere inside a switch statement, not just as the last statement of a case block, but it can’t be used in the final case block.</p>

<h5 id="parameter-names">Parameter Names</h5>

<p>以下三种方式等价</p>

<ul>
  <li>external parameter name local parameter name: parameter type</li>
  <li><code>#parameter name: parameter type</code></li>
  <li>_ local parameter name: parameter type</li>
</ul>

<p>An underscore (_) before a local parameter name gives that parameter no name to be used in function calls. The corresponding argument must have no name in function or method calls.</p>

<h5 id="enumerations-with-raw-cases-values">Enumerations with Raw Cases Values</h5>

<p>Each case must have a unique name and be assigned a unique raw value. If the raw value type is specified as Int and you don’t assign a value to the cases explicitly, they are implicitly assigned the values 0, 1, 2, and so on. Each unassigned case of type Int is implicitly assigned a raw value that is automatically incremented from the raw value of the previous case.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum ExampleEnum: Int {
</span><span class="line">    case A, B, C = 5, D
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Class Declaration</p>

<p>When you declare either kind of initializer, you can require any subclass to override it by marking the initializer with the <code>required</code> attribute. </p>

<p>If the current class overrides all of the superclass’s designated initializers, it inherits the superclass’s convenience initializers.</p>

<h5 id="protocol-declaration">Protocol Declaration</h5>

<p>To restrict the adoption of a protocol to class types only, mark the entire protocol declaration with the <code>class_protocol</code> attribute</p>

<p><code>注意</code></p>

<p>If a protocol is already marked with the objc attribute, the class_protocol attribute is implicitly applied to that protocol; there’s no need to mark the protocol with the class_protocol attribute explicitly</p>

<h5 id="protocol-property-declaration">Protocol Property Declaration</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var property name: type { get set }</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>That property declaration can’t be implemented as a constant property or a read-only computed property</p>

<p>Protocol method declarations have the same form as function declarations, with two exceptions: They don’t include a function body, and you can’t provide any default parameter values as part of the function declaration</p>

<p>If you’re implementing the method in an extension, use the class keyword if you’re extending a class and the static keyword if you’re extending a structure.</p>

<h5 id="initializer-declaration">Initializer Declaration</h5>

<p>Designated initializers can be declared in the context of a class declaration only and therefore can’t be added to a class using an extension declaration.</p>

<h5 id="extension-declaration">Extension Declaration</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extension type: adopted protocols {
</span><span class="line">    declarations
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Extension declarations can’t contain destructor or protocol declarations, store properties, property observers, or other extension declarations. </p>

<p>Properties, methods, and initializers of an existing type can’t be overridden in an extension of that type.</p>

<h5 id="subscript-declaration">Subscript Declaration</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">subscript (parameters) -&gt; return type {
</span><span class="line">    get {
</span><span class="line">        statements
</span><span class="line">    }
</span><span class="line">    set(setter name) {
</span><span class="line">        statements
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="operator-declaration">Operator Declaration</h5>

<p>You can declare operators of three different fixities: infix, prefix, and postfix. 
The fixity of an operator specifies the relative position of an operator to its operands.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">operator infix operatorName {
</span><span class="line">    precedence precedence level
</span><span class="line">    associativity associativity
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The precedence level can be any whole number (decimal integer) from 0 to 255; unlike decimal integer literals, it <code>can’t contain any underscore characters</code>.</p>

<p>Infix operators that are declared without specifying a precedence or associativity are initialized with a precedence level of 100 and an associativity of none.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">operator prefix operatorName {}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Attributes</p>

<p>Attributes provide more information about a declaration or type. There are two kinds of attributes in Swift, those that apply to <code>declarations</code> and those that apply to <code>types</code>,For instance, the <code>required</code> attribute—when applied to a designated or convenience initializer declaration of a class—indicates that every subclass <code>must</code> implement that initializer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@attributeName
</span><span class="line">@attributeName(attribute arguments)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#####Declaration Attributes</p>

<p>You can apply a declaration attribute to declarations only. However, you can also apply the <code>noreturn</code> attribute to a function or method type.</p>

<ul>
  <li>
    <p>class_protocol</p>

    <pre><code>  Apply this attribute to a protocol to indicate that the protocol can be adopted by class types only.If you apply the objc attribute to a protocol, the class_protocol attribute is implicitly applied to that protocol; there’s no need to mark the protocol with the class_protocol attribute explicitly.
</code></pre>
  </li>
  <li>
    <p>exported</p>

    <pre><code>  Apply this attribute to an import declaration to export the imported module, submodule, or declaration from the current module. If another module imports the current module, that other module can access the items exported by the current module.
</code></pre>
  </li>
  <li>
    <p>noreturn</p>

    <p>Apply this attribute to a function or method declaration to indicate that the corresponding type of that function or method, T, is @noreturn T. You can mark a function or method type with this attribute to indicate that the function or method <code>doesn’t return to its caller</code>.</p>

    <p>You can override a function or method that is not marked with the noreturn attribute with a function or method that is. That said, you can’t override a function or method that is marked with the noreturn attribute with a function or method that is not. Similar rules apply when you implement a protocol method in a conforming type.</p>
  </li>
  <li>
    <p>NSManaged</p>

    <p>Apply this attribute to a stored variable property of a class that inherits from NSManagedObject to indicate that the storage and implementation of the property are provided dynamically by Core Data at runtime based on the associated entity description.</p>
  </li>
  <li>
    <p>objc</p>
  </li>
</ul>

<p>Apply this attribute to any declaration that can be represented in Objective-C—for example, non-nested classes, protocols, properties and methods (including getters and setters) of classes and protocols, initializers, deinitializers, and subscripts. <code>The objc attribute tells the compiler that a declaration is available to use in Objective-C code.</code></p>

<p>If you apply the objc attribute to a class or protocol, it’s implicitly applied to the members of that class or protocol. The compiler also implicitly adds the objc attribute to a class that inherits from another class marked with the objc attribute. <code>Protocols marked with the objc attribute can’t inherit from protocols that aren’t.</code></p>

<p>The objc attribute optionally accepts a single attribute argument, which consists of an identifier. Use this attribute when you want to expose a different name to Objective-C for the entity the objc attribute applies to.You can use this argument to name classes, protocols, methods, getters, setters, and initializers. The example below exposes the getter for the enabled property of the ExampleClass to Objective-C code as isEnabled rather than just as the name of the property itself.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@objc
</span><span class="line">class ExampleClass {
</span><span class="line">    var enabled: Bool {
</span><span class="line">    @objc(isEnabled) get {
</span><span class="line">        // Return the appropriate value
</span><span class="line">    }
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>
    <p>optional</p>

    <p>You can apply the <code>optional</code> attribute only to protocols that are marked with the objc attribute. As a result, only class types can adopt and conform to a protocol that contains optional member requirements. </p>
  </li>
  <li>
    <p>required</p>
  </li>
</ul>

<p>Apply this attribute to a designated or convenience initializer of a class to indicate that every subclass must implement that initializer.</p>

<p><code>Required designated initializers must be implemented explicitly</code>
<code>Required convenience initializers</code> can be either implemented explicitly or inherited when the subclass directly implements all of the superclass’s designated initializers (or when the subclass overrides the designated initializers with convenience initializers).
#####Declaration Attributes Used by Interface Builder</p>

<p>Interface Builder attributes are declaration attributes used by Interface Builder to synchronize with Xcode. Swift provides the following Interface Builder attributes: <code>IBAction, IBDesignable, IBInspectable, and IBOutlet</code>. These attributes are conceptually the same as their Objective-C counterparts.</p>

<p>You apply the <code>IBOutlet</code> and <code>IBInspectable</code> attributes to property declarations of a class,You apply the IBAction attribute to method declarations of a class and the IBDesignable attribute to class</p>

<h5 id="type-attributes">Type Attributes</h5>
<p>You can apply type attributes to types only.However, you can also apply the <code>noreturn</code> attribute to a function or method declaration.</p>

<ul>
  <li>
    <p>auto_closure</p>

    <p>This attribute is used to delay the evaluation of an expression by automatically wrapping that expression in a closure with no arguments. Apply this attribute to a function or method type that takes no arguments and that returns the type of the expression.</p>
  </li>
  <li>noreturn
####Patterns</li>
  <li>
    <p>Wildcard Pattern</p>

    <p>A wildcard pattern matches and ignores any value and consists of an underscore (_).</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for _ in 1...3 {
</span><span class="line">    // Do something three times.
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>
    <p>Identifier Pattern
An identifier pattern matches any value and binds the matched value to a variable or constant name.</p>
  </li>
  <li>
    <p>Value-Binding Pattern</p>

    <p>A value-binding pattern binds matched values to variable or constant names. Value-binding patterns that bind a matched value to the name of a constant begin with the keyword let; those that bind to the name of variable begin with the keyword var.
  Identifiers patterns within a value-binding pattern bind new named variables or constants to their matching values</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let point = (3, 2)
</span><span class="line">switch point {
</span><span class="line">    // Bind x and y to the elements of point.
</span><span class="line">case let (x, y):
</span><span class="line">    println("The point is at (\(x), \(y)).")
</span><span class="line">}
</span><span class="line">// prints "The point is at (3, 2).</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can constrain a tuple pattern to match certain kinds of tuple types by using type annotations</p>

<ul>
  <li>
    <p>Tuple Pattern</p>

    <p>When a tuple pattern is used as the pattern in a for-in statement or in a variable or constant declaration, it can contain only wildcard patterns, identifier patterns, or other tuple patterns that contain those. For example, the following code <code>isn’t valid</code> because the element 0 in the tuple pattern (x, 0) is an <code>expression pattern</code>:</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let points = [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1)]
</span><span class="line">// This code isn't valid.
</span><span class="line">for (x, 0) in points {
</span><span class="line">    /* ... */
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Type-Casting Patterns
There are two <code>type-casting</code> patterns, the is pattern and the as pattern. Both type-casting patterns appear only in switch statement case labels. The is and as patterns have the following form:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">is type
</span><span class="line">pattern as type</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The is pattern matches a value if the type of that value at runtime is the same as the type specified in the right-hand side of the is pattern—or a subclass of that type. <code>The is pattern behaves like the is operator</code> in that they both perform a type cast but discard the returned type.</p>

<ul>
  <li>
    <p>Expression Pattern</p>

    <p>An expression pattern represents the value of an expression. Expression patterns appear <code>only in switch</code> statement case labels.</p>

    <p>The expression represented by the expression pattern is compared with the value of an input expression using the Swift standard library ~= operator,By default, the ~= operator compares two values of the same type using the == operator. It can also match an integer value with a range of integers in an Range object, as the following example shows:</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let point = (1, 2)
</span><span class="line">switch point {
</span><span class="line">case (0, 0):
</span><span class="line">    println("(0, 0) is at the origin.")
</span><span class="line">case (-2...2, -2...2):
</span><span class="line">    println("(\(point.0), \(point.1)) is near the origin.")
</span><span class="line">default:
</span><span class="line">    println("The point is at (\(point.0), \(point.1)).")
</span><span class="line">}
</span><span class="line">// prints "(1, 2) is near the origin.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>You can overload the ~= operator to provide custom expression matching behavior. For example, you can rewrite the above example to compare the point expression with a string representations of points.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Overload the ~= operator to match a string with an integer
</span><span class="line">func ~=(pattern: String, value: Int) -&gt; Bool {
</span><span class="line">    return pattern == "\(value)"
</span><span class="line">}
</span><span class="line">switch point {
</span><span class="line">case ("0", "0"):
</span><span class="line">    println("(0, 0) is at the origin.")
</span><span class="line">case ("-2...2", "-2...2"):
</span><span class="line">    println("(\(point.0), \(point.1)) is near the origin.")
</span><span class="line">default:
</span><span class="line">    println("The point is at (\(point.0), \(point.1)).")
</span><span class="line">}
</span><span class="line">// prints "(1, 2) is near the origin.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>####Generic Parameters and Arguments
#####Generic Parameter Clause</p>

<ul>
  <li><code>&lt;generic parameter list&gt;</code></li>
  <li><code>&lt;generic parameter list where requirements&gt;</code></li>
</ul>

<p>The <code>generic parameter list</code> is a comma-separated list of generic parameters, each of which has the following form:</p>

<p><code>type parameter: constraint</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func simpleMin&lt;T: Comparable&gt;(x: T, y: T) -&gt; T {
</span><span class="line">    if x &lt; y {
</span><span class="line">        return y
</span><span class="line">    }
</span><span class="line">    return x
</span><span class="line">}
</span><span class="line">
</span><span class="line">simpleMin(17, 42) // T is inferred to be Int
</span><span class="line">simpleMin(3.14159, 2.71828) // T is inferred to be Double</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>
    <p>Where Clauses</p>

    <p>You can specify additional requirements on type parameters and their associated types by including a where clause after the generic parameter list. A where clause consists of the keyword where, followed by a comma-separated list of one or more requirements.</p>

    <p>The requirements in a where clause specify that a type parameter inherits from a class or conforms to a protocol or protocol composition.</p>
  </li>
</ul>

 	you can express the constraints that a generic type T inherits from a class C and conforms to a protocol P as &lt;T where T: C, T: P&gt;.

<pre><code>As mentioned above, you can constrain the associated types of type parameters to conform to protocols. For example, the generic parameter clause &lt;T: Generator where T.Element: Equatable&gt; specifies that T conforms to the Generator protocol and the associated type of T, T.Element, conforms to the Equatable protocol (T has the associated type Element because Generator declares Element and T conforms to Generator).

You can also specify the requirement that two types be identical, using the == operator. For example, the generic parameter clause &lt;T: Generator, U: Generator where T.Element == U.Element&gt; expresses the constraints that T and U conform to the Generator protocol and that their associated types must be identical.

You can subclass a generic class, but the subclass must also be a generic class.
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whats new in xcode6]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/08/03/whats-new-in-xcode6/"/>
    <updated>2014-08-03T15:35:28+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/08/03/whats-new-in-xcode6</id>
    <content type="html"><![CDATA[<p>Storyboard中能实时看到Custom Fonts</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/8/customfont.png" /></p>

<p>swift如需使用不在某文件中定义的类，不需要import,会自动import，不过，你依然需要为你信赖的framework import modules,
创建.swift文件时，默认创建了.h头文件，所以如果在.m文件中引用swift文件中的类，可以用import .swift对应的头文件来引用
在ios8中，可以@import第三方的framework了!
#####在IB中动态改变显示效果，如动态改变圆角
注意以下几个方法的使用
<code>class</code>前写@IBDesignable,属性前写@IBInspectable,还有override以下方法</p>

<p>@override func prepareForInterfaceBuilder(){}</p>

<p>UIView的这个方法可以实现live-rendering,注意要与@IBDesignable配合使用，如果要使用UIImage,则需用以下方式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">        let bundle = NSBundle(forClass: self.dynamicType)
</span><span class="line">        self.image = UIImage(named: "sex_girl1", inBundle: bundle, 			compatibleWithTraitCollection: self.traitCollection)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>UIImage(named:)无效!</p>

<p>*Quicklook Preview</p>

<p>Model实现debugQuickLookObject即可</p>

<p>*Size Class
Size classes have vertical and horizontal dimensions called “regular” and “compact”. The iPad in both portrait and landscape defaults to the regular size class in both horizontal and vertical directions. The iPhone in portrait defaults to compact size class for horizontal and regular size class for vertical. The iPhone in landscape defaults to compact size class for both horizontal and vertical.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fibers Threads Processes]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/07/30/fibers-threads-processes/"/>
    <updated>2014-07-30T15:42:25+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/07/30/fibers-threads-processes</id>
    <content type="html"><![CDATA[<p>Ruby gives you two basic ways to organize your program so that you can run different parts of it apparently “at the same time.” Fibers let you suspend execution of one part of your program and run some other part. For more decoupled execution, you can split up cooper- ating tasks within the program, using multiple threads, or you can split up tasks between different programs, using multiple processes. Let’s look at each in turn.</p>

<h4 id="fibers">Fibers</h4>

<p>Ruby 1.9引入了fibers的概念,尽管名字意味着某种轻量级的线程，实际上，fibers仅仅是一种非常简单的coroutine机制，它能让你写一些看起来用了线程的程序，实际上没有引发任何线程中内在的复杂机制</p>

<p>计算一个文件中单词的出现次数，不用fibers版本</p>

<pre><code>counts = Hash.new(0) 

File.foreach("testfile") do |line|

	line.scan(/\w+/) do |word| 

	word = word.downcase 

	counts[word] += 1

	end 

end

counts.keys.sort.each {|k| print "#{k}:#{counts[k]} "} 

produces:

and:1 is:3 line:3 on:1 one:1 so:1 this:3 three:1 two:1
</code></pre>

<p>这段代码非常的ugly,它混合了查找word和计算word两种逻辑,来看看用Fiber的方法</p>

<pre><code>words = Fiber.new do 

	File.foreach("testfile") do |line|
		line.scan(/\w+/) do |word| 

		Fiber.yield word.downcase

		end 

	end
	nil
￼end

counts = Hash.new(0)

while word = words.resume 

	counts[word] += 1

end

counts.keys.sort.each {|k| print "#{k}:#{counts[k]} "} 

produces:

and:1 is:3 line:3 on:1 one:1 so:1 this:3 three:1 two:1
</code></pre>

<p>再来看一个demo</p>

<pre><code>twos = Fiber.new do 

	num = 2
	loop do
		Fiber.yield(num) unless num % 3 == 0 

		num += 2

		end 

	end
10.times { print twos.resume, " " } 

produces:

2 4 8 10 14 16 20 22 26 28
</code></pre>

<p>以上也可以用之前提到的lazy Enumberators中实现
由于fibers也是对象，你可以将它们存储在变量中，并且fibers只能在创建它们的线程中resume
fibers can yield control only back to the code that resumed them,不过Ruby提供了两种标准库来拓展这种行为fiber库和continuation库</p>

<h4 id="section">多线程</h4>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Input and Output]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/07/30/basic-input-and-output/"/>
    <updated>2014-07-30T14:27:07+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/07/30/basic-input-and-output</id>
    <content type="html"><![CDATA[<p>两个I/O routines
第一个是基本的交互界面</p>

<pre><code>print "Enter your name: " 

name = gets
</code></pre>

<p>一系列I/O相关的方法在Kernel module里实现gets, open, print, printf, putc, puts, readline, readlines, 和 test,这些方法通常都与标准输入，标准输出有关</p>

<p>第二个则是与IO对象交互</p>

<p>IO类，有两个子类File和BasicSocket</p>

<h5 id="section">开头文件</h5>

<pre><code>file = File.new("testfile", "r") 

# ... process the file 

file.close
</code></pre>

<p>File与Block</p>

<pre><code>File.open("testfile", "r") do |file| 

	# ... process the file

end # &lt;- file automatically closed here
</code></pre>

<p>与exception结合</p>

<pre><code>class File

	def File.open(*args)

		result = f = File.new(*args) 

		if block_given?

			begin

				result = yield f

			ensure

				f.close

			end 

		end

		result

		end 

end
</code></pre>

<h5 id="section-1">读写文件</h5>
<p>来看一段copy.rb代码</p>

<pre><code>while line = gets 

	puts line

end
</code></pre>

<p>如果运行程序木有命令行参数，则与console交互</p>

<pre><code>$ ruby copy.rb 

These are lines 

These are lines 

that I am typing 

that I am typing 

^D 如果带文件名，则与文件交互

$ ruby copy.rb testfile 

This is line one

This is line two

This is line three

And so on...
</code></pre>

<p>我们可以用File类来读写文件</p>

<pre><code>File.open("testfile") do |file| 

	while line = file.gets
		puts line
	end 

end


produces:

This is line one

This is line two

This is line three

And so on...
</code></pre>

<h5 id="iterators-for-reading">Iterators for Reading</h5>

<p>你可以用各种iterators与IO流交互</p>

<p>O#each_byte invokes a block with the next 8-bit byte from the IO object,chr则将integer转化为ASCII字符</p>

<pre><code>File.open("testfile") do |file| 

	file.each_byte.with_index do |ch, index|

		print "#{ch.chr}:#{ch} "

		break if index &gt; 10 

	end

end

produces:

T:84 h:104 i:105 s:115  :32 i:105 s:115  :32 l:108 i:105 n:110 e:101
</code></pre>

<p>IO#each_line</p>

<pre><code>File.open("testfile") do |file|

	file.each_line {|line| puts "Got #{line.dump}" }

end

produces:

Got "This is line one\n"

Got "This is line two\n"

Got "This is line three\n"

Got "And so on...\n"
</code></pre>

<p>你也可以将一串字符传给each_line来作为一个line separator,默认是\n</p>

<pre><code>File.open("testfile") do |file|

	file.each_line("e") {|line| puts "Got #{ line.dump }" }

end

produces:

Got "This is line"

Got " one"

Got "\nThis is line"

Got " two\nThis is line"

Got " thre"

Got "e"

Got "\nAnd so on...\n"
</code></pre>

<p>combine iterator和autoclosing block,我们得到了IO.foreach,这个方法打开文件，调用iterator一次一行，然后自动关闭文件</p>

<pre><code>IO.foreach("testfile") {|line| puts line }
</code></pre>

<p>将整个文件文件的内容保存在一个string或每行保存在一个数组里</p>

<pre><code>//保存在string中

# read into string

str = IO.read("testfile")

str.length # =&gt; 66

str[0, 30] # =&gt; "This is line one\nThis is line "


//保存在array中

# read into an array
arr = IO.readlines("testfile") 

arr.length # =&gt; 4

arr[0] # =&gt; "This is line one\n"
</code></pre>

<h4 id="section-2">写入文件</h4>

<pre><code># Note the "w", which opens the file for writing

File.open("output.txt", "w") do |file| 

file.puts "Hello"

file.puts "1 + 2 = #{1+2}"

end

# Now read the file in and print its contents to STDOUT

puts File.read("output.txt")

produces:

Hello 1+2=3
</code></pre>

<p>如果将二进制数据转为string,有以下三种方法</p>

<pre><code>str1 = "\001\002\003" # =&gt; "\u0001\u0002\u0003" 

str2 = ""

str2 &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 # =&gt; "\u0001\u0002\u0003" 

[ 1, 2, 3 ].pack("c*") # =&gt; "\x01\x02\x03"
</code></pre>

<p>你也可以用«将对象添加到输出流中</p>

<pre><code>endl = "\n"

STDOUT &lt;&lt; 99 &lt;&lt; " red balloons" &lt;&lt; endl

produces:

99 red balloons	
</code></pre>

<p>«方法在打印前将用to_s将它的参数转为string
#####Doing I/O with Strings
StringIO对象，它们操作起来就像I/O对象，但它们只是读写strings，而不是files</p>

<pre><code>require 'stringio'

ip = StringIO.new("now is\nthe time\nto learn\nRuby!")

op = StringIO.new("", "w")

ip.each_line do |line| 

	op.puts line.reverse

end

op.string # =&gt; "\nsi won\n\nemit eht\n\nnrael ot\n!ybuR\n"
</code></pre>

<h4 id="talking-to-networkds">Talking to Networkds</h4>
<p>socekt库封装了TCP,UDP,SOCKS和Unix domainsockes
	require ‘socket’
	client = TCPSocket.open(‘127.0.0.1’, ‘www’) </p>

<pre><code>client.send("OPTIONS /~dave/ HTTP/1.0\n\n", 0) 

puts client.readlines

client.close

produces:

# 0 means standard packet

HTTP/1.1 200 OK

Date: Mon, 27 May 2013 17:31:00 GMT

Server: Apache/2.2.22 (Unix) DAV/2 PHP/5.3.15 with Suhosin-Patch mod_ssl/2.2.22

OpenSSL/0.9.8r

Allow: GET,HEAD,POST,OPTIONS

Content-Length: 0

Connection: close

Content-Type: text/html 在高层,lib/net library modules提供了对通信协议的许多支持(FTP, HTTP, POP, SMTP, and telnet)

//以下只是一部分代码
require 'net/http'

http = Net::HTTP.new('pragprog.com', 80)

response = http.get('/book/ruby3/programming-ruby-1-9')

if response.message == "OK"

puts response.body.scan(/&lt;img alt=".*?" src="(.*?)"/m).uniq[0,3]

end

produces:

       http://pragprog.com/assets/logo-c5c7f9c2f950df63a71871ba2f6bb115.gif

       http://pragprog.com/assets/drm-

       free80-9120ffac998173dc0ba7e5875d082f18.png

       http://imagery.pragprog.com/products/99/ruby3_xlargecover.jpg?

       1349967653 open-url库中的Object#open方法能识别文件中的http://和ftp://URLs,也能自动处理重定向 

require 'open-uri'

open('http://pragprog.com') do |f|

puts f.read.scan(/&lt;img alt=".*?" src="(.*?)"/m).uniq[0,3]

end

produces:

       http://pragprog.com/assets/logo-c5c7f9c2f950df63a71871ba2f6bb115.gif

       http://pragprog.com/assets/drm-free80-9120ffac998173dc0ba7e5875d082f18.png

       http://imagery.pragprog.com/products/353/jvrails2_xlargebeta.jpg?1368826914
</code></pre>

<h4 id="parsing-html">Parsing HTML</h4>

<pre><code>require 'open-uri'

page = open('http://pragprog.com/titles/ruby3/programming-ruby-1-9').read 

if page =~ %r{&lt;title&gt;(.*?)&lt;/title&gt;}m

	puts "Title is #{$1.inspect}" 

end

produces:

       Title is "The Pragmatic Bookshelf | Programming Ruby 1.9"
</code></pre>

<p>但用此法不太妥当，可能title和尖括号间多个个空格如何是好，可以用第三方库Nokogiri</p>

<pre><code>require 'open-uri' 

require 'nokogiri'

doc = Nokogiri::HTML(open("http://pragprog.com/"))

puts "Page title is " + doc.xpath("//title").inner_html

# Output the first paragraph in the div with an id="copyright" 

# (nokogiri supports both xpath and css-like selectors)

puts doc.css('div#copyright p')

# Output the second hyperlink in the site-links div using xpath and css

puts "\nSecond hyperlink is"

puts doc.xpath('id("site-links")//a[2]') puts doc.css('#site-links a:nth-of-type(2)')

produces:

Page title is The Pragmatic Bookshelf
&lt;p&gt;

    The &lt;em&gt;Pragmatic BookshelfTM&lt;/em&gt; is an imprint of

        &lt;a href="http://pragprog.com/"&gt;The Pragmatic Programmers, LLC&lt;/a&gt;.

    &lt;br&gt;

    Copyright © 1999–2013 The Pragmatic Programmers, LLC.

    All Rights Reserved.

&lt;/p&gt;

Second hyperlink is

&lt;a href="http://pragprog.com/about"&gt;About Us&lt;/a&gt;

&lt;a href="http://pragprog.com/about"&gt;About Us&lt;/a&gt;
</code></pre>

<p>Nokogiri can also update and create HTML and XML.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exceptions-catch-throw]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/07/30/exceptions-catch-throw/"/>
    <updated>2014-07-30T11:52:27+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/07/30/exceptions-catch-throw</id>
    <content type="html"><![CDATA[<h4 id="the-exception-class">The Exception Class</h4>
<p>异常的信息被封装进了Exception类的对象或者Exception类的子类对象里,Ruby预定义了exceptions的hierarchy,如下</p>

<p><img src="http://xiekunRonaldo.github.io/images/2014/7/exception_hierarchy.png" /></p>

<p>如果你需要抛出异常,你可以用内置的Exception的类,或者可以自己创建一个，不过请确保你创建的Exception
子类继承自StandardError或者它的子类,否则默认情况下异常是不会被捕捉的
每一个Exception都有一个消息和stack backtrace与之关联，如果你定义了自己的异常，你可以添加额外的信息
这是有一个用open-url的库来下载一个网页的内容并将它写入一个文件中的demo</p>

<pre><code>require 'open-uri'

web_page = open("http://pragprog.com/podcasts") 

output = File.open("podcasts.html", "w")

while line = web_page.gets

output.puts line

end

output.close
</code></pre>

<p>如果中途出现错误怎么办，我们当然不想保存一张不完整的网页
我们看看如何处理异常的代码，我们将可能发生异常的代码放在begin/end的block中，然后用rescue语句来告诉Ruby我们想要捕获的异常类型</p>

<pre><code>require 'open-uri'

page = "podcasts"

file_name = "#{page}.html"

web_page = open("http://pragprog.com/#{page}") output = File.open(file_name, "w")

begin

	while line = web_page.gets output.puts line

end

output.close 

rescue Exception

	STDERR.puts "Failed to download #{page}: #{$!}" output.close

	File.delete(file_name)

	raise

end	 When an exception is raised and independent of any subsequent exception handling, Ruby places a reference to the associated exception object into the global variable $! (the exclamation point presumably mirroring our surprise that any of our code could cause errors). In the previous example, we used the $! variable to format our error message. 关掉并删除文件后，我们可以调用无参的raise，这样又在$!里重新抛出了异常，抛到更高层去了 还可以为捕获取的异常指定别名

begin

	eval string

rescue SyntaxError, NameError =&gt; boom

	print "String doesn't compile: " + boom 

rescue StandardError =&gt; bang

	print "Error running script: " + bang 

end #####System Errors System errors are raised when a call to the operating system returns an error code,On POSIX systems, these errors have names such as EAGAIN and EPERM. (If you’re on a Unix box, you could type man errno to get a list of these errors.)
</code></pre>

<p>Ruby将这些错误打包成一个具体的exception的对象,每一个是SymstemCallError的子类，并且都定义在Errno module中,这意味着你将看到Excetion的类另如Errno::EAGAIN, Errno::EIO, 和Errno::EPERM,如果你想要获取system error code,每个Error exception类都有一个叫做Errno类常量</p>

<pre><code>Errno::EAGAIN::Errno # =&gt; 35 

Errno::EPERM::Errno # =&gt; 1 

Errno::EWOULDBLOCK::Errno # =&gt; 35
</code></pre>

<p>注意EWOULDBLOCK 和 EAGAIN有同样的error code,所以在rescue中，Ruby把它们看作一样的，如果你想rescue一个，你再rescue两个，为此你可以重新定义 SystemCallError#===,这样，如果两个SystemCallError比较就会基于error number而不是它们在层次中的位置了</p>

<p>ensure相当于java中的finally</p>

<pre><code>f = File.open("testfile") 

begin

# .. process

rescue

  # .. handle error

ensure

f.close

end
</code></pre>

<p>注意File.open不能放在begin里面，因为open它自己也可能抛出异常，如果发生了，你应该不想在ensure里来执行相应的代码，因为没有文件要去close</p>

<p>else语句</p>

<pre><code>f = File.open("testfile") 

begin

# .. process

rescue

  # .. handle error

else

puts "Congratulations-- no errors!" 

ensure

f.close

end 注意else里的语句只有在无异发生时才会调用 有时你能改正抛出异常的cause,此时可以用retry语句来重新执行begin/end的block

@esmtp = true

begin

	# First try an extended login. If it fails, fall back to a normal login

	if @esmtp then @command.ehlo(helodom) 

				else @command.helo(helodom)

	end

rescue ProtocolError

	if @esmtp then

	    @esmtp = false

		retry 

	else

		raise

	end 

end
</code></pre>

<h5 id="raising-exceptions">Raising Exceptions</h5>

<p>你可以用Object#raise方法来抛出异常</p>

<pre><code>raise	//抛出当前的exception,如果没有，则抛出RuntimeError

raise "bad mp3 encoding"	//创建一个新的RuntimeError,然后抛到调用栈上

//创建InterfaceException，与之相关的信息，然后抛到stack trace上
raise InterfaceException, "Keyboard failure", caller
</code></pre>

<p>stack trace通常用Object#caller</p>

<p>也可以将Exception抛给call stack一部分的子集</p>

<p>假设我们定义了一个RetryException类</p>

<pre><code>class RetryException &lt; RuntimeError

	attr :ok_to_retry

	def initialize(ok_to_retry)

	           @ok_to_retry = ok_to_retry

	end 

end
</code></pre>

<p>在代码的某个地方，一个错误发生了</p>

<pre><code>def read_data(socket) 

	data = socket.read(512) 

	if data.nil?

	raise RetryException.new(true), "transient read error" 

	end
    # .. normal processing
end
</code></pre>

<p>higher up te call stack,我们处理异常</p>

<pre><code>begin
    stuff = read_data(socket)
    # .. process stuff
rescue RetryException =&gt; detail 

	retry if detail.ok_to_retry 

	raise
end
</code></pre>

<h5 id="catch-and-throw">catch and throw</h5>

<pre><code>word_list = File.open("wordlist") 

word_in_error = catch(:done) do

	result = []

	while line = word_list.gets

	word = line.chomp

	throw(:done, word) unless word =~ /^\w+$/ 

	result &lt;&lt; word

	end

	  puts result.reverse

end

if word_in_error

	puts "Failed: '#{word_in_error}' found, but a word was expected" 

end
</code></pre>

<p>throw不一定非要出现在catch语句里</p>

<pre><code>def prompt_and_get(prompt)

	print prompt

	res = readline.chomp

	throw :quit_requested if res == "!" 

	res

end

catch :quit_requested do

	name = prompt_and_get("Name: ") 

	age = prompt_and_get("Age: ") 

	sex = prompt_and_get("Sex: ") 

	# ..

	# process information

end
</code></pre>

]]></content>
  </entry>
  
</feed>
