---
layout: post
title: "Head First C 第二章学习笔记-内存与指针"
date: 2014-06-27 22:01:57 +0800
comments: true
categories: C语言
---


##### 问:运算符和函数的区别
答:运算符会被编译器编译成一串指令，而如果调用了函数，则会跳到一块单独的代码块中,也就是说在编译的时候sizeof就被执行了，因为编译器能在编译的时候就知道存储空间的大小了

##### 问:为何在不同的机器上，指针的大小是不同的?
答:在32位OS上，一个内存地址以一个32比特的数字来表示，这也是它被称为32位的原因,32bit = 8bytes,则也是为何64位OS用8bytes来存储一个地址的原因

##### 写一个函数，则函数只打印一个字符串的第7个字符以后的信息

	void skip(char *msg) {		puts( msg + 6 ); 	} 
以下写法是错误的

	char food[5];	printf("Enter favorite food: "); 	scanf("%s", food);
应改为

	scanf("%4s", food);

否则将导致缓冲区溢出(buffer overflow),或者说栈错误(segmentation fault)

## fgets()是一种替代方式

它接受一个char的指针，但不像scanf(),fgets()必须指定一个最大长度

	char food[5];	printf("Enter favorite food: ");	fgets(food, sizeof(food), stdin);
`注意点`:不过需要注意的是sizeof返回 的是一个变量所占据的空间,以上的例子中,food是一个数组变量 ,所以sizeof返回了数组的大小，如果food只是一个指针变量,sizeof将返回一个指针的大小如果你知道你所传的参数是一个数组变量,那用sizeof是ok的，如果你传的是一个指针变量，你需要传入确定的大小,如下

	printf("Enter favorite food: "); 
	fgets(food, 5, stdin);
## fgets和scanf的比较
1. 输入大小限制
	* scanf()能限制输入的大小，只要你记得在输入的字符串格式上加上相应的大小即可,如"%4s"
	* fgets()有一个强制输入大小的限制

2. 输入类型
	* scanf()不仅仅能让你输入多种类型，还让你指定比如在相应的输入数据之间用什么数据来分隔,如scanf("%d,%d")表示输入的两个整数之间必须用","隔开
	* fgets()只允许你输入一个字符串到缓冲区中,其他数据类型都是不允许的

3. 字符串中的空格
	* 对scanf()来说，如果它用%s来输入一个字符串,如果碰到一个空格时，它将马上终止输入,所以如果你想输入两个单词，要么你调用两次scanf()来输入，要么你用一些古怪的正则表达式来操作
	* fgets()无任何问题,每次fgets()都可读入整个string

##字符串常量不能被修改
	char *cards = "JQK"
	cards[0] = 'H'
错误！字符串常量被存储在常量存储区，这个区域是只读的,如果你想要改变一个字符串，copy它，你需要将string拷贝到一个可写的内存区域，这样你就能修改它了,如下

	char cards[] = "JQK";
可能你不清楚发生了什么，所有的string都是数组，但在之前的错误代码中，cards仅仅是一个指针，在新代码中，如果你定义了一个叫做cards的数组，然后将一个字符串常量赋值给它，cards数组得到的是一份全新的拷贝，此时"JQK"在栈上
为了避免当cards是指针时修改它产生错误，你应该按哪下方式进行声明

	const char *s = "JQK";
这样，如果编译器看到试图修改此string的代码，就会报错

	s[0] = 'S'		//error: assignment of read-only location
## cards[]还是cards*
如果你看到以下的声明，意味着什么

	char cards[]
一切取决于你在哪看到它的，如果是一个正常的声明，那么意味着它是一个数组，必须给它赋值

	int my_function()	{
		//此时cards是一个数组		char cards[] = "JQK"; ... 	}
如果cards出现在一个函数的参数中，此时cards表示一个指针
	void stack_deck(char cards[])	{		}
等价于
	void stack_deck(char *cards) {		}
##存储区
* 栈
  栈用来存储局部变量,每次你调用一个函数，所有此函数的局部变量都创建在栈上，它被称称栈，是因为它像一叠盘子,将你创建一个函数的时候，变量被加到栈中，将你离开一个函数时，这些变量又会变销毁，奇怪的是栈的工作方式，总是从高地址开始，向低地址增长
* 堆
  堆主要用在动态内存分配上,创建在堆上的数据在程序运行时即可创建，不过会保持相当长的一段时间，直到你手动释放它
* 全局存储区
  一个全局存储区的作用域在所有函数之外，并且对所有函数可见，全局变量在程序首次运行的时候创建，你可以随意改变它们，但却不像...
* 常量存储区
  常量也在用户首次运行的时候创建，但它们只存储在只读的存储区域中,常量就像字符串字面量一样，程序运行的时候你可能需要它们，但你却无法改变它们
* 代码存储区
  许多操作系统将代码存储区置于最低的内存地址中,代码存储区是只读的，这里实际上是汇编代码加载的区域
  
  {% img left /images/memory_memorizer.png 350 350 'image' %}