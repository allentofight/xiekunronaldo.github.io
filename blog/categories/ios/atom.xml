<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | AllenToFight Blog]]></title>
  <link href="http://xiekunRonaldo.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://xiekunRonaldo.github.io/"/>
  <updated>2014-10-21T19:57:38+08:00</updated>
  <id>http://xiekunRonaldo.github.io/</id>
  <author>
    <name><![CDATA[AllenToFight]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objc]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/09/15/objc/"/>
    <updated>2014-09-15T14:14:30+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/09/15/objc</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/08/12/swift/"/>
    <updated>2014-08-12T21:29:29+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/08/12/swift</id>
    <content type="html"><![CDATA[<h4 id="section">变量定义</h4>
<p>常量用let,变量用var</p>

<p>```
var myVariable = 42
myVariable = 50
let myConstant = 42
let explicitDouble: Double = 70</p>

<p>```</p>

<p>变量的值不会自动转化为其他类型的</p>

<p><code>
let label = "The width is "
let width = 94
let widthLabel = label+String(width)
</code>
String内的值替换</p>

<p><code>
let apples = 3
let oranges = 5
let appleSummary = "I have \(apples) apples.”
</code>
数组和字典</p>

<p>```
var shoppingList = [“catfish”, “water”, “tulips”, “blue paint”]</p>

<p>shoppingList[1] = “bottle of water”</p>

<p>var occupations = [</p>

<pre><code>"Malcolm": "Captain",

"Kaylee": "Mechanic", ] occupations["Jayne"] = "Public Relations”
</code></pre>

<p>let emptyArray = String[]()
let emptyDictionary = Dictionary&lt;String, Float&gt;()</p>

<p>```
如果类型是能推断的，可以用[]创建一个空数组，用[:]创建一个空字典
####条件语句
if…else…</p>

<p><code>
let individualScores = [75, 43, 103, 87, 12]
var teamScore = 0
for score in individualScores {
    if score &gt; 50 {
        teamScore += 3
    } else {
        teamScore += 1
    }
}
teamScore
</code>
注意，在if条件语句中，condition必须是bool表达式，所以类似<code>if score {...}</code>这样的代码是错误的
if和optional value组成的条件表达式</p>

<p>```
var optionalString: String? = “Hello”
optionalString == nil</p>

<p>var optionalName: String? = “John Appleseed”
var greeting = “Hello!”
if let name = optionalName {
    greeting = “Hello, (name)”
}
```
switch和case语句支持多种类型的比较,不限于integer</p>

<p><code>
let vegetable = "red pepper"
switch vegetable {
case "celery":
    let vegetableComment = "Add some raisins and make ants on a log."
case "cucumber", "watercress":
    let vegetableComment = "That would make a good tea sandwich."
case let x where x.hasSuffix("pepper"):
    let vegetableComment = "Is it a spicy \(x)?"
default:
    let vegetableComment = "Everything tastes good in soup."
}
</code>
注意:执行完case语句，程序就从switch语句里终止了，所以无需break!</p>

<p>遍历dictionary</p>

<p><code>
let interestingNumbers = [
    "Prime": [2, 3, 5, 7, 11, 13],
    "Fibonacci": [1, 1, 2, 3, 5, 8],
    "Square": [1, 4, 9, 16, 25],
]
var largest = 0
for (kind, numbers) in interestingNumbers {
    for number in numbers {
        if number &gt; largest {
            largest = number
        }
    }
}
largest
</code>
while语句</p>

<p>```
var n = 2
while n &lt; 100 {
    n = n * 2
}
n</p>

<p>var m = 2
do {
    m = m * 2
} while m &lt; 100
m
```
<code>..</code>的妙用,以下两个循环是等价的</p>

<p>```
var firstForLoop = 0
for i in 0..3 {
    firstForLoop += i
}
firstForLoop</p>

<p>var secondForLoop = 0
for var i = 0; i &lt; 3; ++i {
    secondForLoop += 1
}
secondForLoop
```
####函数和闭包
函数的声明
用-&gt;将参数与返回值区分开来</p>

<p><code>
func greet(name: String, day: String) -&gt; String {
    return "Hello \(name), today is \(day)."
}
greet("Bob", "Tuesday")
</code>
用tuple从函数中返回多个值
<code>
func getGasPrices() -&gt; (Double, Double, Double) {
    return (3.59, 3.69, 3.79)
}
getGasPrices()
</code>
函数也能接收不定数量的参数，将它们封成到一个数组里</p>

<p><code>
func sumOf(numbers: Int...) -&gt; Int {
    var sum = 0
    for number in numbers {
        sum += number
    }
    return sum
}
sumOf()
sumOf(42, 597, 12)
</code>
函数也能嵌套，内嵌的函数能访问声明在外部函数的变量
<code>
func returnFifteen() -&gt; Int {
    var y = 10
    func add() {
        y += 5
    }
    add()
    return y
}
returnFifteen()
</code>
函数是first-class类型，这意味着函数也能返回另一个函数</p>

<p><code>
func makeIncrementer() -&gt; (Int -&gt; Int) {
    func addOne(number: Int) -&gt; Int {
        return 1 + number
    }
    return addOne
}
var increment = makeIncrementer()
increment(7)
</code>
函数的参数也能是函数</p>

<p><code>
func hasAnyMatches(list: Int[], condition: Int -&gt; Bool) -&gt; Bool {
    for item in list {
        if condition(item) {
            return true
        }
    }
    return false
}
func lessThanTen(number: Int) -&gt; Bool {
    return number &lt; 10
}
var numbers = [20, 19, 7, 12]
hasAnyMatches(numbers, lessThanTen)
</code>
函数实际上是闭包的一种特殊形式，我们可以用{}来写一个匿名的闭包,用in来将参数和返回类型区分开来</p>

<p><code>
numbers.map({
    (number: Int) -&gt; Int in
    let result = 3 * number
    return result
    })
</code>
如果一个closure的类型是已知的，比如已知一个delegate的回调，我们可以省略参数的类型，返回类型或两者都省略,以上可以改写成以下</p>

<p><code>
numbers.map({ number in 3 * number })
</code>
我们也可以用数字而不是名字来表示参数</p>

<p><code>
sort([1, 5, 3, 12, 2]) { $0 &gt; $1 }
</code>
####对象和类</p>

<p>```
class Shape {
    var numberOfSides = 0
    func simpleDescription() -&gt; String {
        return “A shape with (numberOfSides) sides.”
    }
}</p>

<p>var shape = Shape()
shape.numberOfSides = 7
var shapeDescription = shape.simpleDescription()
```</p>

<p><code>init</code>的使用</p>

<p>```
class NamedShape {
    var numberOfSides: Int = 0
    var name: String</p>

<pre><code>init(name: String) {
    self.name = name
}

func simpleDescription() -&gt; String {
    return "A shape with \(numberOfSides) sides."
} } ``` 每一个property都需要赋值，可以在它声明的时候(如numberOfSlides)也可以在initializer里(如name) 定义deinit来创建一个deinitializer如果你需要在对象被释放前做一些清理工作的话 继承时，如果要重写superclass的方法，必须要在重写的方法前加override
</code></pre>

<p>```
class Square: NamedShape {
    var sideLength: Double</p>

<pre><code>init(sideLength: Double, name: String) {
    self.sideLength = sideLength
    super.init(name: name)
    numberOfSides = 4
}

func area() -&gt;  Double {
    return sideLength * sideLength
}

override func simpleDescription() -&gt; String {
    return "A square with sides of length \(sideLength)."
} } let test = Square(sideLength: 5.2, name: "my test square") test.area() test.simpleDescription() ``` 为property定义getter和setter
</code></pre>

<p>```
class EquilateralTriangle: NamedShape {
    var sideLength: Double = 0.0</p>

<pre><code>init(sideLength: Double, name: String) {
    self.sideLength = sideLength
    super.init(name: name)
    numberOfSides = 3
}

var perimeter: Double {
get {
    return 3.0 * sideLength
}
set {
    sideLength = newValue / 3.0
}  }
</code></pre>

<p>override func simpleDescription() -&gt; String {
    	    return “An equilateral triagle with sides of length (sideLength).”
	    }
 }
var triangle = EquilateralTriangle(sideLength: 3.1, name: “a triangle”)
triangle.perimeter
triangle.perimeter = 9.9
triangle.sideLength
```</p>

<p>在perimeter的setter方法中，新值有一个默认的名字newValue,我们可以在set后的括号里为这个值指定一个名字
如果你无需计算property的值，但需要在设置新值的前后做一些操作，可以用<code>willSet</code>和<code>didSet</code>,比如</p>

<p><code>
class TriangleAndSquare {
    var triangle: EquilateralTriangle {
	    willSet {
	        square.sideLength = newValue.sideLength
	    }
    }
    var square: Square {
	    willSet {
	        triangle.sideLength = newValue.sideLength
	    }
    }
    init(size: Double, name: String) {
        square = Square(sideLength: size, name: name)
        triangle = EquilateralTriangle(sideLength: size, name: name)
    }
}
var triangleAndSquare = TriangleAndSquare(size: 10, name: "another test shape")
triangleAndSquare.square.sideLength
triangleAndSquare.triangle.sideLength
triangleAndSquare.square = Square(sideLength: 50, name: "larger square")
triangleAndSquare.triangle.sideLength
</code>
类方法与函数有一个很重要的区别，类方法里可以为参数指定一个别名,而函数不行，如下
<code>
class Counter {
    var count: Int = 0
    func incrementBy(amount: Int, numberOfTimes times: Int) {
        count += amount * times
    }
}
var counter = Counter()
counter.incrementBy(2, numberOfTimes: 7)
</code>
当与optional values工作时，你可以在有关方法，属性和[]操作前写一个<code>?</code>如果在?前的值为nil,则一切在？后的操作都被忽略了，整个表达式的值也就是nil了，否则optional value unwrapped,所有?后表达式对应的值为optional value,无论如何，整个表达式的值都是optional value</p>

<p><code>
let optionalSquare: Square? = Square(sideLength: 2.5, name: "optional square")
let sideLength = optionalSquare?.sideLength
</code>
####Enumerations and Structures
像类和其他类型一样,enumerations可以有方法</p>

<p><code>
enum Rank: Int {
    case Ace = 1  //也可以用字符串或符点型来指定枚举的类型
    case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten
    case Jack, Queen, King
    func simpleDescription() -&gt; String {
        switch self {
        case .Ace:
            return "ace"
        case .Jack:
            return "jack"
        case .Queen:
            return "queen"
        case .King:
            return "king"
        default:
            return String(self.toRaw())
        }
    }
}
let ace = Rank.Ace
let aceRawValue = ace.toRaw()	//1
</code>
用<code>toRaw</code>和<code>fromRaw</code>函数来对raw value和枚举值进行相互转换</p>

<p><code>
if let convertedRank = Rank.fromRaw(3) {
    let threeDescription = convertedRank.simpleDescription()
}
</code>
The member values of an enumeration are actual values, not just another way of writing their raw values.如果没有一个有意义的raw value，你不需要再指定它</p>

<p><code>
enum Suit {
    case Spades, Hearts, Diamonds, Clubs
    func simpleDescription() -&gt; String {
        switch self {
        case .Spades:
            return "spades"
        case .Hearts:
            return "hearts"
        case .Diamonds:
            return "diamonds"
        case .Clubs:
            return "clubs"
        }
    }
}
let hearts = Suit.Hearts
let heartsDescription = hearts.simpleDescription()
</code>
用struct来创建一个结构,struct支持类的很多方面，如方法和初始化，和类的最大区别是structures总量以copy的形式传递，而class则以引用的形式传递</p>

<p><code>
struct Card {
    var rank: Rank
    var suit: Suit
    func simpleDescription() -&gt; String {
        return "The \(rank.simpleDescription()) of \(suit.simpleDescription())"
    }
}
let threeOfSpades = Card(rank: .Three, suit: .Spades)
let threeOfSpadesDescription = threeOfSpades.simpleDescription()
</code>
Instances of the same enumeration member can have different values associated with them.</p>

<p>```
enum ServerResponse {
    case Result(String, String)
    case Error(String)
}</p>

<p>let success = ServerResponse.Result(“6:00 am”, “8:09 pm”)
let failure = ServerResponse.Error(“Out of cheese.”)</p>

<p>switch success {
case let .Result(sunrise, sunset):
    let serverResponse = “Sunrise is at (sunrise) and sunset is at (sunset).”
case let .Error(error):
    let serverResponse = “Failure…  (error)”
}
```
注意sunrise和sunset如何匹配switch中case的条件而从ServerResponse里值取出来的</p>

<h4 id="extensions">协议和Extensions</h4>
<p>用<code>protocol</code>来声明一个协议</p>

<p>```
protocol ExampleProtocol {
    var simpleDescription: String { get }
    mutating func adjust()
}</p>

<p>class SimpleClass: ExampleProtocol {
    var simpleDescription: String = “A very simple class.”
    var anotherProperty: Int = 69105
    func adjust() {
        simpleDescription += “  Now 100% adjusted.”
    }
}
var a = SimpleClass()
a.adjust()
let aDescription = a.simpleDescription</p>

<p>struct SimpleStructure: ExampleProtocol {
    var simpleDescription: String = “A simple structure”
    mutating func adjust() {
        simpleDescription += “ (adjusted)”
    }
}
var b = SimpleStructure()
b.adjust()
let bDescription = b.simpleDescription
```
注意在struct中mutating的使用,class中的方法无需标记为mutating,因为类中的方法总是可以改变类的
用extensions来为一个已知的类型添加功能，比如新的方法和computed properties</p>

<p><code>
extension Int: ExampleProtocol {
    var simpleDescription: String {
    return "The number \(self)"
    }
    mutating func adjust() {
        self += 42
    }
}
7.simpleDescription
</code>
You can use an extension to add protocol conformance to a type that is declared elsewhere, or even to a type that you imported from a library or framework.</p>

<p><code>
let protocolValue: ExampleProtocol = a
protocolValue.simpleDescription
// protocolValue.anotherProperty  // Uncomment to see the error”
</code>
尽管protocolValue有一个运行时的类型SimpleClass,但编译器仍把它当作ExampleProtocol的一种类型，也就是说说了定义时协议对应的方法，你不能调用它实际所属类的方法，属性</p>

<h4 id="generics">Generics</h4>
<p>在尖括号里写一个名字来创建一个generic函数或类型</p>

<p><code>
func repeat&lt;ItemType&gt;(item: ItemType, times: Int) -&gt; ItemType[] {
    var result = ItemType[]()
    for i in 0..times {
        result += item
    }
    return result
}
repeat("knock", 4)
</code>
我们既可以将这种形式用在函数和方法上，也可以用在类，枚举，结构体的定义上</p>

<p><code>
// Reimplement the Swift standard library's optional type
enum OptionalValue&lt;T&gt; {
    case None
    case Some(T)
}
var possibleInteger: OptionalValue&lt;Int&gt; = .None
possibleInteger = .Some(100)
</code>
在类型名后加一个where来指定一些必须条件</p>

<p><code>
func anyCommonElements &lt;T, U where T: Sequence, U: Sequence, T.GeneratorType.Element: Equatable, T.GeneratorType.Element == U.GeneratorType.Element&gt; (lhs: T, rhs: U) -&gt; Bool {
    for lhsItem in lhs {
        for rhsItem in rhs {
            if lhsItem == rhsItem {
                return true
            }
        }
    }
    return false
}
anyCommonElements([1, 2, 3], [3])
</code>
练习
Modify the anyCommonElements function to make a function that returns an array of the elements that any two sequences have in common.</p>

<p><code>
func anyCommonElements &lt;T, U where T: Sequence, U: Sequence, T.GeneratorType.Element:     Equatable, T.GeneratorType.Element == U.GeneratorType.Element&gt; (lhs: T, rhs: U) -&gt; Array&lt;T.GeneratorType.Element&gt; {
    var toReturn = Array&lt;T.GeneratorType.Element&gt;()
    for lhsItem in lhs {
        for rhsItem in rhs {
            if lhsItem == rhsItem {
                toReturn.append(lhsItem)
            }
        }
    }
    return toReturn
}
anyCommonElements([1, 2, 3], [3])
</code>
在一些简单的情况下，可以省略where，只在分号后写一个protocol或是类名，<t: equatable="">和<t where="" t:="" equatable="">是一样的
Swift是类型安全的语言,如果你的代码希望的是String类型，类型安全将阻止你赋Int值给它
####常量和变量的命名</t></t:></p>

<p>我们几乎可以用任何字符来命名常量和变量，包括Unicode字符</p>

<p><code>
let π = 3.14159
let 你好 = "你好世界"
let 🐶🐮 = "dogcow”
</code>
一旦你声明了某种类型的常量和变量，你就不能为它赋予其他类型的变量
####打印
打印变量 </p>

<p><code>
println(friendlyWelcome)
</code>
打印中包含字符替换</p>

<p><code>
println("The current value of friendlyWelcome is \(friendlyWelcome)")
</code>
####注释
不像C语言中的多行注释，Swift的多行注释是可以嵌套的</p>

<p><code>
/* this is the start of the first multiline comment
/* this is the second, nested multiline comment */
this is the end of the first multiline comment */
</code>
####分号的使用
如果一行中包含多条语句，就得用分号</p>

<p><code>
let cat = "🐱"; println(cat)
// prints "🐱”
</code>
####整型
* 整型范围</p>

<p><code>
let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8
let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8”
</code>
* Int型和UInt
在32位OS上，(U)Int和(U)Int32的大小一样
在64位OS上，(U)Int和(U)Int64的大小一样
只有在你确实需要和OS本身的字大小一样的非整形类型时才用UInt，否则尽量用Int
####浮点型 
* Double代表了64位的浮点数，有至少15位小数的精度
* Float代表了32位，只有6位小数的精度
####Numeric Literals
整型字面量可以写成以下形式
* 10进制，无前缀
* 二进度，0b前缀
* 八进制，0o前缀
* 十六进制，0x前缀</p>

<p><code>
let decimalInteger = 17
let binaryInteger = 0b10001       // 17 in binary notation
let octalInteger = 0o21           // 17 in octal notation
let hexadecimalInteger = 0x11     // 17 in hexadecimal notation”
</code>
浮点型可以是十制的(无前缀),也可以是十六进制的</p>

<p><code>
1.25e2 means 1.25 × 102, or 125.0.
1.25e-2 means 1.25 × 10-2, or 0.0125.
0xFp2 means 15 × 2*2, or 60.0.
0xFp-2 means 15 × (2的-2次方), or 3.75.
</code>
####整型转换
溢出会报错</p>

<p><code>
let cannotBeNegative: UInt8 = -1
// UInt8 cannot store negative numbers, and so this will report an error
let tooBig: Int8 = Int8.max + 1
// Int8 cannot store a number larger than its maximum value,
// and so this will also report an error
</code>
来看以下例子</p>

<p><code>
let twoThousand: UInt16 = 2_000
let one: UInt8 = 1
let twoThousandAndOne = twoThousand + UInt16(one)
</code>
以上的UInt16是必须的,因为两个变量的类型不同
####整形和浮点型的转换
<code>
let three = 3
let pointOneFourOneFiveNine = 0.14159
let pi = Double(three) + pointOneFourOneFiveNine
</code>
浮点型转为整型，只保留整数,不会出现四舍五入这种情况
####Type Aliases</p>

<p><code>
typealias AudioSample = UInt16
var maxAmplitudeFound = AudioSample.min
</code>
####Bool型
Swift的类型安全阻止了任何非bool型的值自动替换成Bool型的值</p>

<p><code>
let i = 1
if i {
    // this example will not compile, and will report an error
}
</code>
不过，以下使用方式却是对的</p>

<p><code>
let i = 1
if i == 1 {
    // this example will compile successfully
}
</code>
####Tuples
tuple将多个值组合一个复合的值，并且这些值可以是不同类型的</p>

<p>```
let http404Error = (404, “Not Found”)</p>

<p>let (statusCode, statusMessage) = http404Error
println(“The status code is (statusCode)”)
// prints “The status code is 404”
println(“The status message is (statusMessage)”)
// prints “The status message is Not Found
```
如果你只需要一部分tuple的值 ，你可以用_来忽略你不需要的值 </p>

<p><code>
let (justTheStatusCode, _) = http404Error
println("The status code is \(justTheStatusCode)")
// prints "The status code is 404
</code>
也可以用以下方式来获取tuple里的值</p>

<p><code>
println("The status code is \(http404Error.0)")
// prints "The status code is 404"
println("The status message is \(http404Error.1)")
// prints "The status message is Not Found
</code>
在定义tuple的时候可以为每个element赋值</p>

<p><code>
let http200Status = (statusCode: 200, description: "OK")
println("The status code is \(http200Status.statusCode)")
// prints "The status code is 200"
println("The status message is \(http200Status.description)")
// prints "The status message is OK"
</code>
注意:Tuples仅仅适用于临时的一组相关的数据,它并不适用于复杂数据类型的创建</p>

<h4 id="optionals">Optionals</h4>
<p>Swift’s optionals let you indicate the absence of a value for any type at all, without the need for special constants.</p>

<h4 id="forced-unwrapping">Forced Unwrapping</h4>
<p>当我们确定optional<code>确定</code>含有一个值时，我们可以在这个optional的名字后面加一个!来获取它的值</p>

<p><code>
if convertedNumber {
    println("\(possibleNumber) has an integer value of \(convertedNumber!)")
} else {
    println("\(possibleNumber) could not be converted to an integer")
}
</code>
####Optional Binding</p>

<p><code>
if let constantName = someOptional {
    statements
}
</code>
我们可以按如下方式重写之前的<code>possibleNumber</code>的例子</p>

<p><code>
if let actualNumber = possibleNumber.toInt() {
    println("\(possibleNumber) has an integer value of \(actualNumber)")
} else {
    println("\(possibleNumber) could not be converted to an integer")
}
</code>
你可以赋予一个optional 值为nil,非optional的则不行</p>

<p><code>
var serverResponseCode: Int? = 404
// serverResponseCode contains an actual Int value of 404
serverResponseCode = nil
</code>
如果在定义一个optional value时不提供一个默认值，则它为nil</p>

<p><code>
var surveyAnswer: String?
// surveyAnswer is automatically set to nil”
</code>
需要注意的是swift的nil与oc中的nil不同,oc中的nil是一个指定不存在的对象的指针，而swift中的nil则不是指针，它只是表示某种类型的值不存在，任何类型的optional都能设置为nil，而不仅仅是对象</p>

<h4 id="implicitly-unwrapped-optional">Implicitly Unwrapped Optional</h4>
<p>也就是类型后加!,仔细看以下的区别</p>

<p>```
let possibleString: String? = “An optional string.”
println(possibleString!) // requires an exclamation mark to access its value
// prints “An optional string.”</p>

<p>let assumedString: String! = “An implicitly unwrapped optional string.”
println(assumedString)  // no exclamation mark is needed to access its value
// prints “An implicitly unwrapped optional string.</p>

<p>if assumedString {
    println(assumedString)
}
```
####断言</p>

<p><code>
let age = -3
assert(age &gt;= 0, "A person's age cannot be less than zero")
// this causes the assertion to trigger, because age is not &gt;= 0
</code>
也可以不写string</p>

<p><code>
assert(age &gt;= 0)
</code>
注意assert里的string不支持<code>\()</code>形式的替换
####基本操作
Swift允许你对浮点值进行%的运算
赋值 </p>

<p><code>
let b = 10
var a = 5
a = b
</code>
不过不像C，赋值本身不返回值，所以以下是非法的</p>

<p><code>
if x = y {
    // this is not valid, because x = y does not return a value
}
</code>
不像C，Swift默认情况下不允许进行算术运算时的值溢出
两个Character的值，或者一个Character和一个String的值，能相加组成一个新的String的值 </p>

<p><code>
let dog: Character = "🐶"
let cow: Character = "🐮"
let dogCow = dog + cow
// dogCow is equal to "🐶🐮”
</code>
####求余运算符%</p>

<p><code>
-9 % 4   // equals -1
</code>
除数的符号是被忽略的，也就是说a % b和a % -b的值是一样的
浮点数的求余操作</p>

<p><code>
8 % 2.5   // equals 0.5
</code>
####比较操作符
<code>===</code>可以用来测试两个对象的引用是否指向同一个对象</p>

<p><code>
let name = "world"
if name == "world" {
    println("hello, world")
} else {
    println("I'm sorry \(name), but I don't recognize you")
}
// prints "hello, world", because name is indeed equal to "world"
</code>
####Range操作
闭区间</p>

<p><code>
for index in 1...5 {
    println("\(index) times 5 is \(index * 5)")
}
// 1 times 5 is 5
// 2 times 5 is 10
// 3 times 5 is 15
// 4 times 5 is 20
// 5 times 5 is 25”
</code>
开区间</p>

<p><code>
let names = ["Anna", "Alex", "Brian", "Jack"]
let count = names.count
for i in 0..count {
    println("Person \(i + 1) is called \(names[i])")
}
// Person 1 is called Anna
// Person 2 is called Alex
// Person 3 is called Brian
// Person 4 is called Jack
</code>
####字符串和字符
Every string is composed of encoding-independent Unicode characters, and provides support for accessing those characters in various Unicode representations.
注意OC中的string相关的API，Swift都的String都能使用 
#####String Literals
* 转义字符\0(空字符),\(返斜杆),\t,\n,\r,",`
* 单字节的Unicode scalars,\xnn,nn是两位十六进制的数字
* 两个字节的Unicode scalars,\unnnn,nnnn是一个四位十六进制的数字
* 四个字节的Unicode scalars,\Unnnnnnnn,nnnnnnnn是八位的十六进制的数字</p>

<p><code>
let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\x24"        // $,  Unicode scalar U+0024
let blackHeart = "\u2665"      // ♥,  Unicode scalar U+2665
let sparklingHeart = "\U0001F496"  // 💖, Unicode scalar U+1F496”
</code>
####初始化一个空字符串</p>

<p><code>
var emptyString = ""               // empty string literal
var anotherEmptyString = String()  // initializer syntax
// these two strings are both empty, and are equivalent to each other
</code>
判断一个String的值是否是空的</p>

<p><code>
if emptyString.isEmpty {
    println("Nothing to see here")
}
// prints "Nothing to see here
</code>
你可以在定义一个字符串时用var和let来表示字符串是否可变</p>

<p>```
var variableString = “Horse”
variableString += “ and carriage”
// variableString is now “Horse and carriage”</p>

<p>let constantString = “Highlander”
constantString += “ and another Highlander”
// this reports a compile-time error - a constant string cannot be modified
```
####Strings是值类型
也就是说如果string的值被传入函数或方法，或被赋值时，它是被copy的！幕后，Swift的编译器优化了string的使用，所以copy只有在真正需要的时候才发生,这意味着你无需担心性能总量
#####遍历string中的字符</p>

<p><code>
for character in "Dog!🐶" {
    println(character)
}
// D
// o
// g
// !
// 🐶”
</code>
创建一个character</p>

<p><code>
let yenSign: Character = "¥"
</code>
####计算Characters的个数</p>

<p><code>
let unusualMenagerie = "Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪"
println("unusualMenagerie has \(countElements(unusualMenagerie)) characters")
// prints "unusualMenagerie has 40 characters”
</code>
不同的Unicode字符或同一Unicode字符的不同表示形式在内存中占的空间不一样，基于此，swift中的字符并不占用同样的内存，所以要计算一个string的长度，我们必须逐个遍历字符</p>

<p><code>Note</code> also that the character count returned by countElements is not always the same as the length property of an NSString that contains the same characters. The length of an NSString is based on the number of 16-bit code units within the string’s UTF-16 representation and not the number of Unicode characters within the string. To reflect this fact, the length property from NSString is called utf16count when it is accessed on a Swift String value.
####连接字符串和字符</p>

<p>```
let string1 = “hello”
let string2 = “ there”
let character1: Character = “!”
let character2: Character = “?”</p>

<p>let stringPlusCharacter = string1 + character1        // equals “hello!”
let stringPlusString = string1 + string2              // equals “hello there”
let characterPlusString = character1 + string1        // equals “!hello”
let characterPlusCharacter = character1 + character2  // equals “!?”
```
####比较字符串</p>

<p><code>
let quotation = "We're a lot alike, you and I."
let sameQuotation = "We're a lot alike, you and I."
if quotation == sameQuotation {
    println("These two strings are considered equal")
}
// prints "These two strings are considered equal
</code>
#####前缀和后缀的比较
hasPrefix和hasSuffix
前缀</p>

<p>```
let romeoAndJuliet = [
    “Act 1 Scene 1: Verona, A public place”,
    “Act 1 Scene 2: Capulet’s mansion”,
    “Act 1 Scene 3: A room in Capulet’s mansion”,
    “Act 1 Scene 4: A street outside Capulet’s mansion”,
    “Act 1 Scene 5: The Great Hall in Capulet’s mansion”,
    “Act 2 Scene 1: Outside Capulet’s mansion”,
    “Act 2 Scene 2: Capulet’s orchard”,
    “Act 2 Scene 3: Outside Friar Lawrence’s cell”,
    “Act 2 Scene 4: A street in Verona”,
    “Act 2 Scene 5: Capulet’s mansion”,
    “Act 2 Scene 6: Friar Lawrence’s cell”
]</p>

<p>var act1SceneCount = 0
for scene in romeoAndJuliet {
    if scene.hasPrefix(“Act 1 “) {
        ++act1SceneCount
    }
}
println(“There are (act1SceneCount) scenes in Act 1”)
// prints “There are 5 scenes in Act 1
```
后缀</p>

<p><code>
var mansionCount = 0
var cellCount = 0
for scene in romeoAndJuliet {
    if scene.hasSuffix("Capulet's mansion") {
        ++mansionCount
    } else if scene.hasSuffix("Friar Lawrence's cell") {
        ++cellCount
    }
}
println("\(mansionCount) mansion scenes; \(cellCount) cell scenes")
// prints "6 mansion scenes; 2 cell scenes”
</code>
#####大小写转换</p>

<p><code>
let normal = "Could you help me, please?""
let shouty = normal.uppercaseString
// shouty is equal to "COULD YOU HELP ME, PLEASE?"
let whispered = normal.lowercaseString
// whispered is equal to "could you help me, please?”
</code>
####Unicode p118
####Collection 类型
#####Array
不同于OC中的array(可存储不同类型的对象)，array存储了同类型的对象，无需一定要存储对象，也可存储Int等类型
以下两个定义等价
<code>
var shoppingList: String[] = ["Eggs", "Milk"]
var shoppingList = ["Eggs", "Milk"]
</code>
#####访问或修改array
计算array的大小</p>

<p><code>
“println("The shopping list contains \(shoppingList.count) items.")
// prints "The shopping list contains 2 items.”
</code>
用isEmpty来判断coun得否为0
<code>
if shoppingList.isEmpty {
    println("The shopping list is empty.")
} else {
    println("The shopping list is not empty.")
}
// prints "The shopping list is not empty."
</code>
添加元素</p>

<ul>
  <li>用append</li>
</ul>

<p><code>
shoppingList.append("Flour")
// shoppingList now contains 3 items, and someone is making pancakes”
</code></p>

<ul>
  <li>用+=</li>
</ul>

<p>```
shoppingList += “Baking Powder”
// shoppingList now contains 4 items”</p>

<p>shoppingList += [“Chocolate Spread”, “Cheese”, “Butter”]
// shoppingList now contains 7 items”
```
用Range来改变数组里一些元素的值</p>

<p><code>
shoppingList[4...6] = ["Bananas", "Apples"]
// shoppingList now contains 6 items”
</code>
在某位置插入元素</p>

<p><code>
shoppingList.insert("Maple Syrup", atIndex: 0)
// shoppingList now contains 7 items
// "Maple Syrup" is now the first item in the list”
</code>
移除元素</p>

<p><code>
let mapleSyrup = shoppingList.removeAtIndex(0)
let apples = shoppingList.removeLast()
</code>
遍历</p>

<p><code>
for item in shoppingList {
    println(item)
}
// Six eggs
// Milk
// Flour
// Baking Powder
// Bananas”
</code>
如果你在遍历时需要知道对应的index，可以用以下方式 </p>

<p><code>
for (index, value) in enumerate(shoppingList) {
    println("Item \(index + 1): \(value)")
}
// Item 1: Six eggs
// Item 2: Milk
// Item 3: Flour
// Item 4: Baking Powder
// Item 5: Bananas
</code>
####创建和初始化Array</p>

<p><code>
var someInts = Int[]()
println("someInts is of type Int[] with \(someInts.count) items.")
// prints "someInts is of type Int[] with 0 items.
</code>
注意以下例子，虽然someInt=[]不指定任何类型，但从前段代码可知它的元素是Int类型的
<code>
someInts.append(3)
// someInts now contains 1 value of type Int
someInts = []
// someInts is now an empty array, but is still of type Int[]
</code>
指定default值和数目的初始化</p>

<p>```
var threeDoubles = Double[](count: 3, repeatedValue: 0.0)
// threeDoubles is of type Double[], and equals [0.0, 0.0, 0.0]</p>

<p>var anotherThreeDoubles = Array(count: 3, repeatedValue: 2.5)
// anotherThreeDoubles is inferred as Double[], and equals [2.5, 2.5, 2.5]
```
最后我们能通过+来将两个数组连成一个</p>

<p><code>
var sixDoubles = threeDoubles + anotherThreeDoubles
// sixDoubles is inferred as Double[], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]”
</code>
####字典
对key的唯一要求是hashable,Enumeration member values without associated values (as described in Enumerations) are also hashable by default.
以下两个定义是等价的，swift能推测出它的类型</p>

<p>```
var airports: Dictionary&lt;String, String&gt; = [“TYO”: “Tokyo”, “DUB”: “Dublin”]”
var airports: Dictionary&lt;String, String&gt; = [“TYO”: “Tokyo”, “DUB”: “Dublin”]</p>

<p>```
####访问和修改字典</p>

<p><code>
println("The dictionary of airports contains \(airports.count) items.")
// prints "The dictionary of airports contains 2 items.
</code>
方法updateValue(forKey:)的使用</p>

<p><code>
if let oldValue = airports.updateValue("Dublin International", forKey: "DUB") {
    println("The old value for DUB was \(oldValue).")
}
// prints "The old value for DUB was Dublin.
</code>
注意，此方法对应的是key对应的旧值，返回的是一个optional value
用[]获取的值也是optional vlaue</p>

<p><code>
if let airportName = airports["DUB"] {
    println("The name of the airport is \(airportName).")
} else {
    println("That airport is not in the airports dictionary.")
}
// prints "The name of the airport is Dublin International.
</code>
我们可以将nil赋予key对应的值来移除此key</p>

<p><code>
airports["APL"] = "Apple International"
// "Apple International" is not the real airport for APL, so delete it
airports["APL"] = nil
// APL has now been removed from the dictionary
</code>
也可以用<code>removeValueForKey</code>方法
此方法返回的是key对应的旧值,或者nil(如果不存在的话)</p>

<p><code>
if let removedValue = airports.removeValueForKey("DUB") {
    println("The removed airport's name is \(removedValue).")
} else {
    println("The airports dictionary does not contain a value for DUB.")
}
// prints "The removed airport's name is Dublin International.”
</code>
#####遍历字典</p>

<p>```
for (airportCode, airportName) in airports {
    println(“(airportCode): (airportName)”)
}
// TYO: Tokyo
// LHR: London Heathrow</p>

<p>for airportCode in airports.keys {
    println(“Airport code: (airportCode)”)
}
// Airport code: TYO
// Airport code: LHR</p>

<p>for airportName in airports.values {
    println(“Airport name: (airportName)”)
}</p>

<p>//用keys或values创建一个数组
let airportCodes = Array(airports.keys)
// airportCodes is [“TYO”, “LHR”]</p>

<p>let airportNames = Array(airports.values)
// airportNames is [“Tokyo”, “London Heathrow”]
```
####创建一个空的字典</p>

<p><code>
var namesOfIntegers = Dictionary&lt;Int, String&gt;()
</code>
注意以下,namesIntegers能被推断出是&lt;Int,String&gt;</p>

<p><code>
namesOfIntegers[16] = "sixteen"
// namesOfIntegers now contains 1 key-value pair
namesOfIntegers = [:]
</code>
<code>注意</code>Behind the scenes, Swift’s array and dictionary types are implemented as generic collections
####Mutability Of Collections
对字典来说,immutability意味着你不能改变一个key对应的值，而对数组来说，你只是不能改变它的大小，但仍然能改变某个index对应的值
####条件语句
注意,swift的switch中的case后无需跟着break，因为执行完case里的语句就自动break了，cases也能匹配不同的类型，包括range,tuples或转换为某一具体的类型
#####For Loops
* For-In</p>

<p><code>
for index in 1...5 {
    println("\(index) times 5 is \(index * 5)")
}
// 1 times 5 is 5
// 2 times 5 is 10
// 3 times 5 is 15
// 4 times 5 is 20
// 5 times 5 is 25”
</code>
如果你不需要index，可以用<code>_</code>来忽略它</p>

<p><code>
let base = 3
let power = 10
var answer = 1
for _ in 1...power {
    answer *= base
}
println("\(base) to the power of \(power) is \(answer)")
// prints "3 to the power of 10 is 59049
</code>
array,dictionary,characters的for-in</p>

<p>```
let names = [“Anna”, “Alex”, “Brian”, “Jack”]
for name in names {
    println(“Hello, (name)!”)
}</p>

<p>let numberOfLegs = [“spider”: 8, “ant”: 6, “cat”: 4]
for (animalName, legCount) in numberOfLegs {
    println(“(animalName)s have (legCount) legs”)
}
// spiders have 8 legs
// ants have 6 legs
// cats have 4 legs</p>

<p>for character in “Hello” {
    println(character)
}
// H
// e
// l
// l
// o
```
#####For-Condition-Increment</p>

<p><code>
for var index = 0; index &lt; 3; ++index {
    println("index is \(index)")
}
// index is 0
// index is 1
// index is 2
</code>
注意for后无需括号
#####条件语句</p>

<p><code>
var temperatureInFahrenheit = 30
if temperatureInFahrenheit &lt;= 32 {
    println("It's very cold. Consider wearing a scarf.")
}
</code>
#####switch语句</p>

<p><code>
let someCharacter: Character = "e"
switch someCharacter {
case "a", "e", "i", "o", "u":
    println("\(someCharacter) is a vowel")
case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
"n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
    println("\(someCharacter) is a consonant")
default:
    println("\(someCharacter) is not a vowel or a consonant")
}
// prints "e is a vowel”
</code>
注意，以下方式不行</p>

<p><code>
let anotherCharacter: Character = "a"
switch anotherCharacter {
case "a":
case "A":
    println("The letter A")
default:
    println("Not the letter A")
}
// this will report a compile-time error
</code>
每个case里必须对应相应的语句
#####Range Matching</p>

<p><code>
let count = 3_000_000_000_000
let countedThings = "stars in the Milky Way"
var naturalCount: String
switch count {
case 0:
    naturalCount = "no"
case 1...3:
    naturalCount = "a few"
case 4...9:
    naturalCount = "several"
case 10...99:
    naturalCount = "tens of"
case 100...999:
    naturalCount = "hundreds of"
case 1000...999_999:
    naturalCount = "thousands of"
default:
    naturalCount = "millions and millions of"
}
println("There are \(naturalCount) \(countedThings).")
// prints "There are millions and millions of stars in the Milky Way.”
</code>
#####Tuples</p>

<p><code>
let somePoint = (1, 1)
switch somePoint {
case (0, 0):
    println("(0, 0) is at the origin")
case (_, 0):
    println("(\(somePoint.0), 0) is on the x-axis")
case (0, _):
    println("(0, \(somePoint.1)) is on the y-axis")
case (-2...2, -2...2):
    println("(\(somePoint.0), \(somePoint.1)) is inside the box")
default:
    println("(\(somePoint.0), \(somePoint.1)) is outside of the box")
}
// prints "(1, 1) is inside the box”
</code>
####Value Bindings</p>

<p><code>
let anotherPoint = (2, 0)
switch anotherPoint {
case (let x, 0):
    println("on the x-axis with an x value of \(x)")
case (0, let y):
    println("on the y-axis with a y value of \(y)")
case let (x, y):
    println("somewhere else at (\(x), \(y))")
}
// prints "on the x-axis with an x value of 2”
</code>
#####where的使用</p>

<p><code>
let yetAnotherPoint = (1, -1)
switch yetAnotherPoint {
case let (x, y) where x == y:
    println("(\(x), \(y)) is on the line x == y")
case let (x, y) where x == -y:
    println("(\(x), \(y)) is on the line x == -y")
case let (x, y):
    println("(\(x), \(y)) is just some arbitrary point")
}
</code>
#####Control Transfer语句
注意FallThrough的使用,来看以下例子</p>

<p><code>
let integerToDescribe = 5
var description = "The number \(integerToDescribe) is"
switch integerToDescribe {
case 2, 3, 5, 7, 11, 13, 17, 19:
    description += " a prime number, and also"
    fallthrough
default:
    description += " an integer."
}
println(description)
// prints "The number 5 is a prime number, and also an integer.”
</code>
####Labeled语句</p>

<p><code>
gameLoop: while square != finalSquare {
    if ++diceRoll == 7 { diceRoll = 1 }
    switch square + diceRoll {
    case finalSquare:
        // diceRoll will move us to the final square, so the game is over
        break gameLoop
    case let newSquare where newSquare &gt; finalSquare:
        // diceRoll will move us beyond the final square, so roll again
        continue gameLoop
    default:
        // this is a valid move, so find out its effect
        square += diceRoll
        square += board[square]
    }
}
println("Game over!")”
</code>
####函数</p>

<p>```
func sayHello(personName: String) -&gt; String {
    let greeting = “Hello, “ + personName + “!”
    return greeting
}</p>

<p>println(sayHello(“Anna”))
// prints “Hello, Anna!”
println(sayHello(“Brian”))
// prints “Hello, Brian!”</p>

<p>func sayHelloWorld() -&gt; String {
    return “hello, world”
}
println(sayHelloWorld())
// prints “hello, world”
```
无返回值的函数</p>

<p><code>
func sayGoodbye(personName: String) {
    println("Goodbye, \(personName)!")
}
sayGoodbye("Dave")
// prints "Goodbye, Dave!"
</code>
注意，实际上，虽然函数没写返回值，但它返回的是一个空的tuple<code>()</code>
#####返回多个值</p>

<p>```
func count(string: String) -&gt; (vowels: Int, consonants: Int, others: Int) {
    var vowels = 0, consonants = 0, others = 0
    for character in string {
        switch String(character).lowercaseString {
        case “a”, “e”, “i”, “o”, “u”:
            ++vowels
        case “b”, “c”, “d”, “f”, “g”, “h”, “j”, “k”, “l”, “m”,
        “n”, “p”, “q”, “r”, “s”, “t”, “v”, “w”, “x”, “y”, “z”:
            ++consonants
        default:
            ++others
        }
    }
    return (vowels, consonants, others)
}</p>

<p>let total = count(“some arbitrary string!”)
println(“(total.vowels) vowels and (total.consonants) consonants”)
// prints “6 vowels and 13 consonants”
```
<code>注意</code>,.vowerls和.consonants依然可用!!!
#####External Parameter Names</p>

<p>```
func someFunction(externalParameterName localParameterName: Int) {
    // function body goes here, and can use localParameterName
    // to refer to the argument value for that parameter
}</p>

<p>func join(string s1: String, toString s2: String, withJoiner joiner: String)
    -&gt; String {
        return s1 + joiner + s2
}</p>

<p>join(string: “hello”, toString: “world”, withJoiner: “, “)
```
#####Shorthand External Parameter Names</p>

<p>```
func containsCharacter(#string: String, #characterToFind: Character) -&gt; Bool {
    for character in string {
        if character == characterToFind {
            return true
        }
    }
    return false
}</p>

<p>let containsAVee = containsCharacter(string: “aardvark”, characterToFind: “v”)
// containsAVee equals true, because “aardvark” contains a “v”
```
####参数的默认值
将有默认值的参数放在最后</p>

<p>```
func join(string s1: String, toString s2: String,
    withJoiner joiner: String = “ “) -&gt; String {
        return s1 + joiner + s2
}</p>

<p>join(string: “hello”, toString: “world”, withJoiner: “-“)
// returns “hello-world”</p>

<p>join(string: “hello”, toString: “world”)
// returns “hello world”
```
#####External Names for Parameters with Default Values
Swift provides an automatic external name for any defaulted parameter you define
故可以像如下调用</p>

<p><code>
join("hello", "world", joiner: "-")
</code>
#####Variadic Parameters</p>

<p><code>
func arithmeticMean(numbers: Double...) -&gt; Double {
    var total: Double = 0
    for number in numbers {
        total += number
    }
    return total / Double(numbers.count)
}
arithmeticMean(1, 2, 3, 4, 5)
// returns 3.0, which is the arithmetic mean of these five numbers
arithmeticMean(3, 8, 19)
// returns 10.0, which is the arithmetic mean of these three numbers
</code>
一个函数至多只能有一个variadic参数，它必须总是在所有参数的最后!</p>

<h5 id="constant--variable-">Constant 和 Variable 参数</h5>
<p>函数的参数默认是constant的,如果试图修改它将导致错误,我们可以在参数前加var来让它可修改</p>

<p><code>
func alignRight(var string: String, count: Int, pad: Character) -&gt; String {
    let amountToPad = count - countElements(string)
    for _ in 1...amountToPad {
        string = pad + string
    }
    return string
}
let originalString = "hello"
let paddedString = alignRight(originalString, 10, "-")
// paddedString is equal to "-----hello"
// originalString is still equal to "hello”
</code>
#####In-Out参数 
来看个demo就明白In-Out是如何使用的了</p>

<p>```
func swapTwoInts(inout a: Int, inout b: Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}</p>

<p>var someInt = 3
var anotherInt = 107
swapTwoInts(&amp;someInt, &amp;anotherInt)
println(“someInt is now (someInt), and anotherInt is now (anotherInt)”)
// prints “someInt is now 107, and anotherInt is now 3”
```
需要注意的是In-out参数不能有默认值,variadic参数不能与inout一起使用,let也不行
#####函数类型
可以像以下这么用</p>

<p><code>
var mathFunction: (Int, Int) -&gt; Int = addTwoInts
println("Result: \(mathFunction(2, 3))")
</code>
同样的函数签名也可以赋值</p>

<p><code>
mathFunction = multiplyTwoInts
println("Result: \(mathFunction(2, 3))")
// prints "Result: 6
</code>
也可以根据Swift的自动推断功能像以下方法使用</p>

<p><code>
let anotherMathFunction = addTwoInts
</code>
#####充当参数的函数类型</p>

<p><code>
func printMathResult(mathFunction: (Int, Int) -&gt; Int, a: Int, b: Int) {
    println("Result: \(mathFunction(a, b))")
}
printMathResult(addTwoInts, 3, 5)
// prints "Result: 8”
</code>
#####作为返回类型的函数类型</p>

<p>```
func stepForward(input: Int) -&gt; Int {
    return input + 1
}
func stepBackward(input: Int) -&gt; Int {
    return input - 1
}</p>

<p>func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int {
    return backwards ? stepBackward : stepForward
}</p>

<p>var currentValue = 3
let moveNearerToZero = chooseStepFunction(currentValue &gt; 0)
// moveNearerToZero now refers to the stepBackward() function</p>

<p>println(“Counting to zero:”)
// Counting to zero:
while currentValue != 0 {
    println(“(currentValue)… “)
    currentValue = moveNearerToZero(currentValue)
}
println(“zero!”)
// 3…
// 2…
// 1…
// zero!
```
#####嵌套函数</p>

<p><code>
func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int {
    func stepForward(input: Int) -&gt; Int { return input + 1 }
    func stepBackward(input: Int) -&gt; Int { return input - 1 }
    return backwards ? stepBackward : stepForward
}
var currentValue = -4
let moveNearerToZero = chooseStepFunction(currentValue &gt; 0)
// moveNearerToZero now refers to the nested stepForward() function
while currentValue != 0 {
    println("\(currentValue)... ")
    currentValue = moveNearerToZero(currentValue)
}
println("zero!")
// -4...
// -3...
// -2...
// -1...
// zero!
</code>
####闭包
类似OC中的block
#####Sort函数
第一种使用方式
<code>
let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
//demo 1
func backwards(s1: String, s2: String) -&gt; Bool {
    return s1 &gt; s2
}
var reversed = sort(names, backwards)
</code>
第二种</p>

<p><code>
reversed = sort(names, { (s1: String, s2: String) -&gt; Bool in
    return s1 &gt; s2
    })
</code>
closure的body和声明用in关键词分隔开来
#####Inferring Type From Context
由于sort的closure是以参数的形式传入函数，所以swift能从推测出闭包的参数类型和返回值类型,所以我们可以按以下方式来写</p>

<p><code>
reversed = sort(names, { s1, s2 in return s1 &gt; s2 } )
</code>
也可以省略return,因为默认是有return这个关键字的</p>

<p><code>
reversed = sort(names, { s1, s2 in  s1 &gt; s2 } )
</code>
#####Shorthand Argument Names
Swift默认为内联的参数名指定了诸如$0, $1等名字
If you use these shorthand argument names within your closure expression, you can omit the closure’s argument list from its definition, and the number and type of the shorthand argument names will be inferred from the expected function type. The in keyword can also be omitted, because the closure expression is made up entirely of its body:</p>

<p><code>
reversed = sort(names, { $0 &gt; $1 } )
</code>
以上的demo中,$0和$1分别指向了闭包的第一个和第二个String参数</p>

<h5 id="operators-function">Operators Function</h5>
<p>There’s actually an even shorter way to write the closure expression above. Swift’s String type defines its string-specific implementation of the greater-than operator (&gt;) as a function that has two parameters of type String, and returns a value of type Bool. This exactly matches the function type needed for the sort function’s second parameter. Therefore, you can simply pass in the greater-than operator, and Swift will infer that you want to use its string-specific implementation:</p>

<p><code>
reversed = sort(names, &gt;)
</code>
#####Trailing Closures
如果你将一个闭包指定为一个函数的最后一个参数，并且这个闭包表达式很长，你可以将它作为一个trailing closure,它是一个写在函数的括号之外的closure</p>

<p>```
func someFunctionThatTakesAClosure(closure: () -&gt; ()) {
    // function body goes here
}</p>

<p>// here’s how you call this function without using a trailing closure:</p>

<p>someFunctionThatTakesAClosure({
    // closure’s body goes here
    })</p>

<p>// here’s how you call this function with a trailing closure instead:</p>

<p>someFunctionThatTakesAClosure() {
    // trailing closure’s body goes here
}
```
<code>注意</code>:如果一个closure expression是一个函数的惟参数,则无需要括号，故以上也可以写成</p>

<p><code>
someFunctionThatTakesAClosure {
    // trailing closure's body goes here
}
</code>
来看一个Array中的map方法的例子，只有一个参数，也是一个closure</p>

<p>```
let digitNames = [
    0: “Zero”, 1: “One”, 2: “Two”,   3: “Three”, 4: “Four”,
    5: “Five”, 6: “Six”, 7: “Seven”, 8: “Eight”, 9: “Nine”
]
let numbers = [16, 58, 510]</p>

<p>let strings = numbers.map {
    (var number) -&gt; String in
    var output = “”
    while number &gt; 0 {
        output = digitNames[number % 10]! + output
        number /= 10
    }
    return output
}
// strings is inferred to be of type String[]
// its value is [“OneSix”, “FiveEight”, “FiveOneZero”]
```
#####Capturing Values
Swift中closure的最简单形式是一个内嵌的函数</p>

<p><code>
func makeIncrementor(forIncrement amount: Int) -&gt; () -&gt; Int {
    var runningTotal = 0
    func incrementor() -&gt; Int {
        runningTotal += amount
        return runningTotal
    }
    return incrementor
}
</code>
because it modifies the runningTotal variable each time it is called, incrementor captures a reference to the current runningTotal variable, and not just a copy of its initial value. Capturing a reference ensures sure that runningTotal does not disappear when the call to makeIncrementor ends, and ensures that runningTotal will continue to be available the next time that the incrementor function is called.
注意以下的调用</p>

<p>```
let incrementByTen = makeIncrementor(forIncrement: 10)</p>

<p>incrementByTen()
// returns a value of 10
incrementByTen()
// returns a value of 20
incrementByTen()
// returns a value of 30
```
If you create another incrementor, it will have its own stored reference to a new, separate runningTotal variable</p>

<p><code>
let incrementBySeven = makeIncrementor(forIncrement: 7)
incrementBySeven()
// returns a value of 7
incrementByTen()
// returns a value of 40
</code>
incrementByTen捕获的变量与incrementBySeven捕获的无关
#####Closure是引用类型
也就是说如果你将closure赋给两个不同的常量或变量，这两个常量或变量将指向一样的closure</p>

<p><code>
let alsoIncrementByTen = incrementByTen
alsoIncrementByTen()
// returns a value of 50
</code>
####Enumerations
Enumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes, such as computed properties to provide additional information about the enumeration’s current value, and instance methods to provide functionality related to the values the enumeration represents. Enumerations can also define initializers to provide an initial member value; can be extended to expand their functionality beyond their original implementation; and can conform to protocols to provide standard functionality.
#####Enumeration Syntax</p>

<p><code>
enum CompassPoint {
    case North
    case South
    case East
    case West
}
</code>
<code>注意</code></p>

<pre><code>	Unlike C and Objective-C, Swift enumeration members are not assigned a default integer value when they are created. In the CompassPoints example above, North, South, East and West do not implicitly equal 0, 1, 2 and 3. Instead, the different enumeration members are fully-fledged values in their own right, with an explicitly-defined type of CompassPoint.
</code></pre>

<p>多个成员值可以出现在同一行上，用<code>,</code>分开</p>

<p><code>
enum Planet {
    case Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune
}
</code>
来看以下例子</p>

<p><code>
var directionToHead = CompassPoint.West
directionToHead = .East
</code>
一旦知道了directionToHead的类型，它的type(CompassPoint)可以省略
#####Switch..case</p>

<p><code>
directionToHead = .South
switch directionToHead {
case .North:
    println("Lots of planets have a north")
case .South:
    println("Watch out for penguins")
case .East:
    println("Where the sun rises")
case .West:
    println("Where the skies are blue")
}
// prints "Watch out for penguins
</code>
#####Associated Values</p>

<p>```
enum Barcode {
    case UPCA(Int, Int, Int)
    case QRCode(String)
}</p>

<p>var productBarcode = Barcode.UPCA(8, 85909_51226, 3)
productBarcode = .QRCode(“ABCDEFGHIJKLMNOP”)</p>

<p>switch productBarcode {
case .UPCA(let numberSystem, let identifier, let check):
    println(“UPC-A with value of (numberSystem), (identifier), (check).”)
case .QRCode(let productCode):
    println(“QR code with value of (productCode).”)
}
// prints “QR code with value of ABCDEFGHIJKLMNOP.”
```
If all of the associated values for a enumeration member are extracted as constants, or if all are extracted as variables, you can place a single var or let annotation before the member name, for brevity:</p>

<p><code>
switch productBarcode {
case let .UPCA(numberSystem, identifier, check):
    println("UPC-A with value of \(numberSystem), \(identifier), \(check).")
case let .QRCode(productCode):
    println("QR code with value of \(productCode).")
}
// prints "QR code with value of ABCDEFGHIJKLMNOP.”
</code>
#####Raw Values</p>

<p><code>
enum ASCIIControlCharacter: Character {
    case Tab = "\t"
    case LineFeed = "\n"
    case CarriageReturn = "\r"
}
</code>
The raw value for a particular enumeration member is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s members, and can be different each time you do so.
注意，如果整型被用来作为raw values,如果其他enumeration member无值，则其他的将会自动增长</p>

<p><code>
enum Planet: Int {
    case Mercury = 1, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune
}
</code>
.venus = 2,…依此类推
用toRaw方法来获取一个enumeration member的rawValue值</p>

<p><code>
let earthsOrder = Planet.Earth.toRaw()
// earthsOrder is 3
</code>
用fromRaw来获取拥有一个raw value的enumberation member</p>

<p><code>
let possiblePlanet = Planet.fromRaw(7)
</code>
注意fromRaw返回的是optional value,所以可以像如下这个写</p>

<p><code>
let positionToFind = 9
if let somePlanet = Planet.fromRaw(positionToFind) {
    switch somePlanet {
    case .Earth:
        println("Mostly harmless")
    default:
        println("Not a safe place for humans")
    }
} else {
    println("There isn't a planet at position \(positionToFind)")
}
// prints "There isn't a planet at position 9”
</code>
####Classes和Structures
Unlike other programming languages, Swift does not require you to create separate interface and implementation files for custom classes and structures. In Swift, you define a class or a structure in a single file, and the external interface to that class or structure is automatically made available for other code to use.
#####二者的比较
共同之处</p>

<ul>
  <li>Define properties to store values</li>
  <li>Define methods to provide functionality</li>
  <li>Define subscripts to provide access to their values using subscript syntax</li>
  <li>Define initializers to set up their initial state</li>
  <li>Be extended to expand their functionality beyond a default implementation</li>
  <li>
    <p>Conform to protocols to provide standard functionality of a certain kind
类有的，而Structure木有的</p>
  </li>
  <li>Inheritance enables one class to inherit the characteristics of another.</li>
  <li>Type casting enables you to check and interpret the type of a class instance at runtime.</li>
  <li>Deinitializers enable an instance of a class to free up any resources it has assigned.</li>
  <li>Reference counting allows more than one reference to a class instance.
<code>注意</code>Structures总是被copies的而不用引用计数
#####语法定义</li>
</ul>

<p><code>
struct Resolution {
    var width = 0
    var height = 0
}
class VideoMode {
    var resolution = Resolution()
    var interlaced = false
    var frameRate = 0.0
    var name: String?
}
</code>
#####Class and Structures Instances
创建对象实例</p>

<p><code>
let someResolution = Resolution()
let someVideoMode = VideoMode()
</code>
#####访问属性
可以层层访问，注意以下</p>

<p><code>
println("The width of someVideoMode is \(someVideoMode.resolution.width)")
// prints "The width of someVideoMode is 0”
</code>
<code>注意</code>
Unlike Objective-C, Swift enables you to set sub-properties of a structure property directly. In the last example above, the width property of the resolution property of someVideoMode is set directly, without your needing to set the entire resolution property to a new value.
#####Memberwise Initializers for Structure Types</p>

<p><code>
let vga = Resolution(width: 640, height: 480)
</code>
不过不像structures,类的对象初始化时没有这样默认的成员初始化
####Structus和Enumerations是值类型
也就是说当它赋给一个变量或专给函数时，它们是copy的
实际上,Swift中的所有基本类型，整型，浮点型，bool型，string，array和dictionary都是值类型，不过幕后都以structure的形式呈现
demo</p>

<p><code>
enum CompassPoint {
    case North, South, East, West
}
var currentDirection = CompassPoint.West
let rememberedDirection = currentDirection
currentDirection = .East
if rememberedDirection == .West {
    println("The remembered direction is still .West")
}
// prints "The remembered direction is still .West”
</code>
####类是引用类型
我们可以判断两个变量是否指向同一个类的对象
可以用<code>===</code>
####选择类或是Structure
structure总是按值传递，class总是按引用传递
####Assignment and Copy Behavior for Collection Types</p>

<ul>
  <li>Assignment and Copy Behavior for Dictionaries 
当你将一个dictionary赋予一个常量或变量，或者将它传入函数时,dictionary就被copied了
如果keys/values是值类型,它们也在赋值或作为参数传入函数时也被copy了，不过如果它们是引用类型的话，只是引用copy了，对象并未被copy，这种copy规则与一个structure的properties一样，如果structure被copy的话</li>
  <li>Assignment and Copy Behavior for Arrays
array的copy规则与dictionary的大大不同!array的copy只发生在你所做的修改会改变array的大小的时候</li>
</ul>

<p>```
var a = [1, 2, 3]
var b = a
var c = a</p>

<p>a[0] = 42
println(a[0])
// 42
println(b[0])
// 42
println(c[0])
// 42</p>

<p>a.append(4)
a[0] = 777
println(a[0])
// 777
println(b[0])
// 42
println(c[0])
// 42
```
####确保array是唯一的</p>

<p>通过对一个array的变量调用unshare方法，你能确保这个这个变量对这个array的唯一性，也就是说如果有多个变量指向同一个array,如果你对其中的某一个变量调用unshare方法，这个array就被copy了,所以这个变量有此array的独立拷贝,不过如果只有一个变量指向此array,则copy不会发生
在以上的例子中,假设我们调用了如下语句</p>

<p><code>
b.unshare()
</code>
则结果如下</p>

<p><code>
b[0] = -105
println(a[0])
// 777
println(b[0])
// -105
println(c[0])
// 42
</code>
#####Checking Whether Two Arrays Share the Same Elements
Check whether two arrays or subarrays share the same storage and elements by comparing them with the identity operators (=== and !==).</p>

<p><code>
if b === c {
    println("b and c still share the same array elements.")
} else {
    println("b and c now refer to two independent sets of array elements.")
}
// prints "b and c now refer to two independent sets of array elements.
</code>
Alternatively, use the identity operators to check whether two subarrays share the same elements. The example below compares two identical subarrays from b and confirms that they refer to the same elements:</p>

<p><code>
if b[0...1] === b[0...1] {
    println("These two subarrays share the same elements.")
} else {
    println("These two subarrays do not share the same elements.")
}
// prints "These two subarrays share the same elements.”
</code>
#####强制array的copy
调用array的copy方法,这个方法只是对array进行<code>浅复制</code>
####Properties
Properties associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures.</p>

<p>Stored and computed properties are usually associated with instances of a particular type. However, properties can also be associated with the type itself. Such properties are known as type properties.</p>

<p>In addition, you can define property observers to monitor changes in a property’s value, which you can respond to with custom actions. Property observers can be added to stored properties you define yourself, and also to properties that a subclass inherits from its superclass.</p>

<h5 id="stored-properties">Stored Properties</h5>

<p><code>
struct FixedLengthRange {
    var firstValue: Int
    let length: Int
}
var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)
// the range represents integer values 0, 1, and 2
rangeOfThreeItems.firstValue = 6
// the range now represents integer values 6, 7, and 8
</code>
#####Stored Properties of Constant Structure Instances
如果你创建了一个structure的instance，并且将这个instance赋予一个常量,你不能通过这个常量修改这个instance的properties,即使它们被声明为variable properties</p>

<p><code>
let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)
// this range represents integer values 0, 1, 2, and 3
rangeOfFourItems.firstValue = 6
// this will report an error, even thought firstValue is a variable property
</code>
这是因为structure是值类型的缘故,如果一个值类型的instance被标记为常量，则它的property也是
不过class与此不同，class照样可修改instance的variable properties，既然它被赋值为一个常量
#####Lazy Stored Properties
A lazy stored property is a property whose initial value is not calculated until the first time it is used. You indicate a lazy stored property by writing the @lazy attribute before its declaration.</p>

<p><code>注意</code>
You must always declare a lazy property as a variable (with the var keyword), because its initial value may not be retrieved until after instance initialization completes. Constant properties must always have a value before initialization completes, and therefore cannot be declared as lazy.</p>

<p>Lazy properties are useful when the initial value for a property is dependent on outside factors whose values are not known until after an instance’s initialization is complete. Lazy properties are also useful when the initial value for a property requires complex or computationally expensive setup that should not be performed unless or until it is needed.</p>

<p>The example below uses a lazy stored property to avoid unnecessary initialization of a complex class. This example defines two classes called DataImporter and DataManager, neither of which is shown in full:</p>

<p>```
class DataImporter {
    /*
    DataImporter is a class to import data from an external file.
    The class is assumed to take a non-trivial amount of time to initialize.
    */
    var fileName = “data.txt”
    // the DataImporter class would provide data importing functionality here
}</p>

<p>class DataManager {
    @lazy var importer = DataImporter()
    var data = String[]()
    // the DataManager class would provide data management functionality here
}</p>

<p>let manager = DataManager()
manager.data += “Some data”
manager.data += “Some more data”
// the DataImporter instance for the importer property has not yet been created
```
只有在importer的property首次被访问的时候，importer才被创建</p>

<h4 id="computed-properties">Computed Properties</h4>
<p>主要用来计算，而非存储，主要提供了一个getter和一个可选的setter</p>

<p>```
struct Point {
    var x = 0.0, y = 0.0
}</p>

<p>struct Size {
    var width = 0.0, height = 0.0
}
struct Rect {
    var origin = Point()
    var size = Size()
    var center: Point {
    get {
        let centerX = origin.x + (size.width / 2)
        let centerY = origin.y + (size.height / 2)
        return Point(x: centerX, y: centerY)
    }
    set(newCenter) {
        origin.x = newCenter.x - (size.width / 2)
        origin.y = newCenter.y - (size.height / 2)
    }
    }
}
var square = Rect(origin: Point(x: 0.0, y: 0.0),
    size: Size(width: 10.0, height: 10.0))
let initialSquareCenter = square.center
square.center = Point(x: 15.0, y: 15.0)
println(“square.origin is now at ((square.origin.x), (square.origin.y))”)
// prints “square.origin is now at (10.0, 10.0)
```
#####Shorthand Setter Declaration
如果一个computed property的setter并不为新值定义一个名字,则新值的默认名为newValue</p>

<p><code>
struct AlternativeRect {
    var origin = Point()
    var size = Size()
    var center: Point {
    get {
        let centerX = origin.x + (size.width / 2)
        let centerY = origin.y + (size.height / 2)
        return Point(x: centerX, y: centerY)
    }
    set {
        origin.x = newValue.x - (size.width / 2)
        origin.y = newValue.y - (size.height / 2)
    }
    }
}
</code>只读的Computed Properties
一个computed property如果只有一个getter，而没有setter，则它被称为read-only computed property,它只能返回一个值(通过.)而不能赋值</p>

<p><code>
struct Cuboid {
    var width = 0.0, height = 0.0, depth = 0.0
    var volume: Double {
    return width * height * depth
    }
}
let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)
println("the volume of fourByFiveByTwo is \(fourByFiveByTwo.volume)")
// prints "the volume of fourByFiveByTwo is 40.0”
</code></p>

<p><code>注意</code>你必须用var来声明computed properties(即使是只读的也一样),let只用于constant properties</p>

<p>#####Property Observer
Property observers observe and respond to changes in a property’s value. Property observers are called every time a property’s value is set, even if the new value is the same as the property’s current value.</p>

<p>You can add property observers to any stored properties you define, apart from lazy stored properties. You can also add property observers to any inherited property (whether stored or computed) by overriding the property within a subclass</p>

<p><code>注意</code>
You don’t need to define property observers for non-overridden computed properties, because you can observe and respond to changes to their value from directly within the computed property’s setter.</p>

<p>you have the option to define either or both of these observers on a property:</p>

<ul>
  <li>willSet is called just before the value is stored.</li>
  <li>didSet is called immediately after the new value is stored.</li>
</ul>

<p>If you implement a willSet observer, it is passed the new property value as a constant parameter. You can specify a name for this parameter as part of your willSet implementation. If you choose not to write the parameter name and parentheses within your implementation, the parameter will still be made available with a default parameter name of newValue.</p>

<p>Similarly, if you implement a didSet observer, it will be passed a constant parameter containing the old property value. You can name the parameter if you wish, or use the default parameter name of oldValue.</p>

<p><code>注意</code>
willSet and didSet observers are not called when a property is first initialized. They are only called when the property’s value is set outside of an initialization context.</p>

<p><code>
class StepCounter {
    var totalSteps: Int = 0 {
    willSet(newTotalSteps) {
        println("About to set totalSteps to \(newTotalSteps)")
    }
    didSet {
        if totalSteps &gt; oldValue  {
            println("Added \(totalSteps - oldValue) steps")
        }
    }
    }
}
let stepCounter = StepCounter()
stepCounter.totalSteps = 200
// About to set totalSteps to 200
// Added 200 steps
stepCounter.totalSteps = 360
// About to set totalSteps to 360
// Added 160 steps
stepCounter.totalSteps = 896
// About to set totalSteps to 896
// Added 536 steps
</code>
<code>注意</code>
If you assign a value to a property within its own didSet observer, the new value that you assign will replace the one that was just set</p>

<h4 id="section-1">全局和局部变量</h4>
<p>The capabilities described above for computing and observing properties are also available to global variables and local variables. </p>

<p>The global and local variables you have encountered in previous chapters have all been stored variables. Stored variables, like stored properties, provide storage for a value of a certain type and allow that value to be set and retrieved.</p>

<p>However, you can also define computed variables and define observers for stored variables, in either a global or local scope. Computed variables calculate rather than store a value, and are written in the same way as computed properties.</p>

<p><code>注意</code>
Global constants and variables are always computed lazily, in a similar manner to Lazy Stored Properties. Unlike lazy stored properties, global constants and variables do not need to be marked with the @lazy attribute.</p>

<p>Local constants and variables are never computed lazily.
####Type Properties
For value types (that is, structures and enumerations), you can define stored and computed type properties. For classes, you can define computed type properties only.</p>

<p>Stored type properties for value types can be variables or constants. Computed type properties are always declared as variable properties, in the same way as 
computed instance properties.</p>

<p><code>注意</code>
Unlike stored instance properties, you must always give stored type properties a default value. This is because the type itself does not have an initializer that can assign a value to a stored type property at initialization time.</p>

<h5 id="type-property">Type property语法</h5>

<p><code>
struct SomeStructure {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
    // return an Int value here
    }
}
enum SomeEnumeration {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
    // return an Int value here
    }
}
class SomeClass {
    class var computedTypeProperty: Int {
    // return an Int value here
    }
}
</code>
#####Querying and Setting Type Properties</p>

<p>```
println(SomeClass.computedTypeProperty)
// prints “42”</p>

<p>println(SomeStructure.storedTypeProperty)
// prints “Some value.”
SomeStructure.storedTypeProperty = “Another value.”
println(SomeStructure.storedTypeProperty)
// prints “Another value.”
```
再来看一个例子</p>

<p><code>
struct AudioChannel {
    static let thresholdLevel = 10
    static var maxInputLevelForAllChannels = 0
    var currentLevel: Int = 0 {
    didSet {
        if currentLevel &gt; AudioChannel.thresholdLevel {
            // cap the new audio level to the threshold level
            currentLevel = AudioChannel.thresholdLevel
        }
        if currentLevel &gt; AudioChannel.maxInputLevelForAllChannels {
            // store this as the new overall maximum input level
            AudioChannel.maxInputLevelForAllChannels = currentLevel
        }
    }
    }
}
</code>
<code>注意</code>
In the first of these two checks, the didSet observer sets currentLevel to a different value. This does not, however, cause the observer to be called again.
####方法
与C不同,Swift中的Structure和enumerations能定义方法
#####Instance Methods</p>

<p>```
class Counter {
    var count = 0
    func increment() {
        count++
    }
    func incrementBy(amount: Int) {
        count += amount
    }
    func reset() {
        count = 0
    }
}</p>

<p>let counter = Counter()
// the initial counter value is 0
counter.increment()
// the counter’s value is now 1
counter.incrementBy(5)
// the counter’s value is now 6
counter.reset()
// the counter’s value is now 0
```
#####Local and External Parameter Names for Methods
Function parameters can have both a local name (for use within the function’s body) and an external name (for use when calling the function)</p>

<p>The same is true for method parameters, because methods are just functions that are associated with a type. However, the default behavior of local names and external names is <code>different</code> for functions and methods.</p>

<p>Specifically, Swift gives the first parameter name in a method a local parameter name by default, and gives the second and subsequent parameter names both local and external parameter names by default. </p>

<p>```
class Counter {
    var count: Int = 0
    func incrementBy(amount: Int, numberOfTimes: Int) {
        count += amount * numberOfTimes
    }
}</p>

<p>let counter = Counter()
counter.incrementBy(5, numberOfTimes: 3)
// counter value is now 15
```
This default behavior effectively treats the method as if you had written a hash symbol (#) before the numberOfTimes parameter:</p>

<p><code>
func incrementBy(amount: Int, #numberOfTimes: Int) {
    count += amount * numberOfTimes
}
</code>
#####Modifying External Parameter Name Behavior for Methods
Sometimes it’s useful to provide an external parameter name for a method’s first parameter, even though this is not the default behavior. You can either add an explicit external name yourself, or you can prefix the first parameter’s name with a hash symbol to use the local name as an external name too.</p>

<p>Conversely, if you do not want to provide an external name for the second or subsequent parameter of a method, override the default behavior by using an underscore character (_) as an explicit external parameter name for that parameter.</p>

<h5 id="the-self-property">The self Property</h5>
<p>以上的可以改成以下的</p>

<p><code>
func increment() {
    self.count++
}
</code>
Swift assumes that you are referring to a property or method of the current instance whenever you use a known property or method name within a method.</p>

<p>The main exception to this rule occurs when a parameter name for an instance method has the same name as a property of that instance. In this situation, the parameter name takes precedence, and it becomes necessary to refer to the property in a more qualified way. You use the implicit self property to distinguish between the parameter name and the property name.</p>

<p><code>
struct Point {
    var x = 0.0, y = 0.0
    func isToTheRightOfX(x: Double) -&gt; Bool {
        return self.x &gt; x
    }
}
let somePoint = Point(x: 4.0, y: 5.0)
if somePoint.isToTheRightOfX(1.0) {
    println("This point is to the right of the line where x == 1.0")
}
// prints "This point is to the right of the line where x == 1.0”
</code>
####Modifying Value Types from Within Instance Methods
Structures 和 enumerations都是值类型,值类型的属性是不能在它的instance方法里修改的,不过你可以在方法名前加mutating来对property进行修改</p>

<p><code>
struct Point {
    var x = 0.0, y = 0.0
    mutating func moveByX(deltaX: Double, y deltaY: Double) {
        x += deltaX
        y += deltaY
    }
}
var somePoint = Point(x: 1.0, y: 1.0)
somePoint.moveByX(2.0, y: 3.0)
println("The point is now at (\(somePoint.x), \(somePoint.y))")
// prints "The point is now at (3.0, 4.0)”
</code>
The method can also assign a completely new instance to its implicit self property, and this new instance will replace the existing one when the method ends.</p>

<p><code>
struct Point {
    var x = 0.0, y = 0.0
    mutating func moveByX(deltaX: Double, y deltaY: Double) {
        self = Point(x: x + deltaX, y: y + deltaY)
    }
}
</code>
Mutating methods for enumerations can set the implicit self parameter to be a different member from the same enumeration:</p>

<p><code>
enum TriStateSwitch {
    case Off, Low, High
    mutating func next() {
        switch self {
        case Off:
            self = Low
        case Low:
            self = High
        case High:
            self = Off
        }
    }
}
var ovenLight = TriStateSwitch.Low
ovenLight.next()
// ovenLight is now equal to .High
ovenLight.next()
// ovenLight is now equal to .Off
</code>
####Type Methods
 对class,在方法的func关键字前加class,对structure和enumeration,在func前加static</p>

<p><code>注意</code>:In Objective-C, you can define type-level methods only for Objective-C classes. In Swift, you can define type-level methods for all classes, structures, and enumerations. Each type method is explicitly scoped to the type it supports.</p>

<p>```
//对类而言
class SomeClass {
    class func someTypeMethod() {
        // type method implementation goes here
    }
}
SomeClass.someTypeMethod()
//对structure和enumeration而言</p>

<p>```
在一个type方法的方法体里,self指的是type本身</p>

<p><code>
struct LevelTracker {
    static var highestUnlockedLevel = 1
    static func unlockLevel(level: Int) {
        if level &gt; highestUnlockedLevel { highestUnlockedLevel = level }
    }
    static func levelIsUnlocked(level: Int) -&gt; Bool {
        return level &lt;= highestUnlockedLevel
    }
    var currentLevel = 1
    mutating func advanceToLevel(level: Int) -&gt; Bool {
        if LevelTracker.levelIsUnlocked(level) {
            currentLevel = level
            return true
        } else {
            return false
        }
    }
}
</code>
与Player类的结合使用</p>

<p><code>
class Player {
    var tracker = LevelTracker()
    let playerName: String
    func completedLevel(level: Int) {
        LevelTracker.unlockLevel(level + 1)
        tracker.advanceToLevel(level + 1)
    }
    init(name: String) {
        playerName = name
    }
}
</code>
####Subscripts
You can define multiple subscripts for a single type, and the appropriate subscript overload to use is selected based on the type of index value you pass to the subscript. Subscripts are not limited to a single dimension, and you can define subscripts with multiple input parameters to suit your custom type’s needs.
#####Subscript Syntax
不像其他的instance方法,subscripts可以是读写的或是只读的</p>

<p><code>
subscript(index: Int) -&gt; Int {
    get {
        // return an appropriate subscript value here
    }
    set(newValue) {
        // perform a suitable setting action here
    }
}
</code>
对于只读的computed property,对只读的subscripts,我们可以去掉get关键字</p>

<p>```
subscript(index: Int) -&gt; Int {
    // return an appropriate subscript value here
}</p>

<p>struct TimesTable {
    let multiplier: Int
    subscript(index: Int) -&gt; Int {
        return multiplier * index
    }
}
let threeTimesTable = TimesTable(multiplier: 3)
println(“six times three is (threeTimesTable[6])”)
// prints “six times three is 18”
```
#####Subscript Options
Subscripts能接收任意数量的参数，并且这些参数可以是任意类型的
Subscripts能接收variable 参数 和 variadic 参数,但不能使用in-out参数或是为参数提供默认值</p>

<p>A class or structure can provide as many subscript implementations as it needs, and the appropriate subscript to be used will be inferred based on the types of the value or values that are contained within the subscript braces at the point that the subscript is used. This definition of multiple subscripts is known as subscript overloading.</p>

<p>```
struct Matrix {
    let rows: Int, columns: Int
    var grid: Double[]
    init(rows: Int, columns: Int) {
        self.rows = rows
        self.columns = columns
        grid = Array(count: rows * columns, repeatedValue: 0.0)
    }
    func indexIsValidForRow(row: Int, column: Int) -&gt; Bool {
        return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns
    }
    subscript(row: Int, column: Int) -&gt; Double {
        get {
            assert(indexIsValidForRow(row, column: column), “Index out of range”)
            return grid[(row * columns) + column]
        }
        set {
            assert(indexIsValidForRow(row, column: column), “Index out of range”)
            grid[(row * columns) + column] = newValue
        }
     }
}</p>

<p>var matrix = Matrix(rows: 2, columns: 2)</p>

<p>matrix[0, 1] = 1.5
matrix[1, 0] = 3.2</p>

<p>let someValue = matrix[2, 2]
// this triggers an assert, because [2, 2] is outside of the matrix bounds</p>

<p>```
####继承
只有类能继承
Classes can also add property observers to inherited properties in order to be notified when the value of a property changes. Property observers can be added to any property, regardless of whether it was originally defined as a stored or computed property.</p>

<p>```
class Vehicle {
    var numberOfWheels: Int
    var maxPassengers: Int
    func description() -&gt; String {
        return “(numberOfWheels) wheels; up to (maxPassengers) passengers”
    }
    init() {
        numberOfWheels = 0
        maxPassengers = 1
    }
}</p>

<p>let someVehicle = Vehicle()</p>

<p>```
#####Subclassing</p>

<p>```
class Bicycle: Vehicle {
    init() {
        super.init()
        numberOfWheels = 2
    }
}</p>

<p>let bicycle = Bicycle()
println(“Bicycle: (bicycle.description())”)
// Bicycle: 2 wheels; up to 1 passengers
```
The Bicycle class also defines an initializer to set up its tailored characteristics. The initializer for Bicycle calls super.init(), the initializer for the Bicycle class’s superclass, Vehicle, and ensures that all of the inherited properties are initialized by Vehicle before Bicycle tries to modify them.</p>

<p><code>注意</code>:initializers are not inherited by default in Swift</p>

<h4 id="overriding">Overriding</h4>
<p>A subclass can provide its own custom implementation of an instance method, class method, instance property, or subscript that it would otherwise inherit from a superclass. This is known as overriding.
子类重写父类的方法必须加override</p>

<p>```
class Car: Vehicle {
    var speed: Double = 0.0
    init() {
        super.init()
        maxPassengers = 5
        numberOfWheels = 4
    }
    override func description() -&gt; String {
        return super.description() + “; “
            + “traveling at (speed) mph”
    }
}</p>

<p>let car = Car()
println(“Car: (car.description())”)
// Car: 4 wheels; up to 5 passengers; traveling at 0.0 mph
```</p>

<h5 id="overriding-properties">Overriding Properties</h5>
<p>You can override an inherited instance or class property to provide your own custom getter and setter for that property, or to add property observers to enable the overriding property to observe when the underlying property value changes</p>

<p>You can present an inherited read-only property as a read-write property by providing both a getter and a setter in your subclass property override. You cannot, however, present an inherited read-write property as a read-only property.</p>

<p>You can present an inherited read-only property as a read-write property by providing both a getter and a setter in your subclass property override. You cannot, however, present an inherited read-write property as a read-only property.</p>

<p><code>注意</code>
If you provide a setter as part of a property override, you must also provide a getter for that override. If you don’t want to modify the inherited property’s value within the overriding getter, you can simply pass through the inherited value by returning super.someProperty from the getter, as in the SpeedLimitedCar example below.</p>

<p>```
class SpeedLimitedCar: Car {
    override var speed: Double  {
    get {
        return super.speed
    }
    set {
        super.speed = min(newValue, 40.0)
    }
    }
}</p>

<p>let limitedCar = SpeedLimitedCar()
limitedCar.speed = 60.0
println(“SpeedLimitedCar: (limitedCar.description())”)
// SpeedLimitedCar: 4 wheels; up to 5 passengers; traveling at 40.0 mph
```
#####Overriding Property Observers
You can use property overriding to add property observers to an inherited property. This enables you to be notified when the value of the inherited property changes, regardless of how that property was originally implemented</p>

<p><code>注意</code></p>

<p>You cannot add property observers to inherited constant stored properties or inherited read-only computed properties. The value of these properties cannot be set, and so it is not appropriate to provide a willSet or didSet implementation as part of an override.</p>

<p>Note also that you cannot provide both an overriding setter and an overriding property observer. If you want to observe changes to a property’s value, and you are already providing a custom setter for that property, you can simply observe any value changes from within the custom setter</p>

<p>```
class AutomaticCar: Car {
    var gear = 1
    override var speed: Double {
    didSet {
        gear = Int(speed / 10.0) + 1
    }
    }
    override func description() -&gt; String {
        return super.description() + “ in gear (gear)”
    }
}</p>

<p>let automatic = AutomaticCar()
automatic.speed = 35.0
println(“AutomaticCar: (automatic.description())”)
// AutomaticCar: 4 wheels; up to 5 passengers; traveling at 35.0 mph in gear 4
```
#####Preventing Overrides
我们可以在方法，属性或subscript前加@final来阻止它们被继承</p>

<p>Methods, properties or subscripts that you add to a class in an extension can also be marked as final within the extension’s definition.</p>

<p>你也可以用@final来阻止类被继承
####初始化
#####Setting Initial Values for Stored Properties
Classes and structures must set all of their stored properties to an appropriate initial value by the time an instance of that class or structure is created. Stored properties cannot be left in an indeterminate state.</p>

<p>我们可以在initializer内为一个stored property设置一个初始值,或在它的定义中为其指定一个默认值
Stored properties cannot be left in an indeterminate state.</p>

<p><code>注意</code>
When you assign a default value to a stored property, or set its initial value within an initializer, the value of that property is set directly, without calling any property observers.
#####Initializers</p>

<p><code>
struct Fahrenheit {
    var temperature: Double
    init() {
        temperature = 32.0
    }
}
var f = Fahrenheit()
println("The default temperature is \(f.temperature)° Fahrenheit")
// prints "The default temperature is 32.0° Fahrenheit"
</code></p>

<h5 id="default-property-values">Default Property Values</h5>
<p><code>注意</code>
If a property always takes the same initial value, provide a default value rather than setting a value within an initializer. The end result is the same, but the default value ties the property’s initialization more closely to its declaration. It makes for shorter, clearer initializers and <code>enables you to infer the type of the property from its default value</code>. The default value also makes it easier for you to take advantage of default initializers and initializer inheritance, as described later in this chapter.</p>

<p>之前的demo可以换成以下形式</p>

<p><code>
struct Fahrenheit {
    var temperature = 32.0
}
</code>
#####Customizing Initialization
You can customize the initialization process with input parameters and optional property types,or by modifying constant properties during initialization</p>

<ul>
  <li>Initialization Parameters
You can provide initialization parameters as part of an initializer’s definition, to define the types and names of values that customize the initialization process.</li>
</ul>

<p><code>
struct Celsius {
    var temperatureInCelsius: Double = 0.0
    init(fromFahrenheit fahrenheit: Double) {
        temperatureInCelsius = (fahrenheit - 32.0) / 1.8
    }
    init(fromKelvin kelvin: Double) {
        temperatureInCelsius = kelvin - 273.15
    }
}
let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)
// boilingPointOfWater.temperatureInCelsius is 100.0
let freezingPointOfWater = Celsius(fromKelvin: 273.15)
// freezingPointOfWater.temperatureInCelsius is 0.0
</code>
* Local and External Parameter Names
As with function and method parameters, initialization parameters can have both a local name for use within the initializer’s body and an external name for use when calling the initializer.</p>

<p>However, initializers do not have an identifying function name before their parentheses in the way that functions and methods do. Therefore, the names and types of an initializer’s parameters play a particularly important role in identifying which initializer should be called. Because of this,<code>Swift provides an automatic external name for every parameter in an initializer if you don’t provide an external name yourself</code>.</p>

<p><code>注意</code>
If you do not want to provide an external name for a parameter in an initializer, provide an underscore (_) as an explicit external name for that parameter to override the default behavior described above.</p>

<p><code>
struct Color {
    let red = 0.0, green = 0.0, blue = 0.0
    init(red: Double, green: Double, blue: Double) {
        self.red   = red
        self.green = green
        self.blue  = blue
    }
}
let magenta = Color(red: 1.0, green: 0.0, blue: 1.0)
</code>
<code>注意</code>
It is not possible to call this initializer without using the external names. External names must always be used in an intializer if they are defined, and omitting them is a compile-time error:</p>

<p><code>
let veryGreen = Color(0.0, 1.0, 0.0)
// this reports a compile-time error - external names are required
</code>
#####Optional Property Types
Properties of optional type are automatically initialized with a value of nil, indicating that the property is deliberately intended to have “no value yet” during initialization.</p>

<p><code>
class SurveyQuestion {
    var text: String
    var response: String?
    init(text: String) {
        self.text = text
    }
    func ask() {
        println(text)
    }
}
let cheeseQuestion = SurveyQuestion(text: "Do you like cheese?")
cheeseQuestion.ask()
// prints "Do you like cheese?"
cheeseQuestion.response = "Yes, I do like cheese.”
</code>
#####Modifying Constant Properties During Initialization
You can modify the value of a constant property at any point during initialization, as long as it is set to a definite value by the time initialization finishes.</p>

<p><code>注意</code>
For class instances, a constant property can only be modified during initialization by the class that introduces it. It cannot be modified by a subclass.</p>

<p><code>
class SurveyQuestion {
    let text: String
    var response: String?
    init(text: String) {
        self.text = text
    }
    func ask() {
        println(text)
    }
}
let beetsQuestion = SurveyQuestion(text: "How about beets?")
beetsQuestion.ask()
// prints "How about beets?"
beetsQuestion.response = "I also like beets. (But not with cheese.)”
</code>
#####Default Initializers
Swift provides a default initializer for any structure or base class that provides default values for all of its properties and does not provide at least one initializer itself. The default initializer simply creates a new instance with all of its properties set to their default values.</p>

<p><code>
class ShoppingListItem {
    var name: String?
    var quantity = 1
    var purchased = false
}
var item = ShoppingListItem()
</code>
#####Memberwise Initializers for Structure Types
In addition to the default initializers mentioned above, structure types automatically receive a memberwise initializer if they provide default values for all of their stored properties and do not define any of their own custom initializers.</p>

<p><code>
struct Size {
    var width = 0.0, height = 0.0
}
let twoByTwo = Size(width: 2.0, height: 2.0)
</code>
#####Initializer Delegation for Value Types
Initializers can call other initializers to perform part of an instance’s initialization. This process, known as initializer delegation, avoids duplicating code across multiple initializers.</p>

<p>对于值类型而言,它们的initializer delegation相对比较简单,because they can only delegate to another initializer that they provide themselves.
而类则可以继承,This means that classes have additional responsibilities for ensuring that all stored properties they inherit are assigned a suitable value during initialization.</p>

<p>For value types, you use self.init to refer to other initializers from the same value type when writing your own custom initializers. You can only call self.init from within an initializer.</p>

<p>Note that if you define a custom initializer for a value type, you will no longer have access to the default initializer (or the memberwise structure initializer, if it is a structure) for that type. </p>

<p><code>注意</code>
If you want your custom value type to be initializable with the default initializer and memberwise initializer, and also with your own custom initializers, write your custom initializers in an extension rather than as part of the value type’s original implementation.</p>

<p>```
struct Size {
    var width = 0.0, height = 0.0
}
struct Point {
    var x = 0.0, y = 0.0
}</p>

<p>struct Rect {
    var origin = Point()
    var size = Size()
    init() {}
    init(origin: Point, size: Size) {
        self.origin = origin
        self.size = size
    }
    init(center: Point, size: Size) {
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x: originX, y: originY), size: size)
    }
}</p>

<p>let basicRect = Rect()
// basicRect’s origin is (0.0, 0.0) and its size is (0.0, 0.0)</p>

<p>let originRect = Rect(origin: Point(x: 2.0, y: 2.0),
    size: Size(width: 5.0, height: 5.0))
// originRect’s origin is (2.0, 2.0) and its size is (5.0, 5.0)</p>

<p>let centerRect = Rect(center: Point(x: 4.0, y: 4.0),
    size: Size(width: 3.0, height: 3.0))
// centerRect’s origin is (2.5, 2.5) and its size is (3.0, 3.0)
```
The init(center:size:) initializer could have assigned the new values of origin and size to the appropriate properties itself. However, it is more convenient (and clearer in intent) for the init(center:size:) initializer to take advantage of an existing initializer that already provides exactly that functionality.</p>

<h4 id="section-2">类继承和初始化</h4>
<p>All of a class’s stored properties—including any properties the class inherits from its superclass—must be assigned an initial value during initialization.</p>

<p>Swift defines two kinds of initializers for class types to help ensure all stored properties receive an initial value. These are known as designated initializers and convenience initializers</p>

<h5 id="designated-initializers-and-convenience-initializers">Designated Initializers and Convenience Initializers</h5>
<p>Designated initializers are the primary initializers for a class. A designated initializer fully initializes all properties introduced by that class and calls an appropriate superclass initializer to continue the initialization process up the superclass chain.</p>

<p>Classes tend to have very few designated initializers, and it is quite common for a class to have only one. Designated initializers are “funnel” points through which initialization takes place, and through which the initialization process continues up the superclass chain.</p>

<p>Every class must have at least one designated initializer. In some cases, this requirement is satisfied by inheriting one or more designated initializers from a superclass</p>

<p>Convenience initializers are secondary, supporting initializers for a class. You can define a convenience initializer to call a designated initializer from the same class as the convenience initializer with some of the designated initializer’s parameters set to default values. You can also define a convenience initializer to create an instance of that class for a specific use case or input value type.</p>

<p>You do not have to provide convenience initializers if your class does not require them. Create convenience initializers whenever a shortcut to a common initialization pattern will save time or make initialization of the class clearer in intent</p>

<h5 id="initializer-chaining">Initializer Chaining</h5>
<p>To simplify the relationships between designated and convenience initializers, Swift applies the following three rules for delegation calls between initializers:</p>

<ul>
  <li>规则1
Designated initializers must call a designated initializer from their immediate superclass.</li>
  <li>规则2
Convenience initializers must call another initializer available in the same class.</li>
  <li>规则3
Convenience initializers must ultimately end up calling a designated initializer.</li>
</ul>

<p>A simple way to remember this is:</p>

<ul>
  <li>Designated initializers must always delegate up.</li>
  <li>Convenience initializers must always delegate across.
关系可以用以下两张图表示
<img src="/images/2014/8/initialize.png">
<img src="/images/2014/8/complex_initialize.png"></li>
</ul>

<h5 id="two-phase-initialization">Two-Phase Initialization</h5>
<p>Class initialization in Swift is a two-phase process. In the first phase, each stored property is assigned an initial value by the class that introduced it. Once the initial state for every stored property has been determined, the second phase begins, and each class is given the opportunity to customize its stored properties further before the new instance is considered ready for use.</p>

<p>Two-phase initialization prevents property values from being accessed before they are initialized, and prevents property values from being set to a different value by another initializer unexpectedly.</p>

<p>Swift’s compiler performs four helpful safety-checks to make sure that two-phase initialization is completed without error:</p>

<ul>
  <li>
    <p>Safety check 1
A designated initializer must ensure that all of the properties introduced by its class are initialized before it delegates up to a superclass initializer.</p>
  </li>
  <li>Safety check 2
A designated initializer must delegate up to a superclass initializer before assigning a value to an inherited property. If it doesn’t, the new value the designated initializer assigns will be overwritten by the superclass as part of its own initialization.</li>
  <li>Safety check 3
A convenience initializer must delegate to another initializer before assigning a value to any property (including properties defined by the same class). If it doesn’t, the new value the convenience initializer assigns will be overwritten by its own class’s designated initializer.</li>
  <li>Safety check 4
An initializer cannot call any instance methods, read the values of any instance properties, or refer to self as a value until after the first phase of initialization is complete.</li>
</ul>

<p>The class instance is not fully valid until the first phase ends. Properties can only be accessed, and methods can only be called, once the class instance is known to be valid at the end of the first phase.</p>

<p>Here’s how two-phase initialization plays out, based on the four safety checks above:</p>

<ol>
  <li>Phase 1
    <ul>
      <li>A designated or convenience initializer is called on a class.</li>
      <li>Memory for a new instance of that class is allocated. The memory is not yet initialized.</li>
      <li>A designated initializer for that class confirms that all stored properties introduced by that class have a value. The memory for these stored properties is now initialized.</li>
      <li>The designated initializer hands off to a superclass initializer to perform the same task for its own stored properties.</li>
      <li>This continues up the class inheritance chain until the top of the chain is reached.</li>
      <li>Once the top of the chain is reached, and the final class in the chain has ensured that all of its stored properties have a value, the instance’s memory is considered to be fully initialized, and phase 1 is complete.</li>
    </ul>
  </li>
  <li>Phase 2
    <ul>
      <li>Working back down from the top of the chain, each designated initializer in the chain has the option to customize the instance further. Initializers are now able to access self and can modify its properties, call its instance methods, and so on.</li>
      <li>Finally, any convenience initializers in the chain have the option to customize the instance and to work with self.
####Initializer Inheritance and Overriding
Unlike subclasses in Objective-C, Swift subclasses do not not inherit their superclass initializers by default.</li>
    </ul>
  </li>
</ol>

<p>If you want your custom subclass to present one or more of the same initializers as its superclass—perhaps to perform some customization during initialization—you can provide an overriding implementation of the same initializer within your custom subclass.</p>

<p>If the initializer you are overriding is a designated initializer, you can override its implementation in your subclass and call the superclass version of the initializer from within your overriding version.</p>

<p>If the initializer you are overriding is a convenience initializer, your override must call another designated initializer from its own subclass</p>

<p><code>注意</code></p>

<pre><code>Unlike methods, properties, and subscripts, you do not need to write the override keyword when overriding an initializer.
</code></pre>

<h5 id="automatic-initializer-inheritance">Automatic Initializer Inheritance</h5>
<p>Subclasses do not not inherit their superclass initializers by default. However, superclass initializers are automatically inherited if certain conditions are met. In practice, this means that you do not need to write initializer overrides in many common scenarios, and can inherit your superclass initializers with minimal effort whenever it is safe to do so.</p>

<p>Assuming that you provide default values for <code>any</code> new properties you introduce in a subclass, the following two rules apply:</p>

<ul>
  <li>
    <p>Rule 1</p>

    <p>If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers.</p>
  </li>
  <li>
    <p>Rule 2</p>

    <p>If your subclass provides an implementation of <code>all</code> of its superclass designated initializers—either by inheriting them as per rule 1, or by providing a custom implementation as part of its definition—then it automatically inherits all of the superclass convenience initializers.</p>
  </li>
</ul>

<p>These rules apply even if your subclass adds further convenience initializers.</p>

<p><code>注意</code></p>

<pre><code>A subclass can implement a superclass designated initializer as a subclass convenience initializer as part of satisfying rule 2.
</code></pre>

<h5 id="syntax-for-designated-and-convenience-initializers">Syntax for Designated and Convenience Initializers</h5>
<ul>
  <li>Designated initializers </li>
</ul>

<p><code>
	init(parameters) {
    	statements
	}
</code>
* Convenience initializers</p>

<p><code>
	convenience init(parameters) {
	    statements
	}
</code>
#####Designated and Convenience Initializers in Action
以下显示了designated initializers, convenience initializers, and automatic initializer inheritance in action,定义了三个类Food,RecipeIngredient,ShoppingListItem的继承关系</p>

<p>```
//Food
class Food {
    var name: String
    init(name: String) {
        self.name = name
    }
    convenience init() {
        self.init(name: “[Unnamed]”)
    }
}</p>

<p>//Designated initializer
let namedMeat = Food(name: “Bacon”)
// namedMeat’s name is “Bacon”</p>

<p>let mysteryMeat = Food()
```
Food的initializer chain图</p>

<p><img src="/images/2014/8/initialize.png"></p>

<p>```
class RecipeIngredient: Food {
    var quantity: Int
    init(name: String, quantity: Int) {
        self.quantity = quantity
        super.init(name: name)
    }
    convenience init(name: String) {
        self.init(name: name, quantity: 1)
    }
}</p>

<p>let oneMysteryItem = RecipeIngredient()
let oneBacon = RecipeIngredient(name: “Bacon”)
let sixEggs = RecipeIngredient(name: “Eggs”, quantity: 6)</p>

<p>```
图示如下</p>

<p><img src="/images/2014/8/recipeIngredient.png"></p>

<p><code>
class ShoppingListItem: RecipeIngredient {
    var purchased = false
    var description: String {
    var output = "\(quantity) x \(name.lowercaseString)"
        output += purchased ? " ✔" : " ✘"
        return output
    }
}
</code>
以上三个类的继承图</p>

<p><img src="/images/2014/8/foodchaining.png">
You can use all three of the inherited initializers to create a new ShoppingListItem instance:</p>

<p><code>
“var breakfastList = [
    ShoppingListItem(),
    ShoppingListItem(name: "Bacon"),
    ShoppingListItem(name: "Eggs", quantity: 6),
]
breakfastList[0].name = "Orange juice"
breakfastList[0].purchased = true
for item in breakfastList {
    println(item.description)
}
// 1 x orange juice ✔
// 1 x bacon ✘
// 6 x eggs ✘”
</code>
#####用closure或是函数来设置一个默认值
If a stored property’s default value requires some customization or setup, you can use a closure or global function to provide a customized default value for that property，Whenever a new instance of the type that the property belongs to is initialized, the closure or function is called, and its return value is assigned as the property’s default value.</p>

<p><code>
class SomeClass {
    let someProperty: SomeType = {
        // create a default value for someProperty inside this closure
        // someValue must be of the same type as SomeType
        return someValue
        }()
}
</code>
Note that the closure’s end curly brace is followed by an empty pair of parentheses. This tells Swift to execute the closure immediately</p>

<p><code>注意</code></p>

<pre><code>If you use a closure to initialize a property, remember that the rest of the instance has not yet been initialized at the point that the closure is executed. This means that you cannot access any other property values from within your closure, even if those properties have default values. You also cannot use the implicit self property, or call any of the instance’s methods.
</code></pre>

<p>```
struct Checkerboard {
    let boardColors: Bool[] = {
        var temporaryBoard = Bool[]()
        var isBlack = false
        for i in 1…10 {
            for j in 1…10 {
                temporaryBoard.append(isBlack)
                isBlack = !isBlack
            }
            isBlack = !isBlack
        }
        return temporaryBoard
        }()
    func squareIsBlackAtRow(row: Int, column: Int) -&gt; Bool {
        return boardColors[(row * 10) + column]
    }
}</p>

<p>let board = Checkerboard()
println(board.squareIsBlackAtRow(0, column: 1))
// prints “true”
println(board.squareIsBlackAtRow(9, column: 9))
// prints “false”
```
####Deinitialization</p>

<p>A deinitializer is called immediately before a class instance is deallocated. You write deinitializers with the <code>deinit</code> keyword, similar to how intializers are written with the init keyword. <code>Deinitializers are only available on class types</code>.</p>

<p><code>
deinit {
    // perform the deinitialization
}
</code>
来看一个demo</p>

<p>```
struct Bank {
    static var coinsInBank = 10_000
    static func vendCoins(var numberOfCoinsToVend: Int) -&gt; Int {
        numberOfCoinsToVend = min(numberOfCoinsToVend, coinsInBank)
        coinsInBank -= numberOfCoinsToVend
        return numberOfCoinsToVend
    }
    static func receiveCoins(coins: Int) {
        coinsInBank += coins
    }
}</p>

<p>class Player {
    var coinsInPurse: Int
    init(coins: Int) {
        coinsInPurse = Bank.vendCoins(coins)
    }
    func winCoins(coins: Int) {
        coinsInPurse += Bank.vendCoins(coins)
    }
    deinit {
        Bank.receiveCoins(coinsInPurse)
    }
}</p>

<p>var playerOne: Player? = Player(coins: 100)
println(“A new player has joined the game with (playerOne!.coinsInPurse) coins”)
// prints “A new player has joined the game with 100 coins”
println(“There are now (Bank.coinsInBank) coins left in the bank”)
// prints “There are now 9900 coins left in the bank”</p>

<p>playerOne!.winCoins(2_000)
println(“PlayerOne won 2000 coins &amp; now has (playerOne!.coinsInPurse) coins”)
// prints “PlayerOne won 2000 coins &amp; now has 2100 coins”
println(“The bank now only has (Bank.coinsInBank) coins left”)
// prints “The bank now only has 7900 coins left”</p>

<p>playerOne = nil
println(“PlayerOne has left the game”)
// prints “PlayerOne has left the game”
println(“The bank now has (Bank.coinsInBank) coins”)
// prints “The bank now has 10000 coins”
```
####ARC
Swift也用arc,不过，需要注意的是arc只适用于类对象,不适用于Structure和enumeration这类值类型</p>

<p>```
class Person {
    let name: String
    init(name: String) {
        self.name = name
        println(“(name) is being initialized”)
    }
    deinit {
        println(“(name) is being deinitialized”)
    }
}</p>

<p>reference1 = Person(name: “John Appleseed”)
// prints “John Appleseed is being initialized”</p>

<p>reference2 = reference1
reference3 = reference1
reference1 = nil
reference2 = nil</p>

<p>reference3 = nil
// prints “John Appleseed is being deinitialized”</p>

<p>```</p>

<p>类对象之间的循环引用
You resolve strong reference cycles by defining some of the relationships between classes as weak or unowned references instead of as strong references
我们来看看循环引用是如何造成的</p>

<p>```
class Person {
    let name: String
    init(name: String) { self.name = name }
    var apartment: Apartment?
    deinit { println(“(name) is being deinitialized”) }
}</p>

<p>class Apartment {
    let number: Int
    init(number: Int) { self.number = number }
    var tenant: Person?
    deinit { println(“Apartment #(number) is being deinitialized”) }
}</p>

<p>var john: Person?
var number73: Apartment?</p>

<p>john = Person(name: “John Appleseed”)
number73 = Apartment(number: 73)</p>

<p>john!.apartment = number73
number73!.tenant = john</p>

<p>```
现在我们来看看 cycle retain图</p>

<p><img src="/images/2014/8/cycleretain.png"></p>

<h4 id="section-3">如何解决</h4>
<p>Swift provides two ways to resolve strong reference cycles when you work with properties of class type: weak references and unowned references.</p>

<p>Use a weak reference whenever it is valid for that reference to become nil at some point during its lifetime. Conversely, use an unowned reference when you know that the reference will never be nil once it has been set during initialization.</p>

<ul>
  <li>Weak References</li>
</ul>

<p>```
class Person {
    let name: String
    init(name: String) { self.name = name }
    var apartment: Apartment?
    deinit { println(“(name) is being deinitialized”) }
}</p>

<p>class Apartment {
    let number: Int
    init(number: Int) { self.number = number }
    weak var tenant: Person?
    deinit { println(“Apartment #(number) is being deinitialized”) }
}</p>

<p>var john: Person?
var number73: Apartment?</p>

<p>john = Person(name: “John Appleseed”)
number73 = Apartment(number: 73)</p>

<p>john!.apartment = number73
number73!.tenant = john</p>

<p>```
我们来看看引用图</p>

<p><img src="/images/2014/8/weakref.png"></p>

<p>```
john = nil
// prints “John Appleseed is being deinitialized”
number73 = nil
// prints “Apartment #73 is being deinitialized”</p>

<p>```</p>

<ul>
  <li>Unowned References
Unlike a weak reference, an unowned reference is assumed to always have a value, Because of this, an unowned reference is always defined as a non-optional type.</li>
</ul>

<p>ARC cannot set the reference to nil when the instance it refers to is deallocated, <code>because variables of a non-optional type cannot be set to nil.</code></p>

<p>来看一个例子，这个例子中，我们定义了两个类,Customer和CreditCard,与之前不同，CreditCard肯定对应着一个Customer,故用unowned</p>

<p>```
class Customer {
    let name: String
    var card: CreditCard?
    init(name: String) {
        self.name = name
    }
    deinit { println(“(name) is being deinitialized”) }
}</p>

<p>class CreditCard {
    let number: Int
    unowned let customer: Customer
    init(number: Int, customer: Customer) {
        self.number = number
        self.customer = customer
    }
    deinit { println(“Card #(number) is being deinitialized”) }
}</p>

<p>var john: Customer?
john = Customer(name: “John Appleseed”)
john!.card = CreditCard(number: 1234<em>5678</em>9012_3456, customer: john!)</p>

<p>```
<img src="/images/2014/8/unowned.png"></p>

<h5 id="unowned-references-and-implicitly-unwrapped-optional-properties">Unowned References and Implicitly Unwrapped Optional Properties</h5>
<p>in two classes ,both properties should always have a value, and neither property should ever be nil once initialization is complete. In this scenario, it is useful to combine an unowned property on one class with an implicitly unwrapped optional property on the other class.</p>

<p>This enables both properties to be accessed directly (without optional unwrapping) once initialization is complete, while still avoiding a reference cycle. This section shows you how to set up such a relationship.</p>

<p>```
class Country {
    let name: String
    let capitalCity: City!
    init(name: String, capitalName: String) {
        self.name = name
        self.capitalCity = City(name: capitalName, country: self)
    }
}</p>

<p>class City {
    let name: String
    unowned let country: Country
    init(name: String, country: Country) {
        self.name = name
        self.country = country
    }
}
```
The initializer for City is called from within the initializer for Country. However, the initializer for Country cannot pass self to the City initializer until a new Country instance is fully initialized, as described in Two-Phase Initialization.</p>

<p>To cope with this requirement, you declare the capitalCity property of Country as an implicitly unwrapped optional property, indicated by the exclamation mark at the end of its type annotation (City!). This means that the capitalCity property has a default value of nil, like any other optional, but can be accessed without the need to unwrap its value as described in Implicitly Unwrapped Optionals.</p>

<p>Because capitalCity has a default nil value, a new Country instance is considered fully initialized as soon as the Country instance sets its name property within its initializer</p>

<p><code>
var country = Country(name: "Canada", capitalName: "Ottawa")
println("\(country.name)'s capital city is called \(country.capitalCity.name)")
// prints "Canada's capital city is called Ottawa”
</code>
#####Strong Reference Cycles for Closures
closure有可能导致循环引用，因为closure也是引用类型,Swift提供了一个叫做<code>closure capture list</code>的方式来解决此类问题
我们先看看closure引用的循环引用是如何产生的</p>

<p>```
class HTMLElement {</p>

<pre><code>let name: String
let text: String?

@lazy var asHTML: () -&gt; String = {
    if let text = self.text {
        return "&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;"
    } else {
        return "&lt;\(self.name) /&gt;"
    }
}

init(name: String, text: String? = nil) {
    self.name = name
    self.text = text
}

deinit {
    println("\(name) is being deinitialized")
}
</code></pre>

<p>}</p>

<p>var paragraph: HTMLElement? = HTMLElement(name: “p”, text: “hello, world”)
println(paragraph!.asHTML())
// prints “&lt;p&gt;hello, world&lt;/p&gt;”
```</p>

<p>The asHTML property is named and used somewhat like an instance method. However, because asHTML is a closure property rather than an instance method, you can replace the default value of the asHTML property with a custom closure, if you want to change the HTML rendering for a particular HTML element.</p>

<p><code>注意</code></p>

<pre><code>The asHTML property is declared as a lazy property, because it is only needed if and when the element actually needs to be rendered as a string value for some HTML output target. The fact that asHTML is a lazy property means that you can refer to self within the default closure, because the lazy property will not be accessed until after initialization has been completed and self is known to exist.

Even though the closure refers to self multiple times, it only captures one strong reference to the HTMLElement instance.
</code></pre>

<h5 id="closure">解决closure导致的引用循环</h5>
<p>You resolve a strong reference cycle between a closure and a class instance by defining a capture list as part of the closure’s definition</p>

<p>A capture list defines the rules to use when capturing one or more reference types within the closure’s body. As with strong reference cycles between two class instances, you declare each captured reference to be a weak or unowned reference rather than a strong reference</p>

<p><code>注意</code></p>

<pre><code>Swift requires you to write self.someProperty or self.someMethod (rather than just someProperty or someMethod) whenever you refer to a member of self within a closure. This helps you remember that it’s possible to capture self by accident.
</code></pre>

<h5 id="cature-list">定义一个Cature List</h5>

<p><code>
@lazy var someClosure: (Int, String) -&gt; String = {
    [unowned self] (index: Int, stringToProcess: String) -&gt; String in
    // closure body goes here
}
</code>
如果closure不指定参数列表或返回型(因为它们能从上下文中推测出,则可用以下形式代替</p>

<p><code>
@lazy var someClosure: () -&gt; String = {
    [unowned self] in
    // closure body goes here
}
</code>
#####Weak and Unowned References
Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, and will always be deallocated at the same time.</p>

<p>Weak references are <code>always</code> of an <code>optional type</code></p>

<p>```
class HTMLElement {</p>

<pre><code>let name: String
let text: String?

@lazy var asHTML: () -&gt; String = {
    [unowned self] in
    if let text = self.text {
        return "&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;"
    } else {
        return "&lt;\(self.name) /&gt;"
    }
}

init(name: String, text: String? = nil) {
    self.name = name
    self.text = text
}

deinit {
    println("\(name) is being deinitialized")
}
</code></pre>

<p>}</p>

<p>var paragraph: HTMLElement? = HTMLElement(name: “p”, text: “hello, world”)
println(paragraph!.asHTML())
// prints “&lt;p&gt;hello, world&lt;/p&gt;”
```
<img src="/images/2014/8/unownedblock.png"></p>

<h5 id="optional-chaining">Optional Chaining</h5>
<p>If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.</p>

<p><code>注意</code></p>

<pre><code>Optional chaining in Swift is similar to messaging nil in Objective-C, but in a way that works for any type, and that can be checked for success or failure. #####Optional Chaining as an Alternative to Forced Unwrapping To reflect the fact that optional chaining can be called on a nil value, the result of an optional chaining call is always an optional value,even if the property, method, or subscript you are querying returns a non-optional value
</code></pre>

<p>Specifically, the result of an optional chaining call is of the same type as the expected return value, but wrapped in an optional,A property that normally returns an Int will return an Int? when accessed through optional chaining.</p>

<p>```
class Person {
    var residence: Residence?
}</p>

<p>class Residence {
    var numberOfRooms = 1
}</p>

<p>let john = Person()</p>

<p>let roomCount = john.residence!.numberOfRooms
// this triggers a runtime error</p>

<p>if let roomCount = john.residence?.numberOfRooms {
    println(“John’s residence has (roomCount) room(s).”)
} else {
    println(“Unable to retrieve the number of rooms.”)
}
// prints “Unable to retrieve the number of rooms.”</p>

<p>john.residence = Residence()</p>

<p>if let roomCount = john.residence?.numberOfRooms {
    println(“John’s residence has (roomCount) room(s).”)
} else {
    println(“Unable to retrieve the number of rooms.”)
}
// prints “John’s residence has 1 room(s).”
```
#####Defining Model Classes for Optional Chaining</p>

<p>```
class Person {
    var residence: Residence?
}</p>

<p>class Residence {
    var rooms = Room[]()
    var numberOfRooms: Int {
    return rooms.count
    }
    subscript(i: Int) -&gt; Room {
        return rooms[i]
    }
    func printNumberOfRooms() {
        println(“The number of rooms is (numberOfRooms)”)
    }
    var address: Address?
}</p>

<p>class Room {
    let name: String
    init(name: String) { self.name = name }
}</p>

<p>class Address {
    var buildingName: String?
    var buildingNumber: String?
    var street: String?
    func buildingIdentifier() -&gt; String? {
        if buildingName {
            return buildingName
        } else if buildingNumber {
            return buildingNumber
        } else {
            return nil
        }
    }
}</p>

<p>```
#####Calling Properties Through Optional Chaining
you can use optional chaining to access a property on an optional value, and to check if that property access is successful. You cannot, however, set a property’s value through optional chaining.</p>

<p><code>
let john = Person()
if let roomCount = john.residence?.numberOfRooms {
    println("John's residence has \(roomCount) room(s).")
} else {
    println("Unable to retrieve the number of rooms.")
}
// prints "Unable to retrieve the number of rooms.”
</code>
#####Calling Methods Through Optional Chaining</p>

<p><code>
if john.residence?.printNumberOfRooms() {
    println("It was possible to print the number of rooms.")
} else {
    println("It was not possible to print the number of rooms.")
}
// prints "It was not possible to print the number of rooms.”
</code>
#####Calling Subscripts Through Optional Chaining
<code>注意</code></p>

<p>When you access a subscript on an optional value through optional chaining, you place the question mark before the subscript’s braces, not after. The optional chaining question mark always follows immediately after the part of the expression that is optional.</p>

<p>```
if let firstRoomName = john.residence?[0].name {
    println(“The first room name is (firstRoomName).”)
} else {
    println(“Unable to retrieve the first room name.”)
}
// prints “Unable to retrieve the first room name.”</p>

<p>let johnsHouse = Residence()
johnsHouse.rooms += Room(name: “Living Room”)
johnsHouse.rooms += Room(name: “Kitchen”)
john.residence = johnsHouse</p>

<p>if let firstRoomName = john.residence?[0].name {
    println(“The first room name is (firstRoomName).”)
} else {
    println(“Unable to retrieve the first room name.”)
}
// prints “The first room name is Living Room.”
```
#####Linking Multiple Levels of Chaining
multiple levels of optional chaining do not add more levels of optionality to the returned value.</p>

<p>也就是说</p>

<ul>
  <li>If the type you are trying to retrieve is not optional, it will become optional because of the optional chaining.</li>
  <li>If the type you are trying to retrieve is already optional, it will not become more optional because of the chaining.</li>
</ul>

<p>```
if let johnsStreet = john.residence?.address?.street {
    println(“John’s street name is (johnsStreet).”)
} else {
    println(“Unable to retrieve the address.”)
}
// prints “Unable to retrieve the address.”</p>

<p>let johnsAddress = Address()
johnsAddress.buildingName = “The Larches”
johnsAddress.street = “Laurel Street”
john.residence!.address = johnsAddress</p>

<p>if let johnsStreet = john.residence?.address?.street {
    println(“John’s street name is (johnsStreet).”)
} else {
    println(“Unable to retrieve the address.”)
}
// prints “John’s street name is Laurel Street.”
```
#####Chaining on Methods With Optional Return Values</p>

<p>```
if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {
    println(“John’s building identifier is (buildingIdentifier).”)
}
// prints “John’s building identifier is The Larches.”</p>

<p>if let upper = john.residence?.address?.buildingIdentifier()?.uppercaseString {
    println(“John’s uppercase building identifier is (upper).”)
}
// prints “John’s uppercase building identifier is THE LARCHES.”
```
####Type Casting
Type casting is a way to check the type of an instance, and/or to treat that instance as if it is a different superclass or subclass from somewhere else in its own class hierarchy.</p>

<p>Type casting in Swift is implemented with the <code>is</code> and <code>as</code> operators.</p>

<p>You can also use type casting to check whether a type conforms to a protocol
#####Defining a Class Hierarchy for Type Casting
Defining a Class Hierarchy for Type Casting</p>

<p>```
class MediaItem {
    var name: String
    init(name: String) {
        self.name = name
    }
}</p>

<p>class Movie: MediaItem {
    var director: String
    init(name: String, director: String) {
        self.director = director
        super.init(name: name)
    }
}</p>

<p>class Song: MediaItem {
    var artist: String
    init(name: String, artist: String) {
        self.artist = artist
        super.init(name: name)
    }
}</p>

<p>let library = [
    Movie(name: “Casablanca”, director: “Michael Curtiz”),
    Song(name: “Blue Suede Shoes”, artist: “Elvis Presley”),
    Movie(name: “Citizen Kane”, director: “Orson Welles”),
    Song(name: “The One And Only”, artist: “Chesney Hawkes”),
    Song(name: “Never Gonna Give You Up”, artist: “Rick Astley”)
]
// the type of “library” is inferred to be MediaItem[]”</p>

<p>```
#####Checking Type</p>

<p>```
var movieCount = 0
var songCount = 0</p>

<p>for item in library {
    if item is Movie {
        ++movieCount
    } else if item is Song {
        ++songCount
    }
}</p>

<p>println(“Media library contains (movieCount) movies and (songCount) songs”)
// prints “Media library contains 2 movies and 3 songs”
```
#####Downcasting
Because downcasting can fail, the type cast operator comes in two different forms. The optional form, as?, returns an optional value of the type you are trying to downcast to. The forced form, as, attempts the downcast and force-unwraps the result as a single compound action.</p>

<p>```
for item in library {
    if let movie = item as? Movie {
        println(“Movie: ‘(movie.name)’, dir. (movie.director)”)
    } else if let song = item as? Song {
        println(“Song: ‘(song.name)’, by (song.artist)”)
    }
}</p>

<p>// Movie: ‘Casablanca’, dir. Michael Curtiz
// Song: ‘Blue Suede Shoes’, by Elvis Presley
// Movie: ‘Citizen Kane’, dir. Orson Welles
// Song: ‘The One And Only’, by Chesney Hawkes
// Song: ‘Never Gonna Give You Up’, by Rick Astley”
```
####Type Casting for Any and AnyObject
Swift provides two special type aliases for working with non-specific types:</p>

<ul>
  <li>AnyObject can represent an instance of any class type.</li>
  <li>Any can represent an instance of any type at all, apart from function types.</li>
</ul>

<p><code>注意</code></p>

<p>Use Any and AnyObject only when you explicitly need the behavior and capabilities they provide. It is always better to be specific about the types you expect to work with in your code.
#####AnyObject
When working with Cocoa APIs, it is common to receive an array with a type of AnyObject[], or “an array of values of any object type”. This is because Objective-C does not have explicitly typed arrays</p>

<p>```
let someObjects: AnyObject[] = [
    Movie(name: “2001: A Space Odyssey”, director: “Stanley Kubrick”),
    Movie(name: “Moon”, director: “Duncan Jones”),
    Movie(name: “Alien”, director: “Ridley Scott”)
]</p>

<p>for object in someObjects {
    let movie = object as Movie
    println(“Movie: ‘(movie.name)’, dir. (movie.director)”)
}
// Movie: ‘2001: A Space Odyssey’, dir. Stanley Kubrick
// Movie: ‘Moon’, dir. Duncan Jones
// Movie: ‘Alien’, dir. Ridley Scott”</p>

<p>//或者 </p>

<p>for movie in someObjects as Movie[] {
    println(“Movie: ‘(movie.name)’, dir. (movie.director)”)
}
// Movie: ‘2001: A Space Odyssey’, dir. Stanley Kubrick
// Movie: ‘Moon’, dir. Duncan Jones
// Movie: ‘Alien’, dir. Ridley Scott”
```
#####Any
Here’s an example of using Any to work with a mix of different types, including non-class types</p>

<p>```
var things = Any[]()</p>

<p>things.append(0)
things.append(0.0)
things.append(42)
things.append(3.14159)
things.append(“hello”)
things.append((3.0, 5.0))
things.append(Movie(name: “Ghostbusters”, director: “Ivan Reitman”))
```</p>

<p>You can use the is and as operators in a switch statement’s cases to discover the specific type of a constant or variable that is known <code>only</code> to be of type <code>Any</code> or <code>AnyObject</code>.</p>

<p>```
for thing in things {
    switch thing {
    case 0 as Int:
        println(“zero as an Int”)
    case 0 as Double:
        println(“zero as a Double”)
    case let someInt as Int:
        println(“an integer value of (someInt)”)
    case let someDouble as Double where someDouble &gt; 0:
        println(“a positive double value of (someDouble)”)
    case is Double:
        println(“some other double value that I don’t want to print”)
    case let someString as String:
        println(“a string value of "(someString)"”)
    case let (x, y) as (Double, Double):</p>

<p>println(“an (x, y) point at (x), (y)”)
    case let movie as Movie:
        println(“a movie called ‘(movie.name)’, dir. (movie.director)”)
    default:
        println(“something else”)
    }
}</p>

<p>// zero as an Int
// zero as a Double
// an integer value of 42
// a positive double value of 3.14159
// a string value of “hello”
// an (x, y) point at 3.0, 5.0
// a movie called ‘Ghostbusters’, dir. Ivan Reitman
```
<code>注意</code></p>

<pre><code>The cases of a switch statement use the forced version of the type cast operator (as, not as?) to check and cast to a specific type. This check is always safe within the context of a switch case statement. #####Nested Types Nest supporting enumerations, classes, and structures within the definition of the type they support.
</code></pre>

<p>To nest a type within another type, write its definition within the outer braces of the type it supports. Types can be nested to <code>as many levels as are required</code>.</p>

<h5 id="nested-types-in-action">Nested Types in Action</h5>

<p>```
struct BlackjackCard {
// nested Suit enumeration
    enum Suit: Character {
        case Spades = “♠”, Hearts = “♡”, Diamonds = “♢”, Clubs = “♣”
    }</p>

<pre><code>// nested Rank enumeration
enum Rank: Int {
    case Two = 2, Three, Four, Five, Six, Seven, Eight, Nine, Ten
    case Jack, Queen, King, Ace
    struct Values {
        let first: Int, second: Int?
    }
    var values: Values {
    switch self {
    case .Ace:
        return Values(first: 1, second: 11)
    case .Jack, .Queen, .King:
        return Values(first: 10, second: nil)
    default:
        return Values(first: self.toRaw(), second: nil)
        }
    }
}

// BlackjackCard properties and methods
let rank: Rank, suit: Suit
var description: String {
var output = "suit is \(suit.toRaw()),"
    output += " value is \(rank.values.first)"
    if let second = rank.values.second {
        output += " or \(second)"
    }
    return output
} }
</code></pre>

<p>let theAceOfSpades = BlackjackCard(rank: .Ace, suit: .Spades)
println(“theAceOfSpades: (theAceOfSpades.description)”)
// prints “theAceOfSpades: suit is ♠, value is 1 or 11”
```
Even though Rank and Suit are nested within BlackjackCard, their type can be inferred from context,“\and so the initialization of this instance is able to refer to the enumeration members by their member names (.Ace and .Spades) alone.</p>

<h5 id="referring-to-nested-types">Referring to Nested Types</h5>

<p><code>
let heartsSymbol = BlackjackCard.Suit.Hearts.toRaw()
// heartsSymbol is "♡”
</code>
####Extensions
Extensions add new functionality to an existing class, structure, or enumeration type,类似OC中的类别,Unlike Objective-C categories, Swift extensions do not have names
Swift中的Extensions能做以下事情</p>

<ul>
  <li>添加computed properties和computed static properties</li>
  <li>定义instance methods和type methods</li>
  <li>提供新的initializers</li>
  <li>定义subscripts</li>
  <li>定义并使用nested types</li>
  <li>让一个已存在的type遵循某个协议</li>
</ul>

<p><code>注意</code></p>

<pre><code>If you define an extension to add new functionality to an existing type, the new functionality will be available on all existing instances of that type, even if they were created before the extension was defined.
</code></pre>

<h5 id="section-4">语法</h5>

<p><code>
extension SomeType {
    // new functionality to add to SomeType goes here
}
</code>
An extension can extend an existing type to make it adopt one or more protocols.</p>

<p><code>
extension SomeType: SomeProtocol, AnotherProtocol {
    // implementation of protocol requirements goes here
}
</code>
#####Computed Properties
Extensions can add computed instance properties and computed type properties to existing types</p>

<p>```
extension Double {
    var km: Double { return self * 1<em>000.0 }
    var m: Double { return self }
    var cm: Double { return self / 100.0 }
    var mm: Double { return self / 1</em>000.0 }
    var ft: Double { return self / 3.28084 }
}
let oneInch = 25.4.mm
println(“One inch is (oneInch) meters”)
// prints “One inch is 0.0254 meters”
let threeFeet = 3.ft
println(“Three feet is (threeFeet) meters”)
// prints “Three feet is 0.914399970739201 meters”</p>

<p>let aMarathon = 42.km + 195.m
println(“A marathon is (aMarathon) meters long”)
// prints “A marathon is 42195.0 meters long”
```</p>

<p><code>注意</code></p>

<pre><code>Extensions can add new computed properties, but they cannot add stored properties, or add property observers to existing properties.
</code></pre>

<h5 id="initializers">Initializers</h5>
<p>Extensions can add new initializers to existing types. This enables you to extend other types to accept your own custom types as initializer parameters, or to provide additional initialization options that were not included as part of the type’s original implementation.</p>

<p><code>Extensions can add new convenience initializers to a class, but they cannot add new designated initializers or deinitializers to a class</code>. Designated initializers and deinitializers must always be provided by the original class implementation.</p>

<p><code>注意</code></p>

<pre><code>If you use an extension to add an initializer to a value type that provides default values for all of its stored properties and does not define any custom initializers, you can call the default initializer and memberwise initializer for that value type from within your extension’s initializer.

This would not be the case if you had written the initializer as part of the value type’s original implementation
</code></pre>

<p>```
struct Size {
    var width = 0.0, height = 0.0
}
struct Point {
    var x = 0.0, y = 0.0
}
struct Rect {
    var origin = Point()
    var size = Size()
}</p>

<p>let defaultRect = Rect()
let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),
    size: Size(width: 5.0, height: 5.0))</p>

<p>extension Rect {
    init(center: Point, size: Size) {
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x: originX, y: originY), size: size)
    }
}    </p>

<p>let centerRect = Rect(center: Point(x: 4.0, y: 4.0),
    size: Size(width: 3.0, height: 3.0))
// centerRect’s origin is (2.5, 2.5) and its size is (3.0, 3.0)
```
<code>注意</code></p>

<pre><code>If you provide a new initializer with an extension, you are still responsible for making sure that each instance is fully initialized once the initializer completes. #####Methods Extensions can add new instance methods and type methods to existing types.
</code></pre>

<p>```
extension Int {
    func repetitions(task: () -&gt; ()) {
        for i in 0..self {
            task()
        }
    }
}</p>

<p>3.repetitions({
    println(“Hello!”)
    })
// Hello!
// Hello!
// Hello!</p>

<p>//或者
3.repetitions {
    println(“Goodbye!”)
}
// Goodbye!
// Goodbye!
// Goodbye!
```
#####Mutating Instance Methods</p>

<p><code>
extension Int {
    mutating func square() {
        self = self * self
    }
}
var someInt = 3
someInt.square()
// someInt is now 9
</code>
#####Subscripts
Extensions can add new subscripts to an existing type.</p>

<p><code>
“extension Int {
    subscript(digitIndex: Int) -&gt; Int {
        var decimalBase = 1
            for _ in 1...digitIndex {
                decimalBase *= 10
            }
            return (self / decimalBase) % 10
    }
}
746381295[0]
// returns 5
746381295[1]
// returns 9
746381295[2]
// returns 2
746381295[8]
// returns 7
</code>
#####Nested Types
Extensions can add new nested types to existing classes, structures and enumerations:</p>

<p>```
extension Character {
    enum Kind {
        case Vowel, Consonant, Other
    }
    var kind: Kind {
    switch String(self).lowercaseString {
    case “a”, “e”, “i”, “o”, “u”:
        return .Vowel
    case “b”, “c”, “d”, “f”, “g”, “h”, “j”, “k”, “l”, “m”,
    “n”, “p”, “q”, “r”, “s”, “t”, “v”, “w”, “x”, “y”, “z”:
        return .Consonant
    default:
        return .Other
        }
    }
}</p>

<p>func printLetterKinds(word: String) {
    println(“’(word)’ is made up of the following kinds of letters:”)
    for character in word {
        switch character.kind {
        case .Vowel:
            print(“vowel “)
        case .Consonant:
            print(“consonant “)
        case .Other:
            print(“other “)
        }
    }
    print(“\n”)
}
printLetterKinds(“Hello”)
// ‘Hello’ is made up of the following kinds of letters:
// consonant vowel consonant consonant vowel
```
####Protocol
A protocol defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality.</p>

<p>Protocols can <code>require</code> that conforming types have specific instance properties, instance methods, type methods, operators, and subscripts.</p>

<p>```
protocol SomeProtocol {
    // protocol definition goes here
}</p>

<p>struct SomeStructure: FirstProtocol, AnotherProtocol {
    // structure definition goes here
}
```</p>

<p>If a class has a <code>superclass</code>, list the superclass name before any protocols it adopts, followed by a comma:</p>

<p><code>
class SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {
    // class definition goes here
}
</code>
#####Property Requirements
A protocol can require any conforming type to provide an instance property or type property with a particular name and type.</p>

<p>The protocol doesn’t specify whether the property should be a stored property or a computed property—it only specifies the required property name and type. The protocol also specifies whether each property must be gettable or gettable and settable.</p>

<p>If a protocol requires a property to be gettable and settable, that property requirement cannot be fulfilled by a constant stored property or a read-only computed property.</p>

<p>Property requirements are always declared as variable properties, prefixed with the var keyword.</p>

<p>Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.</p>

<p><code>
protocol SomeProtocol {
    var mustBeSettable: Int { get set }
    var doesNotNeedToBeSettable: Int { get }
}
</code></p>

<p><code>注意</code></p>

<pre><code>Always prefix type property requirements with the class keyword when you define them in a protocol. This is true even though type property requirements are prefixed with the static keyword when implemented by a structure or enumeration:
</code></pre>

<p><code>
protocol AnotherProtocol {
    class var someTypeProperty: Int { get set }
}
</code>
Here’s an example of a protocol with a single instance property requirement:</p>

<p>```
protocol FullyNamed {
    var fullName: String { get }
}</p>

<p>struct Person: FullyNamed {
    var fullName: String
}
let john = Person(fullName: “John Appleseed”)
// john.fullName is “John Appleseed”
```
Swift reports an error at compile-time if a protocol requirement is not fulfilled.</p>

<p>Here’s a more complex class, which also adopts and conforms to the FullyNamed 
protocol:</p>

<p><code>
class Starship: FullyNamed {
    var prefix: String?
    var name: String
    init(name: String, prefix: String? = nil) {
        self.name = name
        self.prefix = prefix
    }
    var fullName: String {
    return (prefix ? prefix! + " " : "") + name
    }
}
var ncc1701 = Starship(name: "Enterprise", prefix: "USS")
// ncc1701.fullName is "USS Enterprise”
</code>
#####Method Requirements
Protocols can require specific instance methods and type methods to be implemented by conforming types. These methods are written as part of the protocol’s definition in exactly the same way as for normal instance and type methods, but without curly braces or a method body. Variadic parameters are allowed, subject to the same rules as for normal methods.</p>

<p><code>注意</code></p>

<p>Protocols use the same syntax as normal methods, but are not allowed to specify default values for method parameters.</p>

<p>As with type property requirements, you always prefix type method requirements with the class keyword when they are defined in a protocol. This is true even though type method requirements are prefixed with the static keyword when implemented by a structure or enumeration:</p>

<p><code>
protocol SomeProtocol {
    class func someTypeMethod()
}
</code>
来看一个demo</p>

<p>```
protocol RandomNumberGenerator {
    func random() -&gt; Double
}</p>

<p>class LinearCongruentialGenerator: RandomNumberGenerator {
    var lastRandom = 42.0
    let m = 139968.0
    let a = 3877.0
    let c = 29573.0
    func random() -&gt; Double {
        lastRandom = ((lastRandom * a + c) % m)
        return lastRandom / m
    }
}
let generator = LinearCongruentialGenerator()
println(“Here’s a random number: (generator.random())”)
// prints “Here’s a random number: 0.37464991998171”
println(“And another one: (generator.random())”)
// prints “And another one: 0.729023776863283”
```
#####Mutating Method Requirements</p>

<p>It is sometimes necessary for a method to modify (or mutate) the instance it belongs to</p>

<p><code>注意</code></p>

<p>If you mark a protocol instance method requirement as mutating, you do not need to write the mutating keyword when writing an implementation of that method for a class. The mutating keyword is only used by structures and enumerations.</p>

<p>```
protocol Togglable {
    mutating func toggle()
}</p>

<p>enum OnOffSwitch: Togglable {
    case Off, On
    mutating func toggle() {
        switch self {
        case Off:
            self = On
        case On:
            self = Off
        }
    }
}
var lightSwitch = OnOffSwitch.Off
lightSwitch.toggle()
// lightSwitch is now equal to .On”
```
#####Protocols as Types
Protocols do not actually implement any functionality themselves. Nonetheless, any protocol you create will become a fully-fledged type for use in your code.
Because it is a type, you can use a protocol in many places where other types are allowed, including:</p>

<ul>
  <li>As a parameter type or return type in a function, method, or initializer</li>
  <li>As the type of a constant, variable, or property</li>
  <li>As the type of items in an array, dictionary, or other container</li>
</ul>

<p>Here’s an example of a protocol used as a type:</p>

<p>```
class Dice {
    let sides: Int
    let generator: RandomNumberGenerator
    init(sides: Int, generator: RandomNumberGenerator) {
        self.sides = sides
        self.generator = generator
    }
    func roll() -&gt; Int {
        return Int(generator.random() * Double(sides)) + 1
    }
}</p>

<p>var d6 = Dice(sides: 6, generator: LinearCongruentialGenerator())
for _ in 1…5 {
    println(“Random dice roll is (d6.roll())”)
}
// Random dice roll is 3
// Random dice roll is 5
// Random dice roll is 4
// Random dice roll is 5
// Random dice roll is 4
```
####Delegation</p>

<p>```
protocol DiceGame {
    var dice: Dice { get }
    func play()
}</p>

<p>protocol DiceGameDelegate {
    func gameDidStart(game: DiceGame)
    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)
    func gameDidEnd(game: DiceGame)
}</p>

<p>class SnakesAndLadders: DiceGame {
    let finalSquare = 25
    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())
    var square = 0
    var board: Int[]
    init() {
        board = Int[](count: finalSquare + 1, repeatedValue: 0)
        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
    }
    var delegate: DiceGameDelegate?
    func play() {
        square = 0
        delegate?.gameDidStart(self)
        gameLoop: while square != finalSquare {
            let diceRoll = dice.roll()
            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)
            switch square + diceRoll {
            case finalSquare:
                break gameLoop
            case let newSquare where newSquare &gt; finalSquare:
                continue gameLoop
            default:
                square += diceRoll
                square += board[square]
            }
        }
        delegate?.gameDidEnd(self)
    }
}</p>

<p>class DiceGameTracker: DiceGameDelegate {
    var numberOfTurns = 0
    func gameDidStart(game: DiceGame) {
        numberOfTurns = 0
        if game is SnakesAndLadders {
            println(“Started a new game of Snakes and Ladders”)
        }
        println(“The game is using a (game.dice.sides)-sided dice”)
    }
    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {
        ++numberOfTurns
        println(“Rolled a (diceRoll)”)
    }
    func gameDidEnd(game: DiceGame) {
        println(“The game lasted for (numberOfTurns) turns”)
    }
}</p>

<p>let tracker = DiceGameTracker()
let game = SnakesAndLadders()
game.delegate = tracker
game.play()
// Started a new game of Snakes and Ladders
// The game is using a 6-sided dice
// Rolled a 3
// Rolled a 5
// Rolled a 4
// Rolled a 5
// The game lasted for 4 turns
```
#####Adding Protocol Conformance with an Extension
<code>注意</code></p>

<p>Existing instances of a type automatically adopt and conform to a protocol when that conformance is added to the instance’s type in an extension.</p>

<p>```
protocol TextRepresentable {
    func asText() -&gt; String
}</p>

<p>extension Dice: TextRepresentable {
    func asText() -&gt; String {
        return “A (sides)-sided dice”
    }
}</p>

<p>let d12 = Dice(sides: 12, generator: LinearCongruentialGenerator())
println(d12.asText())
// prints “A 12-sided dice”</p>

<p>extension SnakesAndLadders: TextRepresentable {
    func asText() -&gt; String {
        return “A game of Snakes and Ladders with (finalSquare) squares”
    }
}
println(game.asText())
// prints “A game of Snakes and Ladders with 25 squares”
```
#####Declaring Protocol Adoption with an Extension</p>

<p>If a type already conforms to all of the requirements of a protocol, but has not yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:</p>

<p><code>
struct Hamster {
    var name: String
    func asText() -&gt; String {
        return "A hamster named \(name)"
    }
}
extension Hamster: TextRepresentable {}
</code>
<code>注意</code></p>

<p>Instances of Hamster can now be used wherever TextRepresentable is the required type:</p>

<p><code>
let simonTheHamster = Hamster(name: "Simon")
let somethingTextRepresentable: TextRepresentable = simonTheHamster
println(somethingTextRepresentable.asText())
// prints "A hamster named Simon”
</code>
<code>注意</code></p>

<pre><code>Types do not automatically adopt a protocol just by satisfying its requirements. They must always explicitly declare their adoption of the protocol.
</code></pre>

<h5 id="collections-of-protocol-types">Collections of Protocol Types</h5>
<p>A protocol can be used as the type to be stored in a collection such as an array or a dictionary</p>

<p>```
let things: TextRepresentable[] = [game, d12, simonTheHamster]</p>

<p>for thing in things {
    println(thing.asText())
}
// A game of Snakes and Ladders with 25 squares
// A 12-sided dice
// A hamster named Simon</p>

<p>```
#####Protocol Inheritance
A protocol can inherit one or more other protocols and can add further requirements on top of the requirements it inherits</p>

<p>```
protocol InheritingProtocol: SomeProtocol, AnotherProtocol {
    // protocol definition goes here
}</p>

<p>protocol PrettyTextRepresentable: TextRepresentable {
    func asPrettyText() -&gt; String
}</p>

<p>extension SnakesAndLadders: PrettyTextRepresentable {
    func asPrettyText() -&gt; String {
        var output = asText() + “:\n”
        for index in 1…finalSquare {
            switch board[index] {
            case let ladder where ladder &gt; 0:
                output += “▲ “
            case let snake where snake &lt; 0:
                output += “▼ “
            default:
                output += “○ “
            }
        }
        return output
    }
}</p>

<p>println(game.asPrettyText())
// A game of Snakes and Ladders with 25 squares:
// ○ ○ ▲ ○ ○ ▲ ○ ○ ▲ ▲ ○ ○ ○ ▼ ○ ○ ○ ○ ▼ ○ ○ ▼ ○ ▼ ○
```</p>

<h5 id="protocol-composition">Protocol Composition</h5>

<p><code>
protocol Named {
    var name: String { get }
}
protocol Aged {
    var age: Int { get }
}
struct Person: Named, Aged {
    var name: String
    var age: Int
}
func wishHappyBirthday(celebrator: protocol&lt;Named, Aged&gt;) {
    println("Happy birthday \(celebrator.name) - you're \(celebrator.age)!")
}
let birthdayPerson = Person(name: "Malcolm", age: 21)
wishHappyBirthday(birthdayPerson)
// prints "Happy birthday Malcolm - you're 21!"
</code>
#####Checking for Protocol Conformance</p>

<p>You can use the is and as operators described in Type Casting to check for protocol conformance, and to cast to a specific protocol.</p>

<ul>
  <li>The is operator returns true if an instance conforms to a protocol and returns false if it does not.</li>
  <li>The as? version of the downcast operator returns an optional value of the protocol’s type, and this value is nil if the instance does not conform to that protocol.</li>
  <li>The as version of the downcast operator forces the downcast to the protocol type and triggers a runtime error if the downcast does not succeed.</li>
</ul>

<p><code>
@objc protocol HasArea {
    var area: Double { get }
}
</code>
<code>注意</code></p>

<p>You can check for protocol conformance <code>only if your protocol is marked with the @objc attribute</code>, as seen for the HasArea protocol above. This attribute indicates that the protocol should be exposed to Objective-C code and is described in Using Swift with Cocoa and Objective-C. Even if you are not interoperating with Objective-C, you need to mark your protocols with the @objc attribute if you want to be able to check for protocol conformance.</p>

<p>Note also that @objc protocols can be adopted <code>only by classes</code>, and not by structures or enumerations. If you mark your protocol as @objc in order to check for conformance, you will be able to apply that protocol only to class types.</p>

<p>Here are two classes, Circle and Country, both of which conform to the HasArea protocol:</p>

<p><code>
class Circle: HasArea {
    let pi = 3.1415927
    var radius: Double
    var area: Double { return pi * radius * radius }
    init(radius: Double) { self.radius = radius }
}
class Country: HasArea {
    var area: Double
    init(area: Double) { self.area = area }
}
</code>
Animal Class</p>

<p>```
class Animal {
    var legs: Int
    init(legs: Int) { self.legs = legs }
}</p>

<p>let objects: AnyObject[] = [
    Circle(radius: 2.0),
    Country(area: 243_610),
    Animal(legs: 4)
]</p>

<p>for object in objects {
    if let objectWithArea = object as? HasArea {
        println(“Area is (objectWithArea.area)”)
    } else {
        println(“Something that doesn’t have an area”)
    }
}
// Area is 12.5663708
// Area is 243610.0
// Something that doesn’t have an area
```
#####Optional Protocol Requirements
You can define optional requirements for protocols
Optional property requirements, and optional method requirements that return a value, will always return an optional value of the appropriate type when they are accessed or called</p>

<p>You check for an implementation of an optional requirement by writing a question mark after the name of the requirement when it is called, such as someOptionalMethod?(someArgument). </p>

<p><code>注意</code></p>

<pre><code>Optional protocol requirements can only be specified if your protocol is marked with the @objc attribute. Even if you are not interoperating with Objective-C, you need to mark your protocols with the @objc attribute if you want to specify optional requirements.
</code></pre>

<p>```
@objc protocol CounterDataSource {
    @optional func incrementForCount(count: Int) -&gt; Int
    @optional var fixedIncrement: Int { get }
}</p>

<p>@objc class Counter {
    var count = 0
    var dataSource: CounterDataSource?
    func increment() {
        if let amount = dataSource?.incrementForCount?(count) {
            count += amount
        } else if let amount = dataSource?.fixedIncrement? {
            count += amount
        }
    }
}</p>

<p>class ThreeSource: CounterDataSource {
    let fixedIncrement = 3
}</p>

<p>var counter = Counter()
counter.dataSource = ThreeSource()
for _ in 1…4 {
    counter.increment()
    println(counter.count)
}
// 3
// 6
// 9
// 12</p>

<p>```
另一个例子</p>

<p>```
class TowardsZeroSource: CounterDataSource {
    func incrementForCount(count: Int) -&gt; Int {
        if count == 0 {
            return 0
        } else if count &lt; 0 {
            return 1
        } else {
            return -1
        }
    }
}</p>

<p>counter.count = -4
counter.dataSource = TowardsZeroSource()
for _ in 1…5 {
    counter.increment()
    println(counter.count)
}
// -3
// -2
// -1
// 0
// 0
```
####Generics
交换两个值</p>

<p>```
func swapTwoValues<t>(inout a: T, inout b: T) {
    let temporaryA = a
    a = b
    b = temporaryA
}</t></p>

<p>var someInt = 3
var anotherInt = 107
swapTwoValues(&amp;someInt, &amp;anotherInt)
// someInt is now 107, and anotherInt is now 3</p>

<p>var someString = “hello”
var anotherString = “world”
swapTwoValues(&amp;someString, &amp;anotherString)
// someString is now “world”, and anotherString is now “hello”</p>

<p>```
<code>注意</code></p>

<pre><code>You can use Swift’s existing swap function rather than providing your own implementation.
</code></pre>

<h5 id="type-parameters">Type Parameters</h5>
<p>Type parameters specify and name a placeholder type, and are written immediately after the function’s name, between a pair of matching angle brackets (such as <t>).</t></p>

<p>You can provide more than one type parameter by writing multiple type parameter names within the angle brackets, separated by commas.</p>

<h5 id="naming-type-parameters">Naming Type Parameters</h5>
<p>It is traditional to use the single-character name T for the type parameter. However, you are can use any valid identifier as the type parameter name.</p>

<p><code>注意</code></p>

<pre><code>Always give type parameters UpperCamelCase names (such as T and KeyType) to indicate that they are a placeholder for a type, not a value. #####Generic Types
</code></pre>

<p>In addition to generic functions, Swift enables you to define your own generic types. These are custom classes, structures, and enumerations that can work with any type, in a similar way to Array and Dictionary.</p>

<p>```
struct Stack<t> {
    var items = T[]()
    mutating func push(item: T) {
        items.append(item)
    }
    mutating func pop() -&gt; T {
        return items.removeLast()
    }
}</t></p>

<p>var stackOfStrings = Stack<string>()
stackOfStrings.push("uno")
stackOfStrings.push("dos")
stackOfStrings.push("tres")
stackOfStrings.push("cuatro")
// the stack now contains 4 strings”</string></p>

<p>let fromTheTop = stackOfStrings.pop()
// fromTheTop is equal to “cuatro”, and the stack now contains 3 strings
```
#####Type Constraints</p>

<p>It is sometimes useful to enforce certain type constraints on the types that can be used with generic functions and generic types. <code>Type constraints specify that a type parameter must inherit from a specific class, or conform to a particular protocol or protocol composition.</code></p>

<p><code>
func someFunction&lt;T: SomeClass, U: SomeProtocol&gt;(someT: T, someU: U) {
    // function body goes here
}
</code>
#####Type Constraints in Action</p>

<p><code>
func findIndex&lt;T&gt;(array: T[], valueToFind: T) -&gt; Int? {
    for (index, value) in enumerate(array) {
        if value == valueToFind {
            return index
        }
    }
    return nil
}
</code>
需要注意的是这个函数编译失败!问题出在以下</p>

<pre><code>if value == valueToFind Not every type in Swift can be compared with the equal to operator (==). 我们可以写成如下方式
</code></pre>

<p><code>
func findIndex&lt;T: Equatable&gt;(array: T[], valueToFind: T) -&gt; Int? {
    for (index, value) in enumerate(array) {
        if value == valueToFind {
            return index
        }
    }
    return nil
}
</code>
Equatable表示类型必须遵循Equatable协议,这样编译就能顺利通过了</p>

<p><code>
let doubleIndex = findIndex([3.14159, 0.1, 0.25], 9.3)
// doubleIndex is an optional Int with no value, because 9.3 is not in the array
let stringIndex = findIndex(["Mike", "Malcolm", "Andrea"], "Andrea")
// stringIndex is an optional Int containing a value of 2
</code>
#####Associated Types
When defining a protocol, it is sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name (or alias) to a type that is used as part of the protocol. The actual type to use for that associated type is not specified until the protocol is adopted. Associated types are specified with the typealias keyword.</p>

<p>```
protocol Container {
    typealias ItemType
    mutating func append(item: ItemType)
    var count: Int { get }
    subscript(i: Int) -&gt; ItemType { get }
}</p>

<p>struct IntStack: Container {
    // original IntStack implementation
    var items = Int[]()
    mutating func push(item: Int) {
        items.append(item)
    }
    mutating func pop() -&gt; Int {
        return items.removeLast()
    }
    // conformance to the Container protocol
    typealias ItemType = Int
    mutating func append(item: Int) {
        self.push(item)
    }
    var count: Int {
    return items.count
    }
    subscript(i: Int) -&gt; Int {
        return items[i]
    }
}
```
If you delete the typealias ItemType = Int line from the code above, everything still works, because it is clear what type should be used for ItemType.</p>

<p>You can also make the generic Stack type conform to the Container protocol:</p>

<p><code>
struct Stack&lt;T&gt;: Container {
    // original Stack&lt;T&gt; implementation
    var items = T[]()
    mutating func push(item: T) {
        items.append(item)
    }
    mutating func pop() -&gt; T {
        return items.removeLast()
    }
    // conformance to the Container protocol
    mutating func append(item: T) {
        self.push(item)
    }
    var count: Int {
    return items.count
    }
    subscript(i: Int) -&gt; T {
        return items[i]
    }
}
</code></p>

<h5 id="extending-an-existing-type-to-specify-an-associated-type">Extending an Existing Type to Specify an Associated Type</h5>
<p>Extending an Existing Type to Specify an Associated Type</p>

<p>Swift’s Array type already provides an append method, a count property, and a subscript with an Int index to retrieve its elements. These three capabilities match the requirements of the Container protocol. This means that you can extend Array to conform to the Container protocol simply by declaring that Array adopts the protocol. You do this with an empty extension</p>

<p><code>
extension Array: Container {}
</code>
Array’s existing append method and subscript enable Swift to infer the appropriate type to use for ItemType, just as for the generic Stack type above. After defining this extension, you can use any Array as a Container.</p>

<h5 id="where-clauses">Where Clauses</h5>

<p>The example below defines a generic function called allItemsMatch</p>

<p>The two containers to be checked <code>do not have to be the same type of container</code></p>

<p>```
func allItemsMatch&lt;
    C1: Container, C2: Container
    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable&gt;
    (someContainer: C1, anotherContainer: C2) -&gt; Bool {</p>

<pre><code>    // check that both containers contain the same number of items
    if someContainer.count != anotherContainer.count {
        return false
    }
    
    // check each pair of items to see if they are equivalent
    for i in 0..someContainer.count {
        if someContainer[i] != anotherContainer[i] {
            return false
        }
    }
    
    // all items match, so return true
    return true
</code></pre>

<p>}</p>

<p>var stackOfStrings = Stack<string>()
stackOfStrings.push("uno")
stackOfStrings.push("dos")
stackOfStrings.push("tres")</string></p>

<p>var arrayOfStrings = [“uno”, “dos”, “tres”]</p>

<p>if allItemsMatch(stackOfStrings, arrayOfStrings) {
    println(“All items match.”)
} else {
    println(“Not all items match.”)
}
```
####Advanced Operators
These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C.</p>

<p>Unlike arithmetic operators in C, arithmetic operators in Swift do not overflow by default. Overflow behavior is trapped and reported as an error</p>

<p>To opt in to overflow behavior, use Swift’s second set of arithmetic operators that overflow by default, such as the overflow addition operator (&amp;+). All of these overflow operators begin with an ampersand (&amp;).</p>

<p>When you define your own structures, classes, and enumerations, it can be useful to provide your own implementations of the standard Swift operators for these custom types. Swift makes it easy to provide tailored implementations of these operators and to determine exactly what their behavior should be for each type you create</p>

<p>You’re not just limited to the predefined operators. Swift gives you the freedom to define your own custom infix, prefix, postfix, and assignment operators, with custom precedence and associativity values. These operators can be used and adopted in your code just like any of the predefined operators, and you can even extend existing types to support the custom operators you define.</p>

<h5 id="bitwise-operators">Bitwise Operators</h5>

<ul>
  <li>Bitwise NOT Operator</li>
</ul>

<p><code>
let initialBits: UInt8 = 0b00001111
let invertedBits = ~initialBits  // equals 11110000
</code>
* Bitwise AND Operator</p>

<p><code>
let firstSixBits: UInt8 = 0b11111100
let lastSixBits: UInt8  = 0b00111111
let middleFourBits = firstSixBits &amp; lastSixBits  // equals 00111100
</code>
* Bitwise OR Operator</p>

<p><code>
let someBits: UInt8 = 0b10110010
let moreBits: UInt8 = 0b01011110
let combinedbits = someBits | moreBits  // equals 11111110
</code>
* Bitwise XOR Operator</p>

<p><code>
“let firstBits: UInt8 = 0b00010100
let otherBits: UInt8 = 0b00000101
let outputBits = firstBits ^ otherBits  // equals 00010001
</code>
* Bitwise Left and Right Shift Operators
	* Shifting Behavior for Unsigned Integers
	* Any bits that are moved beyond the bounds of the integer’s storage are discarded.
	* Zeroes are inserted in the spaces left behind after the original bits are moved to the left or right.</p>

<p><code>
let shiftBits: UInt8 = 4   // 00000100 in binary
shiftBits &lt;&lt; 1             // 00001000
shiftBits &lt;&lt; 2             // 00010000
shiftBits &lt;&lt; 5             // 10000000
shiftBits &lt;&lt; 6             // 00000000
shiftBits &gt;&gt; 2             // 00000001
</code>
You can use bit shifting to encode and decode values within other data types:</p>

<p><code>
let pink: UInt32 = 0xCC6699
let redComponent = (pink &amp; 0xFF0000) &gt;&gt; 16    // redComponent is 0xCC, or 204
let greenComponent = (pink &amp; 0x00FF00) &gt;&gt; 8   // greenComponent is 0x66, or 102
let blueComponent = pink &amp; 0x0000FF           // blueComponent is 0x99, or 153
</code>
#####Shifting Behavior for Signed Integers</p>

<ul>
  <li>When you shift signed integers to the right, apply the same rules as for unsigned integers, but fill any empty bits on the left with the sign bit, rather than with a zero.
##### Overflow Operators</li>
</ul>

<p><code>
var willOverflow = UInt8.max
// willOverflow equals 255, which is the largest value a UInt8 can hold
willOverflow = willOverflow &amp;+ 1
// willOverflow is now equal to 0
</code>
Value Underflow</p>

<p><code>
var willUnderflow = UInt8.min
// willUnderflow equals 0, which is the smallest value a UInt8 can hold
willUnderflow = willUnderflow &amp;- 1
// willUnderflow is now equal to 255
</code></p>

<h5 id="division-by-zero">Division by Zero</h5>

<p><code>
let x = 1
let y = x &amp;/ 0
// y is equal to 0
</code></p>

<h5 id="operator-functions">Operator Functions</h5>

<p>Classes and structures can provide their own implementations of existing operators. This is known as <code>overloading</code> the existing operators.</p>

<p><code>
struct Vector2D {
    var x = 0.0, y = 0.0
}
@infix func + (left: Vector2D, right: Vector2D) -&gt; Vector2D {
    return Vector2D(x: left.x + right.x, y: left.y + right.y)
}
</code>
The example above shows how to implement the arithmetic addition operator (+) for a custom structure. The arithmetic addition operator is a binary operator because it operates on two targets and is said to be <code>infix</code> because it appears in between those two targets.</p>

<p><code>
let vector = Vector2D(x: 3.0, y: 1.0)
let anotherVector = Vector2D(x: 2.0, y: 4.0)
let combinedVector = vector + anotherVector
// combinedVector is a Vector2D instance with values of (5.0, 5.0)
</code>
#####Prefix and Postfix Operators</p>

<p>Classes and structures can also provide implementations of the standard unary operators.You implement a prefix or postfix unary operator by writing the @prefix or @postfix attribute before the func keyword when declaring the operator function:</p>

<p>```
@prefix func - (vector: Vector2D) -&gt; Vector2D {
    return Vector2D(x: -vector.x, y: -vector.y)
}</p>

<p>let positive = Vector2D(x: 3.0, y: 4.0)
let negative = -positive
// negative is a Vector2D instance with values of (-3.0, -4.0)
let alsoPositive = -negative
// alsoPositive is a Vector2D instance with values of (3.0, 4.0)
```
#####Compound Assignment Operators</p>

<p>You must  mark a compound assignment operator’s left input parameter as <code>inout</code>, because the parameter’s value will be modified directly from within the operator function.</p>

<p>```
@assignment func += (inout left: Vector2D, right: Vector2D) {
    left = left + right
}</p>

<p>var original = Vector2D(x: 1.0, y: 2.0)
let vectorToAdd = Vector2D(x: 3.0, y: 4.0)
original += vectorToAdd
// original now has values of (4.0, 6.0)
```
You can combine the @assignment attribute with either the @prefix or @postfix attribute, as in this implementation of the prefix increment operator (++a) for Vector2D instances:</p>

<p>```
@prefix @assignment func ++ (inout vector: Vector2D) -&gt; Vector2D {
    vector += Vector2D(x: 1.0, y: 1.0)
    return vector
}</p>

<p>var toIncrement = Vector2D(x: 3.0, y: 4.0)
let afterIncrement = ++toIncrement
// toIncrement now has values of (4.0, 5.0)
// afterIncrement also has values of (4.0, 5.0)
```
<code>注意</code></p>

<pre><code>It is not possible to overload the default assignment operator (=). Only the compound assignment operators can be overloaded. Similarly, the ternary conditional operator (a ? b : c) cannot be overloaded. #####Equivalence Operators
</code></pre>

<p>```
@infix func == (left: Vector2D, right: Vector2D) -&gt; Bool {
    return (left.x == right.x) &amp;&amp; (left.y == right.y)
}
@infix func != (left: Vector2D, right: Vector2D) -&gt; Bool {
    return !(left == right)
}</p>

<p>let twoThree = Vector2D(x: 2.0, y: 3.0)
let anotherTwoThree = Vector2D(x: 2.0, y: 3.0)
if twoThree == anotherTwoThree {
    println(“These two vectors are equivalent.”)
}
// prints “These two vectors are equivalent.
```
#####Custom Operators
New operators are declared at a global level using the operator keyword, and can 
be declared as prefix, infix or postfix:</p>

<p>```
operator prefix +++ {}</p>

<p>@prefix @assignment func +++ (inout vector: Vector2D) -&gt; Vector2D {
    vector += vector
    return vector
}</p>

<p>var toBeDoubled = Vector2D(x: 1.0, y: 4.0)
let afterDoubling = +++toBeDoubled
// toBeDoubled now has values of (2.0, 8.0)
// afterDoubling also has values of (2.0, 8.0)
```
#####Precedence and Associativity for Custom Infix Operators
Custom infix operators can also specify a precedence and an associativity. 
The possible values for associativity are left, right, and none.</p>

<p>The possible values for associativity are left, right, and none. Left-associative operators associate to the left if written next to other left-associative operators of the same precedence. Similarly, right-associative operators associate to the right if written next to other right-associative operators of the same precedence. Non-associative operators cannot be written next to other operators with the same precedence.</p>

<p>The associativity value defaults to none if it is not specified. The precedence value defaults to 100 if it is not specified.</p>

<p><code>
operator infix +- { associativity left precedence 140 }
func +- (left: Vector2D, right: Vector2D) -&gt; Vector2D {
    return Vector2D(x: left.x + right.x, y: left.y - right.y)
}
let firstVector = Vector2D(x: 1.0, y: 2.0)
let secondVector = Vector2D(x: 3.0, y: 4.0)
let plusMinusVector = firstVector +- secondVector
// plusMinusVector is a Vector2D instance with values of (4.0, -2.0)
</code>
####总结
#####Type Identifier</p>

<p><code>
var someValue: ExampleModule.MyType
</code>
#####Tuple Type</p>

<p>Void is a typealias for the the empty tuple type, ()</p>

<h5 id="function-type">Function Type</h5>

<p>You can apply the auto_closure attribute to a function type that has a parameter type of () and that returns the type of an expression (see Type Attributes). An autoclosure function captures an <code>implicit closure over the specified expression</code>, instead of the expression itself. </p>

<p><code>
func simpleAssert(condition: @auto_closure () -&gt; Bool, message: String) {
    if !condition() {
        println(message)
    }
}
let testNumber = 5
simpleAssert(testNumber % 2 == 0, "testNumber isn't an even number.")
// prints "testNumber isn't an even number.
</code>
You can’t mark a variadic parameter or a return type with the inout keyword.</p>

<p>The type of a curried function is equivalent to a nested function type. For example, the type of the curried function addTwoNumbers()() below is Int -&gt; Int -&gt; Int:</p>

<p><code>
func addTwoNumbers(a: Int)(b: Int) -&gt; Int {
    return a + b
}
addTwoNumbers(4)(5) // Returns 9
</code>
The function types of a curried function are grouped from right to left. For instance, the function type Int -&gt; Int -&gt; Int is understood as Int -&gt; (Int -&gt; Int)—that is, a function that takes an Int and returns another function that takes and return an Int</p>

<p><code>
func addTwoNumbers(a: Int) -&gt; (Int -&gt; Int) {
    func addTheSecondNumber(b: Int) -&gt; Int {
        return a + b
    }
    return addTheSecondNumber
}
addTwoNumbers(4)(5) // Returns 9
</code></p>

<h5 id="array">Array</h5>

<p>```
let someArray: String[] = [“Alex”, “Brian”, “Dave”]
let someArray: Array<string> = ["Alex", "Brian", "Dave"]</string></p>

<p>var array3D: Int[][][] = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
```
#####Optional Type</p>

<p><code>
var optionalInteger: Int?
var optionalInteger: Optional&lt;Int&gt;
</code>
When declaring an optional type, be sure to use parentheses to properly scope the ? operator. As an example, to declare an optional array of integers, write the type annotation as (Int[])?; writing Int[]? produces an error.</p>

<h5 id="implicitly-unwrapped-optional-type">Implicitly Unwrapped Optional Type</h5>

<p>if you try to use an implicitly unwrapped optional that has a value of nil, you’ll get a runtime error.</p>

<h5 id="metatype-type">Metatype Type</h5>

<p>A metatype type refers to the type of any type, including class types, structure types, enumeration types, and protocol types.</p>

<p>The metatype of a class, structure, or enumeration type is the name of that type followed by .Type. The metatype of a protocol type—not the concrete type that conforms to the protocol at runtime—is the name of that protocol followed by .Protocol. For example, the metatype of the class type SomeClass is SomeClass.Type and the metatype of the protocol SomeProtocol is SomeProtocol.Protocol.</p>

<p>You can use the postfix self expression to access a type as a value. For example, SomeClass.self returns SomeClass itself, not an instance of SomeClass. And SomeProtocol.self returns SomeProtocol itself, not an instance of a type that conforms to SomeProtocol at runtime. You can use a dynamicType expression with an instance of a type to access that instance’s runtime type as a value</p>

<p><code>
class SomeBaseClass {
    class func printClassName() {
        println("SomeBaseClass")
    }
}
class SomeSubClass: SomeBaseClass {
    override class func printClassName() {
        println("SomeSubClass")
    }
}
let someInstance: SomeBaseClass = SomeSubClass()
// someInstance is of type SomeBaseClass at compile time, but
// someInstance is of type SomeSubClass at runtime
someInstance.dynamicType.printClassName()
// prints "SomeSubClass"
</code>
#####Type Inheritance Clause
When defining a class, the name of the superclass must appear first in the list of type identifiers, followed by any number of protocols the class must conform to.</p>

<h5 id="assignment-operator">Assignment Operator</h5>

<p><code>
(a, _, (b, c)) = ("test", 9.45, (12, 3))
</code>
#####Self Expression</p>

<p>In a mutating method of value type, you can assign a new instance of that value type to self.</p>

<p><code>
struct Point {
    var x = 0.0, y = 0.0
    mutating func moveByX(deltaX: Double, y deltaY: Double) {
        self = Point(x: x + deltaX, y: y + deltaY)
    }
}
</code>
#####Closure Expression</p>

<p>A closure expression can explicitly specify the values that it captures from the surrounding scope using a capture list. A capture list is written as a comma separated list surrounded by square brackets, before the list of parameters</p>

<p>Each entry in the capture list can be marked as weak or unowned to capture a weak or unowned reference to the value.</p>

<p><code>
myFunction { print(self.title) }                    // strong capture
myFunction { [weak self] in print(self!.title) }    // weak capture
myFunction { [unowned self] in print(self.title) }  // unowned capture
</code></p>

<p>You can also bind arbitrary expression to named values in the capture list. The expression is evaluated when the closure is formed, and captured with the specified strength</p>

<p><code>
// Weak capture of "self.parent" as "parent"
myFunction { [weak parent = self.parent] in print(parent!.title) }
</code></p>

<h5 id="initializer-expression">Initializer Expression</h5>

<p>Unlike functions, an initializer can’t be used as a value. For example:</p>

<p><code>
var x = SomeClass.someClassFunction // ok
var y = SomeClass.init              // error
</code>
You also use an initializer expression to delegate to the initializer of a superclass.</p>

<p><code>
class SomeSubClass: SomeSuperClass {
    init() {
        // subclass initialization goes here
        super.init()
    }
}
</code></p>

<h5 id="explicit-member-expression">Explicit Member Expression</h5>

<p><code>
var t = (10, 20, 30)
t.0 = t.1
// Now t is (20, 20, 30)
</code>
A <code>fallthrough</code> statement can appear anywhere inside a switch statement, not just as the last statement of a case block, but it can’t be used in the final case block.</p>

<h5 id="parameter-names">Parameter Names</h5>

<p>以下三种方式等价</p>

<ul>
  <li>external parameter name local parameter name: parameter type</li>
  <li><code>#parameter name: parameter type</code></li>
  <li>_ local parameter name: parameter type</li>
</ul>

<p>An underscore (_) before a local parameter name gives that parameter no name to be used in function calls. The corresponding argument must have no name in function or method calls.</p>

<h5 id="enumerations-with-raw-cases-values">Enumerations with Raw Cases Values</h5>

<p>Each case must have a unique name and be assigned a unique raw value. If the raw value type is specified as Int and you don’t assign a value to the cases explicitly, they are implicitly assigned the values 0, 1, 2, and so on. Each unassigned case of type Int is implicitly assigned a raw value that is automatically incremented from the raw value of the previous case.</p>

<p><code>
enum ExampleEnum: Int {
    case A, B, C = 5, D
}
</code>
#####Class Declaration</p>

<p>When you declare either kind of initializer, you can require any subclass to override it by marking the initializer with the <code>required</code> attribute. </p>

<p>If the current class overrides all of the superclass’s designated initializers, it inherits the superclass’s convenience initializers.</p>

<h5 id="protocol-declaration">Protocol Declaration</h5>

<p>To restrict the adoption of a protocol to class types only, mark the entire protocol declaration with the <code>class_protocol</code> attribute</p>

<p><code>注意</code></p>

<p>If a protocol is already marked with the objc attribute, the class_protocol attribute is implicitly applied to that protocol; there’s no need to mark the protocol with the class_protocol attribute explicitly</p>

<h5 id="protocol-property-declaration">Protocol Property Declaration</h5>

<p><code>
var property name: type { get set }
</code>
That property declaration can’t be implemented as a constant property or a read-only computed property</p>

<p>Protocol method declarations have the same form as function declarations, with two exceptions: They don’t include a function body, and you can’t provide any default parameter values as part of the function declaration</p>

<p>If you’re implementing the method in an extension, use the class keyword if you’re extending a class and the static keyword if you’re extending a structure.</p>

<h5 id="initializer-declaration">Initializer Declaration</h5>

<p>Designated initializers can be declared in the context of a class declaration only and therefore can’t be added to a class using an extension declaration.</p>

<h5 id="extension-declaration">Extension Declaration</h5>

<p><code>
extension type: adopted protocols {
    declarations
}
</code></p>

<p>Extension declarations can’t contain destructor or protocol declarations, store properties, property observers, or other extension declarations. </p>

<p>Properties, methods, and initializers of an existing type can’t be overridden in an extension of that type.</p>

<h5 id="subscript-declaration">Subscript Declaration</h5>

<p><code>
subscript (parameters) -&gt; return type {
    get {
        statements
    }
    set(setter name) {
        statements
    }
}
</code></p>

<h5 id="operator-declaration">Operator Declaration</h5>

<p>You can declare operators of three different fixities: infix, prefix, and postfix. 
The fixity of an operator specifies the relative position of an operator to its operands.</p>

<p><code>
operator infix operatorName {
    precedence precedence level
    associativity associativity
}
</code></p>

<p>The precedence level can be any whole number (decimal integer) from 0 to 255; unlike decimal integer literals, it <code>can’t contain any underscore characters</code>.</p>

<p>Infix operators that are declared without specifying a precedence or associativity are initialized with a precedence level of 100 and an associativity of none.</p>

<p><code>
operator prefix operatorName {}
</code>
####Attributes</p>

<p>Attributes provide more information about a declaration or type. There are two kinds of attributes in Swift, those that apply to <code>declarations</code> and those that apply to <code>types</code>,For instance, the <code>required</code> attribute—when applied to a designated or convenience initializer declaration of a class—indicates that every subclass <code>must</code> implement that initializer.</p>

<p><code>
@attributeName
@attributeName(attribute arguments)
</code>
#####Declaration Attributes</p>

<p>You can apply a declaration attribute to declarations only. However, you can also apply the <code>noreturn</code> attribute to a function or method type.</p>

<ul>
  <li>
    <p>class_protocol</p>

    <pre><code>  Apply this attribute to a protocol to indicate that the protocol can be adopted by class types only.If you apply the objc attribute to a protocol, the class_protocol attribute is implicitly applied to that protocol; there’s no need to mark the protocol with the class_protocol attribute explicitly.
</code></pre>
  </li>
  <li>
    <p>exported</p>

    <pre><code>  Apply this attribute to an import declaration to export the imported module, submodule, or declaration from the current module. If another module imports the current module, that other module can access the items exported by the current module.
</code></pre>
  </li>
  <li>
    <p>noreturn</p>

    <p>Apply this attribute to a function or method declaration to indicate that the corresponding type of that function or method, T, is @noreturn T. You can mark a function or method type with this attribute to indicate that the function or method <code>doesn’t return to its caller</code>.</p>

    <p>You can override a function or method that is not marked with the noreturn attribute with a function or method that is. That said, you can’t override a function or method that is marked with the noreturn attribute with a function or method that is not. Similar rules apply when you implement a protocol method in a conforming type.</p>
  </li>
  <li>
    <p>NSManaged</p>

    <p>Apply this attribute to a stored variable property of a class that inherits from NSManagedObject to indicate that the storage and implementation of the property are provided dynamically by Core Data at runtime based on the associated entity description.</p>
  </li>
  <li>
    <p>objc</p>
  </li>
</ul>

<p>Apply this attribute to any declaration that can be represented in Objective-C—for example, non-nested classes, protocols, properties and methods (including getters and setters) of classes and protocols, initializers, deinitializers, and subscripts. <code>The objc attribute tells the compiler that a declaration is available to use in Objective-C code.</code></p>

<p>If you apply the objc attribute to a class or protocol, it’s implicitly applied to the members of that class or protocol. The compiler also implicitly adds the objc attribute to a class that inherits from another class marked with the objc attribute. <code>Protocols marked with the objc attribute can’t inherit from protocols that aren’t.</code></p>

<p>The objc attribute optionally accepts a single attribute argument, which consists of an identifier. Use this attribute when you want to expose a different name to Objective-C for the entity the objc attribute applies to.You can use this argument to name classes, protocols, methods, getters, setters, and initializers. The example below exposes the getter for the enabled property of the ExampleClass to Objective-C code as isEnabled rather than just as the name of the property itself.</p>

<p><code>
@objc
class ExampleClass {
    var enabled: Bool {
    @objc(isEnabled) get {
        // Return the appropriate value
    }
    }
}
</code>
* optional</p>

<pre><code>You can apply the `optional` attribute only to protocols that are marked with the objc attribute. As a result, only class types can adopt and conform to a protocol that contains optional member requirements.  * required
</code></pre>

<p>Apply this attribute to a designated or convenience initializer of a class to indicate that every subclass must implement that initializer.</p>

<p><code>Required designated initializers must be implemented explicitly</code>
<code>Required convenience initializers</code> can be either implemented explicitly or inherited when the subclass directly implements all of the superclass’s designated initializers (or when the subclass overrides the designated initializers with convenience initializers).
#####Declaration Attributes Used by Interface Builder</p>

<p>Interface Builder attributes are declaration attributes used by Interface Builder to synchronize with Xcode. Swift provides the following Interface Builder attributes: <code>IBAction, IBDesignable, IBInspectable, and IBOutlet</code>. These attributes are conceptually the same as their Objective-C counterparts.</p>

<p>You apply the <code>IBOutlet</code> and <code>IBInspectable</code> attributes to property declarations of a class,You apply the IBAction attribute to method declarations of a class and the IBDesignable attribute to class</p>

<h5 id="type-attributes">Type Attributes</h5>
<p>You can apply type attributes to types only.However, you can also apply the <code>noreturn</code> attribute to a function or method declaration.</p>

<ul>
  <li>
    <p>auto_closure</p>

    <p>This attribute is used to delay the evaluation of an expression by automatically wrapping that expression in a closure with no arguments. Apply this attribute to a function or method type that takes no arguments and that returns the type of the expression.</p>
  </li>
  <li>noreturn
####Patterns</li>
  <li>
    <p>Wildcard Pattern</p>

    <p>A wildcard pattern matches and ignores any value and consists of an underscore (_).</p>
  </li>
</ul>

<p><code>
	for _ in 1...3 {
	    // Do something three times.
	}
</code>
* Identifier Pattern
An identifier pattern matches any value and binds the matched value to a variable or constant name.</p>

<ul>
  <li>
    <p>Value-Binding Pattern</p>

    <p>A value-binding pattern binds matched values to variable or constant names. Value-binding patterns that bind a matched value to the name of a constant begin with the keyword let; those that bind to the name of variable begin with the keyword var.
  Identifiers patterns within a value-binding pattern bind new named variables or constants to their matching values</p>
  </li>
</ul>

<p><code>
let point = (3, 2)
switch point {
    // Bind x and y to the elements of point.
case let (x, y):
    println("The point is at (\(x), \(y)).")
}
// prints "The point is at (3, 2).
</code>
You can constrain a tuple pattern to match certain kinds of tuple types by using type annotations</p>

<ul>
  <li>
    <p>Tuple Pattern</p>

    <p>When a tuple pattern is used as the pattern in a for-in statement or in a variable or constant declaration, it can contain only wildcard patterns, identifier patterns, or other tuple patterns that contain those. For example, the following code <code>isn’t valid</code> because the element 0 in the tuple pattern (x, 0) is an <code>expression pattern</code>:</p>
  </li>
</ul>

<p><code>
let points = [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1)]
// This code isn't valid.
for (x, 0) in points {
    /* ... */
}
</code>
* Type-Casting Patterns
There are two <code>type-casting</code> patterns, the is pattern and the as pattern. Both type-casting patterns appear only in switch statement case labels. The is and as patterns have the following form:</p>

<p><code>
is type
pattern as type
</code>
The is pattern matches a value if the type of that value at runtime is the same as the type specified in the right-hand side of the is pattern—or a subclass of that type. <code>The is pattern behaves like the is operator</code> in that they both perform a type cast but discard the returned type.</p>

<ul>
  <li>
    <p>Expression Pattern</p>

    <p>An expression pattern represents the value of an expression. Expression patterns appear <code>only in switch</code> statement case labels.</p>

    <p>The expression represented by the expression pattern is compared with the value of an input expression using the Swift standard library ~= operator,By default, the ~= operator compares two values of the same type using the == operator. It can also match an integer value with a range of integers in an Range object, as the following example shows:</p>
  </li>
</ul>

<p><code>
let point = (1, 2)
switch point {
case (0, 0):
    println("(0, 0) is at the origin.")
case (-2...2, -2...2):
    println("(\(point.0), \(point.1)) is near the origin.")
default:
    println("The point is at (\(point.0), \(point.1)).")
}
// prints "(1, 2) is near the origin.
</code>
You can overload the ~= operator to provide custom expression matching behavior. For example, you can rewrite the above example to compare the point expression with a string representations of points.</p>

<p><code>
// Overload the ~= operator to match a string with an integer
func ~=(pattern: String, value: Int) -&gt; Bool {
    return pattern == "\(value)"
}
switch point {
case ("0", "0"):
    println("(0, 0) is at the origin.")
case ("-2...2", "-2...2"):
    println("(\(point.0), \(point.1)) is near the origin.")
default:
    println("The point is at (\(point.0), \(point.1)).")
}
// prints "(1, 2) is near the origin.
</code>
####Generic Parameters and Arguments
#####Generic Parameter Clause</p>

<ul>
  <li><code>&lt;generic parameter list&gt;</code></li>
  <li><code>&lt;generic parameter list where requirements&gt;</code></li>
</ul>

<p>The <code>generic parameter list</code> is a comma-separated list of generic parameters, each of which has the following form:</p>

<p><code>type parameter: constraint</code></p>

<p>```
func simpleMin<t: comparable="">(x: T, y: T) -&gt; T {
    if x &lt; y {
        return y
    }
    return x
}</t:></p>

<p>simpleMin(17, 42) // T is inferred to be Int
simpleMin(3.14159, 2.71828) // T is inferred to be Double
```
* Where Clauses</p>

<pre><code>You can specify additional requirements on type parameters and their associated types by including a where clause after the generic parameter list. A where clause consists of the keyword where, followed by a comma-separated list of one or more requirements.

The requirements in a where clause specify that a type parameter inherits from a class or conforms to a protocol or protocol composition.
</code></pre>

 	you can express the constraints that a generic type T inherits from a class C and conforms to a protocol P as &lt;T where T: C, T: P&gt;.

<pre><code>As mentioned above, you can constrain the associated types of type parameters to conform to protocols. For example, the generic parameter clause &lt;T: Generator where T.Element: Equatable&gt; specifies that T conforms to the Generator protocol and the associated type of T, T.Element, conforms to the Equatable protocol (T has the associated type Element because Generator declares Element and T conforms to Generator).

You can also specify the requirement that two types be identical, using the == operator. For example, the generic parameter clause &lt;T: Generator, U: Generator where T.Element == U.Element&gt; expresses the constraints that T and U conform to the Generator protocol and that their associated types must be identical.

You can subclass a generic class, but the subclass must also be a generic class.
</code></pre>

]]></content>
  </entry>
  
</feed>
