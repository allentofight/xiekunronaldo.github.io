<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sencha | AllenToFight Blog]]></title>
  <link href="http://xiekunRonaldo.github.io/blog/categories/sencha/atom.xml" rel="self"/>
  <link href="http://xiekunRonaldo.github.io/"/>
  <updated>2014-12-14T12:23:43+08:00</updated>
  <id>http://xiekunRonaldo.github.io/</id>
  <author>
    <name><![CDATA[AllenToFight]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sencha Touch 工具集]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/12/11/sencha-touch-gong-ju-ji/"/>
    <updated>2014-12-11T23:41:50+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/12/11/sencha-touch-gong-ju-ji</id>
    <content type="html"><![CDATA[<h2>Ext</h2>

<ul>
<li><p>emptyFn</p>

<p>  Ext.emptyFn contains a reusable, empty function that you can pass as a default param‐ eter to callbacks or event handlers.</p></li>
<li><p>version</p>

<p>  Ext.version returns the version of the current Sencha Touch library loaded in the browser.</p></li>
<li><p>bind()</p>

<p>  Ext.bind() is used to attach functions to objects, setting the correct this pointer at the end of the operation. This function is required to solve some quirks inherent to JavaScript.</p></li>
<li><p>clone()</p>

<p>  Ext.clone() can be used to create a shallow copy of the object passed as parameter.</p></li>
<li><p>widget()</p>

<p>   Ext.widget() can be used to create in‐ stances just by using the xtype instead of the whole class name.</p></li>
<li><p>decode() and encode()</p>

<p>  Ext.decode() is a shortcut to Ext.JSON.decode(), used to parse a JSON string and return the corresponding object. Similarly, Ext.encode() is a shorthand for Ext.JSON.encode() and returns the JSON string that represents the object passed as parameter.</p></li>
<li><p>defer()</p>

<p>  Ext.defer() is a shortcut for Ext.Function.defer(), used to delay the execution of a function by some milliseconds. The function also takes as parameters the context of execution, some optional arguments, and of course the number of milliseconds before executing the function. For more control over delayed execution, check the Ext.DelayedTask class, which provides tighter control and more options.</p></li>
<li><p>destroy()
  Ext.destroy() is used to remove objects from memory completely, avoiding memory leaks or dangling references. The objects passed as parameters of this function will be removed from the DOM, and their event listeners will be removed as well.</p></li>
<li>each()
  Ext.each() is a shortcut to Ext.Array.each(), and as the name implies, it takes an array as both parameter and function, and executes the function passing each element of the array as parameter. The callback function can be return false at any time to stop the iteration process.</li>
<li><p>getBody(), getDoc(), and getHead()
  These three functions return a pointer to the current HTML elements representing the <body>, <html>, and <head> elements, respectively.</p></li>
<li><p>getClass() and getClassName()</p>

<p>  These functions can be used to query any Sencha Touch object about itsclass:</p></li>
</ul>


<p>```javascript</p>

<pre><code>var button = Ext.create('Ext.Button'); 

var classObject = Ext.getClass(button); 

var className = Ext.getClassName(button);
</code></pre>

<p>```</p>

<p>The output of the Ext.getClass() function is a complex object dump, showing the complete internal structure of class objects:</p>

<p><code>javascript
$className: "Ext.Button"
$isClass: true
$onExtended: Array[2]
addConfig: function (config, fullMerge) {
addInheritableStatics: function (members) {
addMember: function (name, member) {
addMembers: function (members) {
addStatics: function (members) {
addXtype: function (xtype) {
arguments: null
borrow: function (fromClass, members) {
callParent: function (args) {
caller: null
create: function () {
createAlias: function (a, b) {
displayName: "Ext.Button"
extend: function (parent) {
getName: function () {
implement: function () {
length: 0
mixin: function (name, mixinClass) {
name: ""
onExtended: function (fn, scope) {
override: function (members) {
prototype: Object
superclass: Object
triggerExtended: function () {
xtype: "button"
__proto__: function Empty() {}      
</code></p>

<ul>
<li>getCmp() and getStore()
  These functions return pointers to specific Sencha Touch objects; getCmp() takes an ID as a parameter and returns a pointer to the corresponding component (not HTML element, but <code>component</code>!). On the other hand, getStore() is a shortcut to Ext.da ta.StoreManager.lookup() and provides a handy mechanism to get a pointer to any store defined in the current application.</li>
<li>id()
  The id() function is used to create unique ID values for individual components.</li>
<li>isArray(), isBoolean(), isDate(), isDefined(), isElement(), and others</li>
</ul>


<p><code>javascript
var array = [];
var bool = Ext.isArray(array);
</code></p>

<ul>
<li>iterate()</li>
</ul>


<p><code>javascript
var obj = {
key1: 'value1',
key2: 'value2', key3: 345, key4: false
};
Ext.iterate(obj, function (key, value) {
var str = key + ': ' + value;
console.log(str); }, this);
var arr = [ 'value1', 'value2', 678, true ]; var index = 0;
Ext.iterate(arr, function (item) {
var str = index + '&gt; ' + item;
console.log(str);
++index; }, this);
</code></p>

<ul>
<li>typeOf()</li>
</ul>


<p>Similarly to the isArray() family of functions previously described, the typeOf() function works as an extended (and patched) alternative to the typeof() function provided by the JavaScript standard. The following code shows an example of how to use it:</p>

<p>```javascript
var undef;
var nil = null;
var str = &lsquo;string&rsquo;;
var num = 234;
var bool = true;
var date = new Date();
var func = function () {</p>

<pre><code>console.log('something');
</code></pre>

<p>};
var obj = { key1: &lsquo;value1&rsquo; };
var arr = [ &lsquo;value1&rsquo;, &lsquo;value2&rsquo; ];
var reg = /match/gi;
var elem = Ext.getDoc().dom;
var all = [ undef, nil, str, num, bool, date, func, obj, arr, reg, elem ];
var index = 0;
Ext.iterate(all, function (item) {</p>

<pre><code>var txt = index + '&gt; ' + item + ': ' + Ext.typeOf(item); 
console.log(txt);
++index;
</code></pre>

<p>}, this);
```
The result of the execution of this code is the following:</p>

<p>```javascript
 0> undefined: undefined</p>

<pre><code>1&gt; null: null
2&gt; string: string
3&gt; 234: number
4&gt; true: boolean
5&gt; Wed Nov 07 2012 14:24:22 GMT+0100 (CET): date
6&gt; function () {
    console.log('something');
}: function
7&gt; [object Object]: object
8&gt; value1,value2: array
9&gt; /match/gi: regexp
10&gt; [object HTMLHtmlElement]: element
</code></pre>

<p>```</p>

<h2>Ext.Array</h2>

<ul>
<li>clean()</li>
</ul>


<p>The clean() function removes “empty” items from an array. The mentioned earlier empty in this case is brought by the Ext.isEmpty() function, described later in this chapter.</p>

<p><code>javascript
var sampleArray = [1234, true, 'asdfadf', null, 'another string', '', 0];
var cleanArray = Ext.Array.clean(sampleArray);
</code>
The preceding code yields an array that only contains the values [ 1234, true, &lsquo;asd fadf&rsquo;, &lsquo;another string&rsquo;, 0 ].</p>

<ul>
<li>contains()</li>
</ul>


<p>The contains() function returns a Boolean value stating whether a certain value exists in the array or not.</p>

<p>`&ldquo;javascript
var sampleArray = [1234, true, &lsquo;asdfadf&rsquo;, null, &lsquo;another string&rsquo;, &rdquo;, 0];
var tests = [false, &lsquo;&rsquo;, &lsquo;whatever&rsquo;, &lsquo;asdfadf&rsquo;, 1234, 6578];
Ext.Array.each(tests, function (item) {
if (Ext.Array.contains(sampleArray, item)) {</p>

<pre><code>        console.log('"' + item + '" IS contained');
    }
</code></pre>

<p>else {</p>

<pre><code>console.log('"' + item + '" is NOT contained');
</code></pre>

<p>}
}, this);
```
The result of the code is the following:</p>

<p>```javascript
&ldquo;false&rdquo; is NOT contained</p>

<pre><code>"" IS contained
"whatever" is NOT contained
"asdfadf" IS contained
"1234" IS contained
"6578" is NOT contained
</code></pre>

<p>```</p>

<ul>
<li>difference()
The difference() function returns a new array containing the result of subtracting, from the first array passed as parameter, the elements that exist in a second array passed as parameter. For example:</li>
</ul>


<p><code>javascript
var sampleArray = [1234, true, 'asdfadf', null, 'another string', '', 0];
var anotherArray = ['asdfadf', new Date(), 1234, true, '', 234];
var difference = Ext.Array.difference(sampleArray, anotherArray);
</code>
The contents of the preceding difference variable are the following: [ null, &lsquo;another string&rsquo;, 0 ].</p>

<ul>
<li>erase()</li>
</ul>


<p>The erase() function provides a simpler API to the standard Array.splice() method of the JavaScript standard library. It allows you to remove a certain number of items from an array, starting at a particular point.</p>

<p><code>javascript
var sampleArray = [1234, true, 'asdfadf', null, 'another string', '', 0];
var erasedArray = Ext.Array.erase(sampleArray, 1, 3);
</code></p>

<ul>
<li>every() and some()</li>
</ul>


<p>The every() and some() functions iterate over the items of an array, evaluating each of them in a function passed as parameter; both functions work very similarly, with the difference that every() stops iterating as soon as the function returns false, while some() will stop iterating as soon as the function returns true. For example:</p>

<p>`&ldquo;javascript
var sampleArray = [1234, true, &lsquo;asdfadf&rsquo;, null, &lsquo;another string&rsquo;, &rdquo;, 0];
var result = Ext.Array.every(sampleArray, function (item) {</p>

<pre><code>    // If here the inner function returns "false" at any point, the
    // loop ends and the value in "result" will be "false."
    // In this case, however, as 'whatever' is not contained in the
    // sampleArray, the function always returns true, and 'result'
    // contains true as well.
</code></pre>

<p>return (item !== &lsquo;whatever&rsquo;); }, this);</p>

<pre><code>console.log('Result of `every()`: ' + result);
</code></pre>

<p>var sampleArray = [1234, true, &lsquo;asdfadf&rsquo;, null, &lsquo;another string&rsquo;, &lsquo;&rsquo;, 0];
console.log(&lsquo;Original Array&rsquo;);
console.dir(sampleArray);
var result = Ext.Array.some(sampleArray, function (item) {
// If here the inner function returns &ldquo;true&rdquo; at any point, the
// loop ends and the value in &ldquo;result&rdquo; will be &ldquo;true.&rdquo;
// In this case, however, as &lsquo;another string&rsquo; is contained in the
// sampleArray, the function returns true at some point, and &lsquo;result&rsquo; // contains true as well.
return (item === &lsquo;another string&rsquo;);
}, this);
console.log(&lsquo;Result of some(): &rsquo; + result);
```
The respective outputs would look like this:</p>

<p>```javascript
Result of every(): true
Result of some(): true</p>

<p>```</p>

<ul>
<li><p>filter()</p>

<p>  The filter() function evaluates every item of the array passed as parameter, and it returns a new array that contains all the values where the provided function returns true.</p></li>
</ul>


<p><code>javascript
var sampleArray = [1234, true, 'asdfadf', null, 'another string', '', 0];
var filteredArray = Ext.Array.filter(sampleArray, function (item) {
return (typeof(item) === 'string'); }, this);
</code></p>

<ul>
<li><p>flatten()</p>

<p>  The flatten() function takes an array with nested arrays and brings all the values in the nested arrays as part of the topmost one:</p></li>
</ul>


<p><code>javascript
var sampleArray = [1234, true, 'asdfadf', ['inner array', true, false, 234], 'an other string', '', 0];
var flattenedArray = Ext.Array.flatten(sampleArray);
</code></p>

<ul>
<li><p>from()
The from() function creates a new array from any object or primitive passed as parameter:
<code>javascript
var bool = true;
var booleanArray = Ext.Array.from(bool);
</code></p></li>
<li><p>include()
  The include() function works like a selective push() method: It adds new items to an array only if those items do not already exist, ensuring that the each element appears only once:
<code>javascript
var sampleArray = [1234, 456, true, 'test'];
Ext.Array.include(sampleArray, true);
Ext.Array.include(sampleArray, 'whatever');
</code>
The result of the preceding code is the following array: [ 1234, 456, true, &lsquo;test&rsquo;, &lsquo;whatever&rsquo; ]. The value true is not added a second time, since it already exists when the first call to include() is made.</p></li>
<li><p>indexOf()
  As the name implies, this function returns the index of the item passed as parameter. In case the object is not found, the function returns -1:</p></li>
<li><p>insert()
The insert() function allows you to interpolate values in an existing array at a partic‐ ular position:
<code>javascript
var sampleArray = [1234, 456, true, 'test'];
var itemsToInsert = [768, 'something', false, null];
var insertedArray = Ext.Array.insert(sampleArray, 1, itemsToInsert);
</code>
The result of the preceding code is the following: [ 1234, 768, &ldquo;something&rdquo;, false, null, 456, true, &ldquo;test&rdquo;]. The values of the array itemsToInsert have been em‐ bedded in the first array, starting at position number 1.</p></li>
<li><p>intersect()
The intersect() function returns a new array that merges the values from all the arrays passed as parameter (this function can take a large number of arguments):
<code>javascript
var sampleArray = [1234, 456, true, 'test'];
var anotherArray = [true, false, 'test', 'whatever', 456];
var intersection = Ext.Array.intersect(anotherArray, sampleArray);
</code>
The result of the intersection is the following: [ true ].</p></li>
<li><p>map() and pluck()
The map() and pluck() functions will sound familiar to developers versed in functional languages such as Haskell or Lisp. They both operate over the contents of an array but in different ways: map() will execute a function in each item, returning a new array with the results of each execution. On the other hand, pluck() will return a new array with the values of a particular key from an array of objects:
<code>javascript
var sampleArray = [1234, 456, true, 'test'];
var mapped = Ext.Array.map(sampleArray, function (item) {
return item + '_boom'; }, this);
</code></p></li>
</ul>


<p>The mapped array looks like this: [ &lsquo;1234_boom&rsquo;, &lsquo;456_boom&rsquo;, &lsquo;true_boom&rsquo;, &lsquo;test_boom&rsquo; ].
```javascript
var sampleArray = [{ key1: &lsquo;value1&rsquo;,</p>

<pre><code>    key2: 'value2'
    }, {
    key1: 'value3',
    key2: 'value4'
}, {
    key1: 'value5',
    key2: 'value6'
}, {
    key1: 'value7',
    key2: 'value8'
}, {
    key1: 'value9',
    key2: 'value0'
}];
</code></pre>

<p>console.log(&lsquo;Original Array&rsquo;); console.dir(sampleArray);
var plucked = Ext.Array.pluck(sampleArray, &lsquo;key1&rsquo;);
```</p>

<p>After this code executes, plucked contains all the values referenced by the key key1: [ &lsquo;value1&rsquo;, &lsquo;value3&rsquo;, &lsquo;value5&rsquo;, &lsquo;value7&rsquo;, &lsquo;value9&rsquo; ].</p>

<ul>
<li>max(), mean(), min(), and sum()</li>
</ul>


<p><code>javascript
var sampleArray = [1234, 456, -234, 654, 0, 'whatever']; var max = Ext.Array.max(sampleArray);
var min = Ext.Array.min(sampleArray);
var sum = Ext.Array.sum(sampleArray);
var sampleArray2 = [1234, 456, -234, 654, 0]; var mean = Ext.Array.mean(sampleArray2);
</code>
max(), mean(), min(), and sum()
All of these functions perform the typical mathematical operations on any array:
<code>javascript
var sampleArray = [1234, 456, -234, 654, 0, 'whatever']; var max = Ext.Array.max(sampleArray);
var min = Ext.Array.min(sampleArray);
var sum = Ext.Array.sum(sampleArray);
var sampleArray2 = [1234, 456, -234, 654, 0]; var mean = Ext.Array.mean(sampleArray2);
</code>
After executing the preceding code, max is 1234, min is equal to -234, sum is 2110what ever (pay attention to how the string was added at the end of the mathematical sum!) and mean is equal to 422.</p>

<ul>
<li>merge() and union()
The merge() function (and its alias union()) create a new array with all the values of those passed as parameter, but appearing only once:
<code>javascript
var sampleArray = [1234, 456, true, 'test'];
var anotherArray = [true, false, 'test', 'whatever', 456]; var merge = Ext.Array.merge(anotherArray, sampleArray);
</code>
The result of the preceding code is the following: [ true, false, &lsquo;test&rsquo;, &lsquo;whatev er&rsquo;, 456, 1234 ].</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sencha Touch问题汇总]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/12/sencha-touchwen-ti-hui-zong/"/>
    <updated>2014-10-12T09:42:19+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/12/sencha-touchwen-ti-hui-zong</id>
    <content type="html"><![CDATA[<ol>
<li><p><a href="http://abitofcoding.blogspot.ch/2014/01/ios7-phonegap-layout-fix.html">iOS7 Phonegap / Cordova statusbar fix</a></p></li>
<li><p>适配retina屏</p></li>
</ol>


<p>```</p>

<pre><code>#yourimage {
    height: 100px;
    width: 320px;
    -webkit-background-size: 320px 100px; // Critical line! 
    background: url("images/yourimage.png") no-repeat;
}
</code></pre>

<p>// This detects the iPhone 4 Retina display</p>

<pre><code>@media only screen and (-webkit-min-device-pixel-ratio: 2) {
    #yourimage {
        background: url("images/yourimage@2x.png") no-repeat;
    }
}
</code></pre>

<p><code>``
3.创建实例的方式有两种</code>Ext.create()`和new,不过建议用Ext.create，这样可以用到动态加载的好处</p>

<p>4.NestedList的方法中判断是哪一个record(用tpl)</p>

<p>```javascript</p>

<p>getItemTextTpl: function(record) {</p>

<pre><code>return '&lt;tpl if="text==\'Fruit\'"&gt;{text}&lt;/tpl&gt;{' + this.getDisplayField() + '}';
</code></pre>

<p>}
```
5.本地资源编译到device上无法加载的问题
需要在app.json的resources数据里加上本地资源的路径!
6.Ext.widget() 可以用xtype 来创建实例!
7.工具集(Foundation Utilities)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/10/build/"/>
    <updated>2014-10-10T09:20:02+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/10/build</id>
    <content type="html"><![CDATA[<h4>Adding Non-MVC Folders to Your Build Package</h4>

<p>For the FindACab app, I have added the utils folder to the app classpath in ./sencha/sencha.cfg:</p>

<p><code>javascriptapp.classpath=${app.dir}/app.js,${app.dir}/app,${app.dir}/utils
</code></p>

<h4>Adding Extra Resources to Your Build Package</h4>

<p>In other situations, you might want to include extra resources to your build package — for example, a folder with images or a folder with JSON data. There are two ways to include these in your build. I will explain both. First (the easy way, shown in Example 14-1), you can add the folder to the resources array in the <code>app.json</code> file. By default, Sencha Cmd already created a selection.</p>

<p>```//Example 14-1. Additional resources that need to be copied during the build process</p>

<p>&ldquo;resources&rdquo;: [</p>

<pre><code>"resources/images", 
"resources/css", 
"resources/icons", 
"resources/startup"],```
</code></pre>

<p><code>TIP</code>
Additional JavaScripts or stylesheets can be entered into the <code>js</code> or <code>css</code> arrays.
The other way of adding resources to your build is what I call the hardcore way, but it’s kinda cool so I want to mention it.
Sencha Cmd has Apache Ant integration. You can modify the Ant build script build.xml totally to your own needs.
See Example 14-2; this little Ant script copies a data folder from the application root to the production build folder. Isn’t it awesome?
```
// Example 14-2. Copying a folder to a different location
<target name="-after-build"/>
<target name="build"        depends="init,-before-build,-build,-after-build"        description="Builds the application"/></p>

<pre><code>    &lt;copy todir="${build.dir}/data" overwrite="true"&gt;   &lt;fileset dir="${basedir}/data"&gt;     &lt;include name="**/*" /&gt;     &lt;/fileset&gt;&lt;/copy&gt;```
</code></pre>

<p>In the next sections, you’ll learn how to:</p>

<ul>
<li>Create a test build with Sencha Cmd<em> Create a production build with Sencha Cmd</em> Create a native build with Sencha Cmd and Adobe PhoneGap

<h4>Creating a Test Build with Sencha Cmd</h4>

<p>With Sencha Cmd on the command line, you can generate a build package optimized for test environments. On the command line, navigate to the app folder and run the following:
<code>
  sencha app build testing</code>
<code>NOTE</code>
I’m often asked which tools are good for testing a Sencha Touch application. For UI testing, Siesta is a good tool; for syntax testing, you could use JS Lint; and for unit testing, Jasmine is a popular testing tool. For more information, check out this <a href="http://www.sencha.com/blog/automating-unit-tests">great blog post</a>, which contains all the links to the tools</p></li>
</ul>


<h4>Creating a Production Build with Sencha Cmd</h4>

<p>With Sencha Cmd on the command line, you can generate a build package optimized for production. On the command line, navigate to the app folder and run the following:</p>

<p>```</p>

<pre><code>sencha app build
</code></pre>

<p>```</p>

<h4>Creating a Native Build with Sencha Cmd and Adobe PhoneGap</h4>

<p>There are three products you can use to create a native app from a Sencha Touch code base:</p>

<ul>
<li>Sencha Mobile Packager</li>
<li>Adobe PhoneGap</li>
<li>Apache Cordova</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Themes and Styles]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/09/themes-and-styles/"/>
    <updated>2014-10-09T18:40:26+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/09/themes-and-styles</id>
    <content type="html"><![CDATA[<p>Mobile web applications should either look and behave <code>exactly</code> the same as native apps, or they shouldn’t look like native at all</p>

<h4>Sencha Touch Stylesheets</h4>

<p>In Sencha Touch version 2.3, the framework ships with stylesheets that mimic native designs and experiences of all modern major devices</p>

<p>When you create a production build of your app and you want to host it on the Web, it’s even possible to make use of the Sencha platform switcher. This switcher can make sure that the correct stylesheet will be shown for each platform. For example, the BB10 theme will be used when the platform is BlackBerry and show the Windows theme when the app is being viewed on Internet Explorer 10.</p>

<h4>Using Sass</h4>

<p>Sass stands for “syntactically awesome style sheets,” a powerful CSS extension. And yes, it is awesome! I describe it as CSS infused with a lot of coffee and Red Bull, because it overcomes many of the shortcomings of CSS.
Sass is a preprocessor, which means that Sass files should be compiled to (minified) CSS files. A CSS file is the stylesheet your browser uses to display Sencha Touch components. (And that’s also the file that goes into your production build or server.) Therefore, Sass needs a compiler. You can compile Sencha Sass themes with Sass and Compass installed on top of Ruby (see Appendix A), but if you are not really into design, you can also use just the <code>Sencha Cmd build</code> process. A Sencha app build can compile Sass files too, but it just takes a little bit longer.</p>

<p>Sass has two syntaxes.</p>

<ul>
<li><p>The most commonly used syntax is known as <code>SCSS</code> (which stands for Sassy CSS), and is a superset of CSS3’s syntax. This means that every valid CSS3 stylesheet is valid SCSS as well. SCSS files use the extension <code>.scss</code>.</p></li>
<li><p>The second, older syntax is known as the indented syntax (or just .sass). Instead of brackets and semicolons, it uses line indentation to specify blocks. Files in the indented syntax use the extension <code>.sass</code>.</p></li>
</ul>


<p>The Sencha themes are <code>Sassy CSS files</code>. You can combine CSS3 syntax with the amazing features of Sass.</p>

<p>In this chapter, you’ll learn how to:</p>

<ul>
<li>Use platform-specific out-of-the-box themes</li>
<li>Create your own custom theme<em> Incorporate custom fonts</em> Incorporate custom icons* Optimize your stylesheet for best performance</li>
</ul>


<p>Sencha Cmd 4 and higher have the command <code>sencha app watch</code>, You can compare this with the Compass command <code>compass watch</code>,. Sencha Cmd watches the app and every time you hit Save, Sencha Cmd builds your app and compiles your Sass stylesheets. When changes are detected, only the minimum amount of work necessary is performed to bring your app and its CSS up to date, saving you from rebuilding your Sass. It is so quick that when you navigate to your browser, the latest version is present
After writing your Sass theme, use the following command from the resources/sass folder to compile to app.css:<code>
sencha ant sass</code>
<code>TIP</code>
There are some great resources on Sass and CSS at <a href="http://sass-lang.com/">the Sass website</a>. To learn more about Sass, see <a href="http://vimeo.com/75258560">The Sass Way. Learn Sass at Code School</a>, and check out “Unleash Your Inner Picasso: Advanced Theming by Platform,” an online video tutorial by Robert Dogan</p>

<h4>Incorporating Custom Fonts</h4>

<p>When you want to incorporate fonts in your theme, you can use <code>@font-face</code>. @font- face is a CSS technique that is often used to incorporate custom web fonts. Where system fonts will be visible only if they’re available on your OS, @font-face directly <code>downloads</code> the font from the Internet to display it</p>

<p><code>TIP</code></p>

<p>Read more about @font-face on <a href="http://www.paulirish.com/2010/font-face-gotchas/">Paul Irish’s blog</a> and download HTML5 @font-face kits from <a href="http://www.fontsquirrel.com/">FontSquirrel</a> or at font ex. You can also use a font service like Adobe <a href="https://typekit.com/">Typekit</a> or <a href="http://www.google.com/fonts">Google Fonts</a>.Check out the <a href="http://pictos.cc/font/">Pictos icon font</a>, the <a href="https://icomoon.io/">Ico Moon icon font</a>, and the Fontello icon font. There’s more information about icon fonts at <a href="http://css-tricks.com/html-for-icon-font-usage/">CSS-Tricks</a>, and you can use <a href="https://www.branah.com/unicode-converter">Branah’s tool</a> to convert text to unicodes and back.</p>

<h4>Optimizing Your Stylesheet for Best Performance</h4>

<ul>
<li>Minify your stylesheet* Import only the required mixins in your stylesheet * Exclude experimental support for uncommon browsers * Exclude unusable default fonts and icons</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[View Components]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/08/view-components/"/>
    <updated>2014-10-08T22:18:11+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/08/view-components</id>
    <content type="html"><![CDATA[<p>This chapter is all about view components. I will discuss how to implement messageboxes, lists, panels, toolbars, charts, and maps</p>

<p>In this chapter, you’ll learn how to implement:
* A messagebox Toolbars and title bars Buttons<em> Lists</em> A Google Map* Overlays Charts</p>

<h4>Implementing a Messagebox</h4>

<p>Unlike the standard JavaScript <code>alert</code> method, a messagebox in Sencha Touch is <code>asynchronous</code>. In standard JavaScript, the browser pauses execution until you press OK. In Sencha Touch, showing a messagebox will not cause the code to stop. For this reason, if you have code that should run only after some user feedback from the messagebox, you should use a callback function.
When you want to implement a messagebox, you will have to require Ext.MessageBox at the top of your view class. You don’t need to instantiate a messagebox (although you could); Ext.Msg is a global shared singleton instance of the Ext.MessageBox class that you can use in most cases:
The previous code describes the alert() method, which you can visually compare with the standard alert messagebox in JavaScript. See Figure 11-1.</p>

<p><img src="/images/2014/10/figure11-1.png"></p>

<p>It displays a small window, with a title, a message, and an OK button. In addition to thealert, there are these types of messageboxes:
* prompt(), shown in Figure 11-2, which is a messagebox with a title, message, a textfield, and Cancel and OK buttons<em> confirm(), shown in Figure 11-3, which is a messagebox with a title, a message, and No and Yes buttons</em> show(), which provides even more options.
Here’s an example of the prompt() messagebox; the callback contains the button id and the entered value. The button id can be Yes, No, or Cancel (Cancel means close the messagebox without pressing the Yes and No buttons):
```
Ext.Msg.prompt(&lsquo;Welcome&rsquo;, &lsquo;Please enter your name&rsquo;, function(btn, val) { //callback</p>

<pre><code>console.log(btn, val);
</code></pre>

<p>});<code>
There is one more messagebox method that is worth mentioning: show().The show() method will give you many more options; you can pass in a config object. Here I set up
a customized prompt() messagebox. It has a width of 500 pixels, it accepts multiline input, it has an info icon, and I want to specify my own set of buttons. Also, I will define a callback function:</code>
var myPromptBox = Ext.Msg.show({</p>

<pre><code>title: 'Address',
message: 'Please enter your address:',
width: 500,
buttons: Ext.MessageBox.YESNOCANCEL,
iconCls: Ext.MessageBox.QUESTION,
multiLine: true,
prompt: {
    maxlength: 180,
    autocapitalize: true
},
fn: function(buttonId) {
    alert('You pressed the "' + buttonId + '" button.');
}
</code></pre>

<p>});```
The iconCls can set an icon CSS class on the messagebox to showcase an icon. You can maintain this in your theme, but out of the box Sencha Touch ships with the following messagebox icons:
* Ext.MessageBox.ERROR (a round error sign)
* Ext.MessageBox.INFO (a round info sign)
* Ext.MessageBox.QUESTION (a question mark)
* Ext.MessageBox.WARNING (a warning sign)</p>

<p>The following sets of buttons are available in Sencha Touch:</p>

<ul>
<li>Ext.MessageBox.OK (OK button with action UI skin)<em> Ext.MessageBox.YES (Yes button with action UI skin)</em> Ext.MessageBox.NO (No button)<em> Ext.MessageBox.CANCEL (Cancel button)</em> Ext.MessageBox.YESNOCANCEL (Cancel button, No button, and Yes button with action UI skin)* Ext.MessageBox.OKCANCEL (Cancel button, and OK button with action UI skin) * Ext.MessageBox.YESNO (No button, and Yes button with action UI skin)
If these button sets are in the wrong order, or you would like to specify your own button text and UI skins, you can pass in an array with Ext.Buttons into the buttons config, as you can see in Figure 11-4:
<code>
var pirateBox = Ext.Msg.show({
  title: 'Ahoy!',
  message: 'Stop pirate, would ye like t\' proceed?',
  iconCls: Ext.MessageBox.ERROR,
  width: 200,
  buttons: [{
      text: 'Aye',
      itemId: 'yes',
      ui: 'action'
  }, {
      text: 'Avast',
      itemId: 'no',
      ui: 'decline'
  }],
  fn: function(buttonId) {
      alert('You pressed the "' + buttonId + '" button.');
  }
});</code>
<img src="/images/2014/10/figure11-4.png"></li>
</ul>


<p>To hide the previous messagebox, just run the hide() method on the pirateBox.</p>

<h4>Implementing Toolbars and Title Bars</h4>

<p>When you want to implement a toolbar (or title bar) view component (Figure 11-5), you will have to add the Ext.Toolbar (or Ext.TitleBar) to the requires at the top of your view class. After that, you can instantiate the component by using the Ext.create(&ldquo;Ext.Toolbar&rdquo;, {}) syntax, or by lazy instantiating (nesting the xtype called toolbar). Using the xtype is the best practice for coding real-world MVC applications.</p>

<p><img src="/images/2014/10/figure11-5.png"></p>

<p>Implementing a title bar works exactly the same. The only difference is that the class from which you implement the instance is called Ext.TitleBar and the xtype is called titlebar. Although the title bar does not extend from Ext.Toolbar, they have a very similar appearance and setup.</p>

<p>The main difference between a Ext.TitleBar and a Ext.Toolbar is that the title config is always centered horizontally in a title bar, between any items aligned left or right. By default, any item in a title bar or toolbar is a button, so you do not need to explicitly set it. Items in a title bar, such as buttons, can be docked to the left or right side of the bar, via the align config.</p>

<h4>Implementing Lists</h4>

<p>A list is a data-aware component. You will need to hook up a data store to the list (with a fields model) to display any items. Following is an example of an Ext.List. First you must make sure you add the Ext.List to the requires array at the top of your view class so the Ext.Loader can load the framework class. Afterward you will use the object literal notation to create a Sencha Touch list:</p>

<p>```
{</p>

<pre><code>xtype: 'list',
store: {
    fields: ['name'],
    data: [{
        name: 'Leonardo'
    }, {
        name: 'Donatello'
    }, {
        name: 'Michelangelo'
    }, {
        name: 'Raphael'
    }]
},
itemTpl: '{name}'
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
