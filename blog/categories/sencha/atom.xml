<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sencha | AllenToFight Blog]]></title>
  <link href="http://xiekunRonaldo.github.io/blog/categories/sencha/atom.xml" rel="self"/>
  <link href="http://xiekunRonaldo.github.io/"/>
  <updated>2014-10-21T21:25:42+08:00</updated>
  <id>http://xiekunRonaldo.github.io/</id>
  <author>
    <name><![CDATA[AllenToFight]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sencha Touch问题汇总]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/12/sencha-touchwen-ti-hui-zong/"/>
    <updated>2014-10-12T09:42:19+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/12/sencha-touchwen-ti-hui-zong</id>
    <content type="html"><![CDATA[<ol>
<li><p><a href="http://abitofcoding.blogspot.ch/2014/01/ios7-phonegap-layout-fix.html">iOS7 Phonegap / Cordova statusbar fix</a></p></li>
<li><p>适配retina屏</p></li>
</ol>


<p>```</p>

<pre><code>#yourimage {
    height: 100px;
    width: 320px;
    -webkit-background-size: 320px 100px; // Critical line! 
    background: url("images/yourimage.png") no-repeat;
}
</code></pre>

<p>// This detects the iPhone 4 Retina display</p>

<pre><code>@media only screen and (-webkit-min-device-pixel-ratio: 2) {
    #yourimage {
        background: url("images/yourimage@2x.png") no-repeat;
    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/10/build/"/>
    <updated>2014-10-10T09:20:02+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/10/build</id>
    <content type="html"><![CDATA[<h4>Adding Non-MVC Folders to Your Build Package</h4>

<p>For the FindACab app, I have added the utils folder to the app classpath in ./sencha/sencha.cfg:</p>

<p><code>javascriptapp.classpath=${app.dir}/app.js,${app.dir}/app,${app.dir}/utils
</code></p>

<h4>Adding Extra Resources to Your Build Package</h4>

<p>In other situations, you might want to include extra resources to your build package — for example, a folder with images or a folder with JSON data. There are two ways to include these in your build. I will explain both. First (the easy way, shown in Example 14-1), you can add the folder to the resources array in the <code>app.json</code> file. By default, Sencha Cmd already created a selection.</p>

<p>```//Example 14-1. Additional resources that need to be copied during the build process</p>

<p>&ldquo;resources&rdquo;: [</p>

<pre><code>"resources/images", 
"resources/css", 
"resources/icons", 
"resources/startup"],```
</code></pre>

<p><code>TIP</code>
Additional JavaScripts or stylesheets can be entered into the <code>js</code> or <code>css</code> arrays.
The other way of adding resources to your build is what I call the hardcore way, but it’s kinda cool so I want to mention it.
Sencha Cmd has Apache Ant integration. You can modify the Ant build script build.xml totally to your own needs.
See Example 14-2; this little Ant script copies a data folder from the application root to the production build folder. Isn’t it awesome?
```
// Example 14-2. Copying a folder to a different location
<target name="-after-build"/>
<target name="build"        depends="init,-before-build,-build,-after-build"        description="Builds the application"/></p>

<pre><code>    &lt;copy todir="${build.dir}/data" overwrite="true"&gt;   &lt;fileset dir="${basedir}/data"&gt;     &lt;include name="**/*" /&gt;     &lt;/fileset&gt;&lt;/copy&gt;```
</code></pre>

<p>In the next sections, you’ll learn how to:</p>

<ul>
<li>Create a test build with Sencha Cmd<em> Create a production build with Sencha Cmd</em> Create a native build with Sencha Cmd and Adobe PhoneGap

<h4>Creating a Test Build with Sencha Cmd</h4>

<p>With Sencha Cmd on the command line, you can generate a build package optimized for test environments. On the command line, navigate to the app folder and run the following:
<code>
  sencha app build testing</code>
<code>NOTE</code>
I’m often asked which tools are good for testing a Sencha Touch application. For UI testing, Siesta is a good tool; for syntax testing, you could use JS Lint; and for unit testing, Jasmine is a popular testing tool. For more information, check out this <a href="http://www.sencha.com/blog/automating-unit-tests">great blog post</a>, which contains all the links to the tools</p></li>
</ul>


<h4>Creating a Production Build with Sencha Cmd</h4>

<p>With Sencha Cmd on the command line, you can generate a build package optimized for production. On the command line, navigate to the app folder and run the following:</p>

<p>```</p>

<pre><code>sencha app build
</code></pre>

<p>```</p>

<h4>Creating a Native Build with Sencha Cmd and Adobe PhoneGap</h4>

<p>There are three products you can use to create a native app from a Sencha Touch code base:</p>

<ul>
<li>Sencha Mobile Packager</li>
<li>Adobe PhoneGap</li>
<li>Apache Cordova</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Themes and Styles]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/09/themes-and-styles/"/>
    <updated>2014-10-09T18:40:26+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/09/themes-and-styles</id>
    <content type="html"><![CDATA[<p>Mobile web applications should either look and behave <code>exactly</code> the same as native apps, or they shouldn’t look like native at all</p>

<h4>Sencha Touch Stylesheets</h4>

<p>In Sencha Touch version 2.3, the framework ships with stylesheets that mimic native designs and experiences of all modern major devices</p>

<p>When you create a production build of your app and you want to host it on the Web, it’s even possible to make use of the Sencha platform switcher. This switcher can make sure that the correct stylesheet will be shown for each platform. For example, the BB10 theme will be used when the platform is BlackBerry and show the Windows theme when the app is being viewed on Internet Explorer 10.</p>

<h4>Using Sass</h4>

<p>Sass stands for “syntactically awesome style sheets,” a powerful CSS extension. And yes, it is awesome! I describe it as CSS infused with a lot of coffee and Red Bull, because it overcomes many of the shortcomings of CSS.
Sass is a preprocessor, which means that Sass files should be compiled to (minified) CSS files. A CSS file is the stylesheet your browser uses to display Sencha Touch components. (And that’s also the file that goes into your production build or server.) Therefore, Sass needs a compiler. You can compile Sencha Sass themes with Sass and Compass installed on top of Ruby (see Appendix A), but if you are not really into design, you can also use just the <code>Sencha Cmd build</code> process. A Sencha app build can compile Sass files too, but it just takes a little bit longer.</p>

<p>Sass has two syntaxes.</p>

<ul>
<li><p>The most commonly used syntax is known as <code>SCSS</code> (which stands for Sassy CSS), and is a superset of CSS3’s syntax. This means that every valid CSS3 stylesheet is valid SCSS as well. SCSS files use the extension <code>.scss</code>.</p></li>
<li><p>The second, older syntax is known as the indented syntax (or just .sass). Instead of brackets and semicolons, it uses line indentation to specify blocks. Files in the indented syntax use the extension <code>.sass</code>.</p></li>
</ul>


<p>The Sencha themes are <code>Sassy CSS files</code>. You can combine CSS3 syntax with the amazing features of Sass.</p>

<p>In this chapter, you’ll learn how to:</p>

<ul>
<li>Use platform-specific out-of-the-box themes</li>
<li>Create your own custom theme<em> Incorporate custom fonts</em> Incorporate custom icons* Optimize your stylesheet for best performance</li>
</ul>


<p>Sencha Cmd 4 and higher have the command <code>sencha app watch</code>, You can compare this with the Compass command <code>compass watch</code>,. Sencha Cmd watches the app and every time you hit Save, Sencha Cmd builds your app and compiles your Sass stylesheets. When changes are detected, only the minimum amount of work necessary is performed to bring your app and its CSS up to date, saving you from rebuilding your Sass. It is so quick that when you navigate to your browser, the latest version is present
After writing your Sass theme, use the following command from the resources/sass folder to compile to app.css:<code>
sencha ant sass</code>
<code>TIP</code>
There are some great resources on Sass and CSS at <a href="http://sass-lang.com/">the Sass website</a>. To learn more about Sass, see <a href="http://vimeo.com/75258560">The Sass Way. Learn Sass at Code School</a>, and check out “Unleash Your Inner Picasso: Advanced Theming by Platform,” an online video tutorial by Robert Dogan</p>

<h4>Incorporating Custom Fonts</h4>

<p>When you want to incorporate fonts in your theme, you can use <code>@font-face</code>. @font- face is a CSS technique that is often used to incorporate custom web fonts. Where system fonts will be visible only if they’re available on your OS, @font-face directly <code>downloads</code> the font from the Internet to display it</p>

<p><code>TIP</code></p>

<p>Read more about @font-face on <a href="http://www.paulirish.com/2010/font-face-gotchas/">Paul Irish’s blog</a> and download HTML5 @font-face kits from <a href="http://www.fontsquirrel.com/">FontSquirrel</a> or at font ex. You can also use a font service like Adobe <a href="https://typekit.com/">Typekit</a> or <a href="http://www.google.com/fonts">Google Fonts</a>.Check out the <a href="http://pictos.cc/font/">Pictos icon font</a>, the <a href="https://icomoon.io/">Ico Moon icon font</a>, and the Fontello icon font. There’s more information about icon fonts at <a href="http://css-tricks.com/html-for-icon-font-usage/">CSS-Tricks</a>, and you can use <a href="https://www.branah.com/unicode-converter">Branah’s tool</a> to convert text to unicodes and back.</p>

<h4>Optimizing Your Stylesheet for Best Performance</h4>

<ul>
<li>Minify your stylesheet* Import only the required mixins in your stylesheet * Exclude experimental support for uncommon browsers * Exclude unusable default fonts and icons</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[View Components]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/08/view-components/"/>
    <updated>2014-10-08T22:18:11+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/08/view-components</id>
    <content type="html"><![CDATA[<p>This chapter is all about view components. I will discuss how to implement messageboxes, lists, panels, toolbars, charts, and maps</p>

<p>In this chapter, you’ll learn how to implement:
* A messagebox Toolbars and title bars Buttons<em> Lists</em> A Google Map* Overlays Charts</p>

<h4>Implementing a Messagebox</h4>

<p>Unlike the standard JavaScript <code>alert</code> method, a messagebox in Sencha Touch is <code>asynchronous</code>. In standard JavaScript, the browser pauses execution until you press OK. In Sencha Touch, showing a messagebox will not cause the code to stop. For this reason, if you have code that should run only after some user feedback from the messagebox, you should use a callback function.
When you want to implement a messagebox, you will have to require Ext.MessageBox at the top of your view class. You don’t need to instantiate a messagebox (although you could); Ext.Msg is a global shared singleton instance of the Ext.MessageBox class that you can use in most cases:
The previous code describes the alert() method, which you can visually compare with the standard alert messagebox in JavaScript. See Figure 11-1.</p>

<p><img src="/images/2014/10/figure11-1.png"></p>

<p>It displays a small window, with a title, a message, and an OK button. In addition to thealert, there are these types of messageboxes:
* prompt(), shown in Figure 11-2, which is a messagebox with a title, message, a textfield, and Cancel and OK buttons<em> confirm(), shown in Figure 11-3, which is a messagebox with a title, a message, and No and Yes buttons</em> show(), which provides even more options.
Here’s an example of the prompt() messagebox; the callback contains the button id and the entered value. The button id can be Yes, No, or Cancel (Cancel means close the messagebox without pressing the Yes and No buttons):
```
Ext.Msg.prompt(&lsquo;Welcome&rsquo;, &lsquo;Please enter your name&rsquo;, function(btn, val) { //callback</p>

<pre><code>console.log(btn, val);
</code></pre>

<p>});<code>
There is one more messagebox method that is worth mentioning: show().The show() method will give you many more options; you can pass in a config object. Here I set up
a customized prompt() messagebox. It has a width of 500 pixels, it accepts multiline input, it has an info icon, and I want to specify my own set of buttons. Also, I will define a callback function:</code>
var myPromptBox = Ext.Msg.show({</p>

<pre><code>title: 'Address',
message: 'Please enter your address:',
width: 500,
buttons: Ext.MessageBox.YESNOCANCEL,
iconCls: Ext.MessageBox.QUESTION,
multiLine: true,
prompt: {
    maxlength: 180,
    autocapitalize: true
},
fn: function(buttonId) {
    alert('You pressed the "' + buttonId + '" button.');
}
</code></pre>

<p>});```
The iconCls can set an icon CSS class on the messagebox to showcase an icon. You can maintain this in your theme, but out of the box Sencha Touch ships with the following messagebox icons:
* Ext.MessageBox.ERROR (a round error sign)
* Ext.MessageBox.INFO (a round info sign)
* Ext.MessageBox.QUESTION (a question mark)
* Ext.MessageBox.WARNING (a warning sign)</p>

<p>The following sets of buttons are available in Sencha Touch:</p>

<ul>
<li>Ext.MessageBox.OK (OK button with action UI skin)<em> Ext.MessageBox.YES (Yes button with action UI skin)</em> Ext.MessageBox.NO (No button)<em> Ext.MessageBox.CANCEL (Cancel button)</em> Ext.MessageBox.YESNOCANCEL (Cancel button, No button, and Yes button with action UI skin)* Ext.MessageBox.OKCANCEL (Cancel button, and OK button with action UI skin) * Ext.MessageBox.YESNO (No button, and Yes button with action UI skin)
If these button sets are in the wrong order, or you would like to specify your own button text and UI skins, you can pass in an array with Ext.Buttons into the buttons config, as you can see in Figure 11-4:
<code>
var pirateBox = Ext.Msg.show({
  title: 'Ahoy!',
  message: 'Stop pirate, would ye like t\' proceed?',
  iconCls: Ext.MessageBox.ERROR,
  width: 200,
  buttons: [{
      text: 'Aye',
      itemId: 'yes',
      ui: 'action'
  }, {
      text: 'Avast',
      itemId: 'no',
      ui: 'decline'
  }],
  fn: function(buttonId) {
      alert('You pressed the "' + buttonId + '" button.');
  }
});</code>
<img src="/images/2014/10/figure11-4.png"></li>
</ul>


<p>To hide the previous messagebox, just run the hide() method on the pirateBox.</p>

<h4>Implementing Toolbars and Title Bars</h4>

<p>When you want to implement a toolbar (or title bar) view component (Figure 11-5), you will have to add the Ext.Toolbar (or Ext.TitleBar) to the requires at the top of your view class. After that, you can instantiate the component by using the Ext.create(&ldquo;Ext.Toolbar&rdquo;, {}) syntax, or by lazy instantiating (nesting the xtype called toolbar). Using the xtype is the best practice for coding real-world MVC applications.</p>

<p><img src="/images/2014/10/figure11-5.png"></p>

<p>Implementing a title bar works exactly the same. The only difference is that the class from which you implement the instance is called Ext.TitleBar and the xtype is called titlebar. Although the title bar does not extend from Ext.Toolbar, they have a very similar appearance and setup.</p>

<p>The main difference between a Ext.TitleBar and a Ext.Toolbar is that the title config is always centered horizontally in a title bar, between any items aligned left or right. By default, any item in a title bar or toolbar is a button, so you do not need to explicitly set it. Items in a title bar, such as buttons, can be docked to the left or right side of the bar, via the align config.</p>

<h4>Implementing Lists</h4>

<p>A list is a data-aware component. You will need to hook up a data store to the list (with a fields model) to display any items. Following is an example of an Ext.List. First you must make sure you add the Ext.List to the requires array at the top of your view class so the Ext.Loader can load the framework class. Afterward you will use the object literal notation to create a Sencha Touch list:</p>

<p>```
{</p>

<pre><code>xtype: 'list',
store: {
    fields: ['name'],
    data: [{
        name: 'Leonardo'
    }, {
        name: 'Donatello'
    }, {
        name: 'Michelangelo'
    }, {
        name: 'Raphael'
    }]
},
itemTpl: '{name}'
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline Storage (Client Proxies)]]></title>
    <link href="http://xiekunRonaldo.github.io/blog/2014/10/07/offline-storage-client-proxies/"/>
    <updated>2014-10-07T22:09:31+08:00</updated>
    <id>http://xiekunRonaldo.github.io/blog/2014/10/07/offline-storage-client-proxies</id>
    <content type="html"><![CDATA[<p>HTML5 offers a powerful way to achieve this with Local Storage, Session Storage, Web SQL, and Application Cache.</p>

<ul>
<li><p>HTML5 Local Storage</p>

<p>  HTML5 Local Storage saves its data with no expiration date. You use it to save key/value pairs. The Sencha framework uses it internally to save persisted JavaScript (Sencha) classes. When you open a Sencha Touch app while you are offline, the Sencha Touch app itself can run because all the assets are stored offline in the Local Storage. The FindACab app makes use of Local Storage by saving the user settings offline.</p></li>
<li><p>HTML5 Session Storage</p>

<p>  This method saves its data in a session. The session will be over after the browser is closed. This is the main difference from Local Storage, which won’t lose its data at all. Usually, the HTML5 Session Storage is used for online shopping baskets. It stores all the products in the session. After the products are purchased, the session can be cleared.</p></li>
<li><p>Web SQL Databases</p>

<p>  This method, formerly known as “WebDB,” provides a thin wrapper around a SQL database. In 2007, Google launched Google Gears, an open source cross-browser plug-in that included an embedded database based on SQLite. This early prototype later influenced the creation of the HTML5 Web SQL Database specification.</p></li>
<li><p>Application Cache</p>

<p>  This can make your application available offline, and can cache files and assets into the browser. You will need to <code>set up an AppCache manifest file</code>.</p></li>
</ul>


<p><code>CAUTION</code></p>

<p>There is a SQL client proxy available in Sencha Touch 2.3. However, unfortunately, on November 18, 2010, the W3C announced that Web SQL database is a deprecated specification. This means that web developers should no longer use the technology, as the spec will receive no further updates, and browser vendors aren’t encouraged to support this technology. You can still use Web SQL databases in Google Chrome and in Safari browsers, but at your own risk. That said, it works very well with Sencha Touch, and there is no officially supported alternative.You might want to check out IndexDB instead. See Grgur Grisogono’s <a href="https://github.com/grgur/Ext.data.proxy.IndexedDB">Sencha IndexDB Proxy</a>.
The Sencha Touch client proxy saves and loads the data locally on its device or in itsmemory. Sencha Touch’s client proxy has four important subclasses:
* Ext.data.proxy.Memory
* Ext.data.proxy.LocalStorage
* Ext.data.proxy.SessionStorage
* Ext.data.proxy.Sql
The <code>MemoryProxy</code> uses a local variable for data storage and retrieval, but the contents are lost on every page refresh. For that reason, I will not discuss it in this chapter.
This is not the case with the <code>LocalStorage</code> proxy, the <code>SessionStorage</code> proxy, and the <code>SQL</code> proxy. When the browser provides support for these, it will save the model data as a key/value data store into the browser, so it will remain after the browser is closed and reopened. If the HTML5 Storage API is not supported by the browser, the constructor will throw an error.</p>

<p>This is not the case with the LocalStorage proxy, the SessionStorage proxy, and the SQL proxy. When the browser provides support for these, it will save the model data as a key/value data store into the browser, so it will remain after the browser is closed and reopened. If the HTML5 Storage API is not supported by the browser, the constructor will throw an error.
Because the data is saved as key/value pairs, where the key needs to be unique, you cannot save complex objects like JSON — unless you convert these JSON objects to strings with Ext.JSON.encode(). LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.
Here is an example showing how to implement a client proxy to your model or store class:
<code>
proxy: {    type: "&lt;client-proxy&gt;"}</code>
The type can be set to <code>memory</code> (the default), <code>localstorage</code>, <code>sessionstorage</code>, or <code>sql</code>.
In this chapter, you’ll learn:
* How to save data into Local Storage<em> How to save data into Session Storage</em> How to save data into a Web SQL database* How to save assets locally by using the Application Cache</p>

<h4>Saving Data into Local Storage</h4>

<p><code>CAUTION</code></p>

<p>When this proxy is used in a browser where Local Storage is not supported, the constructor will throw an error.</p>

<p>Every key/value pair in the Local Storage should have a unique key, to refer to its model data. Sencha Touch can generate a unique record id for you; you will only need to set an id on the proxy, which will be <code>prefixed</code> to the unique record id to make the Local Storage key.
In the FindACab app, you will use the LocalStorage proxy for saving user settings locally on the device. The Settings model in the FindACab app will contain a proxy like this:</p>

<p><code>
proxy: {    type: 'localstorage',   id: "Setting"}</code>
Note that the key/value pairs in the client proxies are strings! When you retrieve this data later from a store — by using, for example, the command Ext.getStore(&ldquo;MyStore&rdquo;).getAt(0) — it will decode this string to a JavaScript object for you. In other words, it serializes and deserializes data <code>automatically</code> when saving or retrieving it. Awesome!
An example Local Storage key/value pair for the FindACab app could look like this:
```
&ldquo;Setting-51726e64-ae85-4fe8-9bea-aa085f499da6&rdquo; : &ldquo;{</p>

<pre><code>"id":"51726e64-ae85-4fe8-9bea-aa085f499da6", 
"gps":null,
"city":"Amsterdam", "country":"NL" 
</code></pre>

<p>}&ldquo;```
To generate an id with Sencha Touch, you need to implement an id strategy. There are three strategies you can use:</p>

<ul>
<li><code>Ext.data.identifier.Sequential</code> is a sequential id generator. It generates ids in sequential order (1, 2, 3, etc.).<em> <code>Ext.data.identifier.Simple</code> is the default id generator in Sencha Touch. It generates ids in sequential order, prefixed with a prefix parameter. When no prefix parameter is set, it prefixes ids by default with ext-record- (e.g., ext- record-1, ext-record-2, ext-record-3, etc.).</em> <code>Ext.data.identifier.Uuid</code> is a UUID (Universally Unique IDentifier, also known as GUIDs (Globally Unique IDentifier generator). A UUID is a 128-bits id that can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation’s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.
To set an id strategy, you have to require one of the identifiers at the top of your model; for example: <code>requires: ["Ext.data.identifier.Uuid]</code>. The model should also have the idProperty set to the model field that can be used as an id, which defaults to the fieldname: id. (Make sure the field type matches!) In addition, the model should contain the identifier property. In this case, it can be set to uuid, which is why you are requiring this class at the top of the file.
Let’s take a look at the full code for the Settings model of the FindACab app, FindACab.model.Setting:
<code>
Ext.define('FindACab.model.Setting', {
      extend: 'Ext.data.Model',
      requires: ['Ext.data.identifier.Uuid'],
      config: {
          idProperty: 'id',
          identifier: 'uuid',
          fields: [{
              name: 'id',
              type: 'auto'
          }, {
              name: 'gps',
              type: 'boolean'
          }, {
              name: 'city',
              type: 'string'
          }, {
              name: 'country',
              type: 'string'
          }],
          validations: [{
              type: 'presence',
              field: 'city',
              message: "Please provide a city."
          }, {
              type: 'presence',               field: 'country',               message: "Please provide a country."
          }],
          proxy: {
              type: 'localstorage',
              id: "Setting"
          }￼￼￼
      }</code>

<h4>Saving Data into Session Storage</h4>

<p><code>
proxy: {    type: "sessionstorage",     id: "session-id-prefix"}</code></p></li>
</ul>


<h4>Saving Data into a Web SQL Database for the FindACab App</h4>

<p><code>TIP</code>
Isn’t it annoying that you cannot delete a Web SQL database directly with the Google Chrome Dev Tools? Well, there is a solution to remove a database (and its tables). Just open the following URL in your Google Chrome browser: chrome://settings/cookies. Here you can search for any particular site or remove all locally stored data. In my case, I just search for localhost, and I get an exact overview of all my cookies, Local Storage, and Web SQL databases. I can double-click a database, and I’ll be prompted to remove the database. I click the Remove button, and it is gone!</p>

<h4>Saving Assets Locally by Using the Application Cache</h4>

<p>it is a technique for making your application available offline, without downloading the stylesheets, images, Sencha Touch framework, and custom classes. It will create a cached version of your mobile app by setting up a HTML5 cache manifest file, better known as the HTML5 AppCache.
AppCache is extremly handy for users who want to bookmark their mobile apps to their phone home screen. This is nice because the browser address bar will be gone, so it will give you a more native experience.
Whereas Web Storage saves key/value pairs in the browser’s Local or Session Storage, AppCache has the HTML5 ability to save (cache) a whole web app (the index.html file and all its assets, such as stylesheets, JavaScript, images, icons, fonts, etc.) in the browser’s cache to make it available, even if the client has no Internet connection at all.
The Application Cache manifest file is a simple text file that lists the resources that the browser should cache for offline access. Another reason for using AppCache is speed (because it caches and therefore loads faster) and performance (it reduces server load).
<code>TIP</code>
<a href="http://www.w3.org/TR/offline-webapps/#offline">Read the W3C spec about AppCache</a>. Also, take a look at <a href="http://alistapart.com/article/application-cache-is-a-douchebag">Jake Archibald’s blog post</a> at A List Apart about troubleshooting AppCache.
Now how can you implement this? You don’t have to do much to make Application Cache work. First, you will have to edit the app.json file; it should define the appCache object. Let’s take a look:
```
&ldquo;appCache&rdquo;: {</p>

<pre><code>"cache": [      "index.html",       "resources/css/app.css" ],```The cache section lists all the items that need to be cached. Make sure that these filesexist, or else the caching will fail (and if it fails, you will not be happy):
</code></pre>

<p>```
&ldquo;network&rdquo;: [</p>

<pre><code>"*"],```
</code></pre>

<p>The <code>network</code> section is basically used for (white) listing files that require an online connection. All requests to these resources <code>bypass the cache</code>, even if the browser is offline. Note you can also set this to a wildcard, *. This might be handy when the files from the cache section are cached but some assets are not listed and therefore missing. It will make sure that those unlisted assets will still be downloaded, no matter what. If I didn’t create a network section that points to the wildcard, then the application would miss these files:
```</p>

<pre><code>"fallback": [       //fall back items   ￼
]}//end appCache```
</code></pre>

<p>The fallback section in the app cache file will let us list fallback solutions for when a request fails. See, for example, the line <code>resources/images/resources/images/placeholder.gif</code>. If any image in the resources/images folder fails, it will display the placeholder.png file.</p>

<p>Then build the application with Sencha Cmd:</p>

<p>```</p>

<pre><code>sencha app build
</code></pre>

<p>```
Be aware that the Application Cache can be a pain sometimes for the following reasons:</p>

<ul>
<li>You cannot specify an expiration date/time for files in the cache. But you can expire the cache by making a change to the manifest file — for example, by adding a comment. Any change to the file causes all files to be recached. This is what Sencha does: it changes the Application Cache manifest by adding comments that represent generated unique keys.</li>
<li>If any of the files listed on the manifest are not found, no caching will occur.</li>
<li>While waiting for the manifest file, the browser will load the site <code>from the cache</code>. Therefore, changes to your cache manifest are acted upon only after a <code>second</code> refresh from when the file was modified.</li>
<li>Manually clearing the browser cache from the Google Chrome Dev Tools does not force all files to be recached.</li>
</ul>


<p><code>TIP</code></p>

<p>A manifest file must be served with the <code>MIME-typ</code>e text/cache-manifest. You may need to add this custom file type to your web server or to a .htaccess file: AddType text/cache-manifest .appcache.</p>
]]></content>
  </entry>
  
</feed>
